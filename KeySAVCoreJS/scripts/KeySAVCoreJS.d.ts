/*!
* Type definitions for KeySAVCoreJS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
*
* Generated by DuoCode Compiler 1.1.1423.0 [Community]
*/

/// <reference path="./mscorlib.d.ts" />

declare module JS {
    // JS.TypedArray
    export interface TypedArray {
    }
    var TypedArray: TypeFunction;
}
declare module KeySAVCore {
    // KeySAVCore.BattleVideoBreaker
    export interface BattleVideoBreakerTypeFunc extends TypeFunction {
        (): BattleVideoBreakerTypeFunc;
        Load(input: Uint8Array, keyGetter: Function, callback: Function): void;
        Break(video1: Uint8Array, video2: Uint8Array): Structures.BattleVideoBreakResult;
    }
    var BattleVideoBreaker: BattleVideoBreakerTypeFunc;

    // KeySAVCore.BattleVideoReader
    export interface BattleVideoReader extends System.Object {
        getPkx(slot: byte, opponent: boolean): System.Nullable$1<Structures.PKX>;
        get_DumpsEnemy(): boolean;
    }
    export interface BattleVideoReaderTypeFunc extends TypeFunction {
        (): BattleVideoReaderTypeFunc;
        prototype: BattleVideoReader;
    }
    var BattleVideoReader: BattleVideoReaderTypeFunc;

    // KeySAVCore.ISaveReader
    export interface ISaveReader {
        KeySAVCore$ISaveReader$get_KeyName(): string;
        KeySAVCore$ISaveReader$get_UnlockedSlots(): ushort;
        KeySAVCore$ISaveReader$scanSlots$2(from: ushort, to: ushort): void;
        KeySAVCore$ISaveReader$scanSlots(): void;
        KeySAVCore$ISaveReader$scanSlots$1(pos: ushort): void;
        KeySAVCore$ISaveReader$getPkx(pos: ushort): System.Nullable$1<Structures.PKX>;
    }
    var ISaveReader: TypeFunction;

    // KeySAVCore.SaveBreaker
    export interface SaveBreakerTypeFunc extends TypeFunction {
        (): SaveBreakerTypeFunc;
        eggnames: string[];
        Load(input: Uint8Array, keyGetter: Function, callback: Function): void;
        Break(break1: Uint8Array, break2: Uint8Array): Structures.SaveBreakResult;
    }
    var SaveBreaker: SaveBreakerTypeFunc;

    // KeySAVCore.SaveReaderDecrypted
    export interface SaveReaderDecrypted extends System.Object, ISaveReader {
        get_KeyName(): string;
        get_UnlockedSlots(): ushort;
        scanSlots(): void;
        scanSlots$1(pos: ushort): void;
        scanSlots$2(from: ushort, to: ushort): void;
        getPkx(pos: ushort): System.Nullable$1<Structures.PKX>;
    }
    export interface SaveReaderDecryptedTypeFunc extends TypeFunction {
        (): SaveReaderDecryptedTypeFunc;
        prototype: SaveReaderDecrypted;
    }
    var SaveReaderDecrypted: SaveReaderDecryptedTypeFunc;

    // KeySAVCore.SaveReaderEncrypted
    export interface SaveReaderEncrypted extends System.Object, ISaveReader {
        get_KeyName(): string;
        get_UnlockedSlots(): ushort;
        scanSlots(): void;
        scanSlots$1(pos: ushort): void;
        scanSlots$2(start: ushort, end: ushort): void;
        getPkx(pos: ushort): System.Nullable$1<Structures.PKX>;
    }
    export interface SaveReaderEncryptedTypeFunc extends TypeFunction {
        (): SaveReaderEncryptedTypeFunc;
        prototype: SaveReaderEncrypted;
    }
    var SaveReaderEncrypted: SaveReaderEncryptedTypeFunc;

    // KeySAVCore.Utility
    export interface UtilityTypeFunc extends TypeFunction {
        (): UtilityTypeFunc;
        xor(one: Uint8Array, two: Uint8Array): Uint8Array;
        xor$1(first: Uint8Array, second: Uint8Array, secondoffset: int): Uint8Array;
        xor$2(first: Uint8Array, firstOffset: int, second: Uint8Array, secondOffset: int, length: int): Uint8Array;
        xor$3(first: Uint8Array, firstOffset: int, second: Uint8Array, secondOffset: int, target: Uint8Array, targetOffset: int, length: uint): void;
        XorInPlace(self: Uint8Array, offset: int, other: Uint8Array, otherOffset: int, length: int): void;
        SequenceEqual$1(self: Uint8Array, other: Uint8Array, offset: int): boolean;
        SequenceEqual$2(one: Uint8Array, oneOffset: int, two: Uint8Array, twoOffset: int, length: int): boolean;
        SequenceEqual(self: Uint8Array, other: Uint8Array): boolean;
        Empty(array: byte[]): boolean;
        Empty$1(array: byte[], offset: uint, length: uint): boolean;
        TrimCString(str: string): string;
        CleanFileName(fileName: string): string;
        Switch<T>(T: TypeArg<T>, /* ref */ one: { value: T; }, /* ref */ two: { value: T; }): void;
    }
    var Utility: UtilityTypeFunc;
    module Structures {
        // KeySAVCore.Structures.BattleVideoBreakResult
        export interface BattleVideoBreakResult extends System.Object {
            success: boolean;
            result: string;
        }
        export interface BattleVideoBreakResultTypeFunc extends TypeFunction {
            (): BattleVideoBreakResultTypeFunc;
            prototype: BattleVideoBreakResult;
            ctor: { new (success: boolean, result: string, key: Uint8Array): BattleVideoBreakResult; };
        }
        var BattleVideoBreakResult: BattleVideoBreakResultTypeFunc;

        // KeySAVCore.Structures.PKX
        export interface PKX extends System.ValueType {
            ec: uint;
            pid: uint;
            exp: uint;
            evHp: uint;
            evAtk: uint;
            evDef: uint;
            evSpAtk: uint;
            evSpDef: uint;
            evSpe: uint;
            ivHp: uint;
            ivAtk: uint;
            ivDef: uint;
            ivSpe: uint;
            ivSpAtk: uint;
            ivSpDef: uint;
            contestStatCool: uint;
            contestStatBeauty: uint;
            contestStatCute: uint;
            contestStatSmart: uint;
            contestStatTough: uint;
            contestStatSheen: uint;
            markings: uint;
            hpType: uint;
            nickname: string;
            notOT: string;
            ot: string;
            pkrsStrain: int;
            pkrsDuration: int;
            levelMet: int;
            otGender: int;
            isEgg: boolean;
            isNick: boolean;
            isShiny: boolean;
            isGhost: boolean;
            isFatefulEncounter: boolean;
            ability: ushort;
            abilityNum: ushort;
            nature: ushort;
            species: ushort;
            heldItem: ushort;
            tid: ushort;
            sid: ushort;
            tsv: ushort;
            esv: ushort;
            move1: ushort;
            move2: ushort;
            move3: ushort;
            move4: ushort;
            move1Pp: ushort;
            move2Pp: ushort;
            move3Pp: ushort;
            move4Pp: ushort;
            move1Ppu: ushort;
            move2Ppu: ushort;
            move3Ppu: ushort;
            move4Ppu: ushort;
            eggMove1: ushort;
            eggMove2: ushort;
            eggMove3: ushort;
            eggMove4: ushort;
            ribbonSet1: ushort;
            ribbonSet2: ushort;
            chk: ushort;
            otFriendship: ushort;
            otAffection: ushort;
            eggLocation: ushort;
            metLocation: ushort;
            ball: ushort;
            encounterType: ushort;
            gameVersion: ushort;
            countryID: ushort;
            regionID: ushort;
            dsregID: ushort;
            otLang: ushort;
            box: short;
            slot: short;
            ribbonSet3: byte;
            ribbonSet4: byte;
            form: byte;
            gender: byte;
            metDate: long;
            eggDate: long;
        }
        export interface PKXTypeFunc extends TypeFunction {
            (): PKXTypeFunc;
            prototype: PKX;
            ctor$1: { new (pkx: Uint8Array, box: short, slot: short, isghost: boolean): PKX; };
            ctor: { new (): PKX; };
            decrypt(ekx: Uint8Array): Uint8Array;
            encrypt(pkx: Uint8Array): Uint8Array;
            verifyCHK(pkx: Uint8Array): boolean;
            getDloc(ec: uint): byte;
        }
        var PKX: PKXTypeFunc;

        // KeySAVCore.Structures.SaveBreakResult
        export interface SaveBreakResult extends System.ValueType {
            success: boolean;
            result: string;
            key: System.Nullable$1<SaveKey>;
        }
        export interface SaveBreakResultTypeFunc extends TypeFunction {
            (): SaveBreakResultTypeFunc;
            prototype: SaveBreakResult;
            ctor$1: { new (success: boolean, result: string, key: System.Nullable$1<SaveKey>, resPkx: Uint8Array): SaveBreakResult; };
            ctor: { new (): SaveBreakResult; };
        }
        var SaveBreakResult: SaveBreakResultTypeFunc;

        // KeySAVCore.Structures.SaveKey
        export interface SaveKey extends System.ValueType {
            stamp1: uint;
            stamp2: uint;
            boxOffset: uint;
            slot1Flag: uint;
        }
        export interface SaveKeyTypeFunc extends TypeFunction {
            (): SaveKeyTypeFunc;
            prototype: SaveKey;
            ctor$1: { new (key: Uint8Array): SaveKey; };
            ctor: { new (): SaveKey; };
        }
        var SaveKey: SaveKeyTypeFunc;
    }
    module Exceptions {
        // KeySAVCore.Exceptions.NoKeyException
        export interface NoKeyException extends System.Exception {
        }
        export interface NoKeyExceptionTypeFunc extends TypeFunction {
            (): NoKeyExceptionTypeFunc;
            prototype: NoKeyException;
            ctor: { new (): NoKeyException; };
        }
        var NoKeyException: NoKeyExceptionTypeFunc;

        // KeySAVCore.Exceptions.NoSaveException
        export interface NoSaveException extends System.Exception {
        }
        export interface NoSaveExceptionTypeFunc extends TypeFunction {
            (): NoSaveExceptionTypeFunc;
            prototype: NoSaveException;
            ctor: { new (): NoSaveException; };
        }
        var NoSaveException: NoSaveExceptionTypeFunc;

        // KeySAVCore.Exceptions.NoBattleVideoException
        export interface NoBattleVideoException extends System.Exception {
        }
        export interface NoBattleVideoExceptionTypeFunc extends TypeFunction {
            (): NoBattleVideoExceptionTypeFunc;
            prototype: NoBattleVideoException;
            ctor: { new (): NoBattleVideoException; };
        }
        var NoBattleVideoException: NoBattleVideoExceptionTypeFunc;
    }
}
