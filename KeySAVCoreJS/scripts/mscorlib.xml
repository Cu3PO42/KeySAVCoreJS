<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mscorlib</name>
    </assembly>
    <members>
        <member name="T:DuoCode.Runtime.InvokeMainMode">
            <summary>
            Specifies the main entry point invocation mode. Default: <c>window.onload = Program.Main;</c>
            </summary>
        </member>
        <member name="F:DuoCode.Runtime.InvokeMainMode.WindowOnLoad">
            <summary>
            <c>window.onload = Program.Main;</c>
            </summary>
        </member>
        <member name="F:DuoCode.Runtime.InvokeMainMode.Immediate">
            <summary>
            Program.Main();
            </summary>
        </member>
        <member name="F:DuoCode.Runtime.InvokeMainMode.Manual">
            <summary>
            Don't call main.
            </summary>
        </member>
        <member name="T:DuoCode.Runtime.ReflectionLevel">
            <summary>
            Specifies the reflection level for the DuoCode compiler.
            </summary>
        </member>
        <member name="F:DuoCode.Runtime.ReflectionLevel.Minimal">
            <summary>
            Minimal reflection (=0, default).
            RTTI includes: type kind, base type, inheritance, unconstructed type, declaring type, interfaces, type arguments, enum names.
            </summary>
        </member>
        <member name="F:DuoCode.Runtime.ReflectionLevel.Partial">
            <summary>
            Partial reflection (=1).
            RTTI includes: fields, properties, events, methods and attributes, no private members.
            </summary>
        </member>
        <member name="F:DuoCode.Runtime.ReflectionLevel.Full">
            <summary>
            Full reflection (=2).
            RTTI includes: method parameters and their attributes.
            </summary>
        </member>
        <member name="T:DuoCode.Runtime.CompilerOptions">
            <summary>
            Specifies the DuoCode compiler options.
            </summary>
        </member>
        <member name="T:DuoCode.Runtime.Js">
            <summary>
            This static class enables direct access to various JavaScript keywords, operators and methods.
            </summary>
        </member>
        <member name="F:DuoCode.Runtime.Js.de">
            <summary>
            JavaScript expression, using C# dynamic expression.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.regex(System.String,System.String)">
            <summary>
            Constructs a JavaScript regular expression object.
            Example: <c>Js.regex("^([0-9a-f]{4})$", "ig")</c>, ushort hex parsing.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.new(DuoCode.Runtime.JsObject,System.Object[])">
            <summary>
            Directly calls the JavaScript 'new' operator. Example: Js.new(Js.reference("MyObject")) -> new MyObject()
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.new``1(DuoCode.Runtime.JsObject,System.Object[])">
            <summary>
            Directly calls the JavaScript 'new' operator. Example: Js.new(Js.reference("MyObject")) -> new MyObject()
            </summary>
        </member>
        <member name="F:DuoCode.Runtime.Js.arguments">
            <summary>
            References the JavaScript 'arguments' array.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.this">
            <summary>
            References the JavaScript 'this' keyword.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.this``1">
            <summary>
            References the JavaScript 'this' keyword.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.apply(DuoCode.Runtime.JsObject,DuoCode.Runtime.JsObject,DuoCode.Runtime.JsArray)">
            <summary>
            Calls the JavaScript 'apply' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.call(DuoCode.Runtime.JsObject,DuoCode.Runtime.JsObject,DuoCode.Runtime.JsObject[])">
            <summary>
            Calls the JavaScript 'call' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.apply``1(System.Action{``0},DuoCode.Runtime.JsObject,DuoCode.Runtime.JsArray)">
            <summary>
            Calls the JavaScript 'apply' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.call``1(System.Action{``0},DuoCode.Runtime.JsObject,DuoCode.Runtime.JsObject[])">
            <summary>
            Calls the JavaScript 'call' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.delete(DuoCode.Runtime.JsObject)">
            <summary>
            Calls the JavaScript 'delete' operator.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.procedure(System.Action)">
            <summary>
            Wraps the given action as JavaScript function.
            Example 1: Js.procedure(() => foo(); ) -> function() { foo(); }
            Example 2: Js.procedure(some_static_method) -> some_static_method
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.function(System.String)">
            <summary>
            Gets the underlying JavaScript function from 'nameof()' function expression.
            Example 1: Js.function(nameof(classA.static_method)) -> classA.static_method;
            Example 2: Js.function(nameof(classA.method)) -> classA.prototype.method;
            Example 3: Js.function(nameof(instance.method)) -> instance.method;
            </summary>
            <param name="nameOfFunction">nameof(function) expression.</param>
            <returns>The underlying JavaScript function.</returns>
        </member>
        <member name="M:DuoCode.Runtime.Js.function``1(System.Func{``0})">
            <summary>
            Wraps the given function as JavaScript function.
            Example 1: Js.function&lt;string&gt;(() => { return "foo"; }) -> function() { return "foo"; }
            Example 2: Js.function&lt;int&gt;(some_static_method) -> some_static_method
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.typeof(System.Object)">
            <summary>
            Calls the JavaScript 'typeof' operator.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.member(DuoCode.Runtime.JsObject,System.String)">
            <summary>
            JavaScript object member access.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.memberset(DuoCode.Runtime.JsObject,System.String,System.Object)">
            <summary>
            JavaScript object member setter.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.array(DuoCode.Runtime.JsObject[])">
            <summary>
            Creates a JavaScript array literal (example: [1, 2, 3]).
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.array``1(``0[])">
            <summary>
            Creates a JavaScript array literal (example: [1, 2, 3]).
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.invoke(DuoCode.Runtime.JsObject,DuoCode.Runtime.JsObject[])">
            <summary>
            Invokes given target function with given arguments.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.type``1">
            <summary>
            Returns internal type function of the given type T.
            Example: Js.type&lt;T&gt; -> T
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.type(System.Type)">
            <summary>
            Returns internal type function of the given type.
            Example: Js.type(typeof(T)) -> T
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.type(System.Type,System.Reflection.JsTypeFunction[])">
            <summary>
            Returns internal type function of the given generic type instantiated.
            Translates to 'genericType(typeArg1, typeArgs2, ...)' call.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.reference(System.String)">
            <summary>
            References a JavaScript verbatim identifier.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.referenceAs``1(System.String)">
            <summary>
            References a JavaScript verbatim identifier with specified type.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.require``1(System.String)">
            <summary>
            Invokes a JavaScript 'require(path)' method with given module path.
            Example: var http = Js.require("http");
            </summary>
            <typeparam name="T">The type of the module.</typeparam>
            <param name="path">A path to a JavaScript module.</param>
            <returns></returns>
        </member>
        <member name="M:DuoCode.Runtime.Js.return(DuoCode.Runtime.JsObject)">
            <summary>
            References the JavaScript 'return' keyword.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.parseInt(System.String,System.Int32)">
            <summary>
            Calls the JavaScript 'parseInt' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.parseFloat(System.String,System.Int32)">
            <summary>
            Calls the JavaScript 'parseFloat' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.isNaN(DuoCode.Runtime.JsNumber)">
            <summary>
            Calls the JavaScript 'isNaN' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.isFinite(DuoCode.Runtime.JsNumber)">
            <summary>
            Calls the JavaScript 'isFinite' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.instanceof(System.Object,DuoCode.Runtime.JsObject)">
            <summary>
            Calls the JavaScript 'instanceof' operator.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.object(System.Object)">
            <summary>
            Creates a JavaScript object expression (like: <c>{ prop1: value1, prop2: value2 }</c>) using anonymous class declaration.
            Usage: <c>Js.@object(new { prop1 = value1, prop2 = value2 })</c>.
            </summary>
            <param name="obj">Anonymous class declaration.</param>
            <returns>The JavaScript object.</returns>
            <seealso cref="T:DuoCode.Runtime.JsDictionary`2"/>
        </member>
        <member name="M:DuoCode.Runtime.Js.encodeURIComponent(System.String)">
            <summary>
            Calls the JavaScript 'encodeURIComponent' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.decodeURIComponent(System.String)">
            <summary>
            Calls the JavaScript 'decodeURIComponent' method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.forin(DuoCode.Runtime.JsObject,System.Action{System.String})">
            <summary>
            References the JavaScript 'for ... in' statement.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.in(System.String,System.Object)">
            <summary>
            References the JavaScript 'in' operator.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.debugger">
            <summary>
            References the JavaScript 'debugger' statement.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.throw(System.Object)">
            <summary>
            References the JavaScript 'throw' keyword.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.Js.retype``1(``0)">
            <summary>
            Assigns the type known at compilation time to the given object.
            Use this method to make delegate instance strongly typed.
            In order to change type call <c>retype(obj.As&lt;U&gt;())</c>.
            </summary>
            <typeparam name="T">The new type to assign.</typeparam>
            <param name="obj">An object.</param>
        </member>
        <member name="F:DuoCode.Runtime.Js.undefined">
            <summary>
            References the JavaScript 'undefined' keyword.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.JsArray.clone">
            <summary>
            maps to 'slice()' call.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.JsArray`1.clone">
            <summary>
            maps to 'slice()' call.
            </summary>
        </member>
        <member name="T:DuoCode.Runtime.JsAttribute">
            <summary>
            Controls the interoperability and conversion of .NET types and symbols into JavaScript by the compiler.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.Export">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            Specifies that the given symbol should not be exported to JavaScript (true by default).
            Targets: classes, structures, enums, fields, properties, methods, constructors.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.Extern">
            <summary>
            Specifies that the symbol is external and should be ignored when translating code to JavaScript.
            This is useful when integrating external JavaScript APIs.
            Use C# <c>extern</c> keyword on methods and properties.
            Targets: classes, structures, interfaces.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.Name">
            <summary>
            If specified, this name will be used to identify the symbol, rather than the compiler-generated name.
            This is useful when integrating external JavaScript APIs.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.Ignore">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            Specifies that a class, method, property or field should be ignored when translating code to JavaScript.
            Any reference to such symbol will be omitted by the compiler.
            Targets: classes, structures, interfaces, delegates, enums, fields, properties, methods, constructors.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.Extension">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            If true, all invocations to the method or property will be invoked by proxy.  method.apply(this, arguments);
            This can be useful when creating a stand-in class that represents a built-in type.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.BuiltIn">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            Allows to extend JavaScript built-in type prototypes.
            Targets: classes and structures only.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.BaseType">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            Overrides class or structure base type.
            Targets: classes and structures only.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.ConstValueExpression">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            If not null, this JavaScript expression will be used as a constant value.
            For example:
              [Js(ConstValueExpression = "Math.PI")]
              private const double c_PI = 0;
            This is useful when integrating external JavaScript constants.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.InvokeStaticConstructor">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            If true, invokes static constructor $t() immediately after definition.
            This flag is valid only on structs and classes.
            Targets: classes and structures only.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.InvokeConstructorAsClass">
            <summary>
            Replaces instantiations of this class with invocations of the class as though it were a function.
            For example, the jQuery class uses this value in conjunction with overriding the name to `$` such
            that instead of `new jQuery(...)` resolving to `new $(...)` it instead generates `$(...)`.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.InvokeConstructorAsStatic">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            Constructor will be called statically and must "return" the new instance.
            Targets: constructors only.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.RuntimeDispatch">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            Specifies that, if overloaded, the correct overload from the group of this method to invoke should be decided at runtime instead of compile time.
            No overload renaming will be done by the compiler within the same group.
            Targets: methods only.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.ImplementsInterface">
            <summary>
            This value supports the runtime and is not intended to be used directly from your code.
            Specifies that, this is a dummy external method (must be marked as 'extern') that just implements some interface.
            Targets: properties or methods.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.StructIsImmutable">
            <summary>
            Specifies that, this structure is immutable.
            Targets: structures only.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.OmitGenericArgs">
            <summary>
            Specifies that generic arguments should be omitted, i.e. generic arguments are used only as a syntax sugar.
            Targets: methods only.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.OptimizeArrayEnumeration">
            <summary>
            Name of the field (must be array) to use as a direct enumerator of this class.
            Targets: class or struct.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.OptimizeListEnumeration">
            <summary>
            Name of the field (must implement IList) to use as a direct enumerator of this class.
            Targets: class or struct.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.ReflectionLevel">
            <summary>
            Specifies reflection level for this type.
            Targets: classes, structures, interfaces, delegates, enums.
            </summary>
        </member>
        <member name="P:DuoCode.Runtime.JsAttribute.InvokeMainMode">
            <summary>
            Specifies the main entry point invocation mode.
            Target: Main method only.
            </summary>
        </member>
        <member name="T:DuoCode.Runtime.JsDate">
            <summary>
            Corresponds to the built-in Javascript Date type.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.JsDictionary`2.Add(`0,`1)">
            <summary>
            For dictionary initialization only, don't call this method.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.JsNumber.toString(System.Int32)">
            <summary>
            The toString() method returns a string representing the specified Number object.
            
            The Number object overrides the toString() method of the Object object; it does not inherit Object.prototype.toString(). For Number objects, the toString() method returns a string representation of the object in the specified radix.
            The toString() method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), a through f are used.
            If the radix is not specified, the preferred radix is assumed to be 10.
            If the number is negative, the sign is preserved. Especially if the radix is 2, it's returning the binary (zeros and ones) of the number preceeded by a - sign but the two's complement.
            </summary>
            <param name="radix">An integer between 2 and 36 specifying the base to use for representing numeric values.</param>
            <returns>For Number objects, the toString() method returns a string representation of the object in the specified radix.</returns>
        </member>
        <member name="P:DuoCode.Runtime.JsObject.constructor">
            <summary>
            The initial value of Object.prototype.constructor is the standard built-in Object constructor.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.JsObject.toString">
            <summary>
            Returns a string representation of an object.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.JsObject.toLocaleString">
            <summary>
            Returns a date converted to a string using the current locale.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.JsObject.valueOf">
            <summary>
            Returns the primitive value of the specified object.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.JsObject.hasOwnProperty(System.String)">
            <summary>
            Determines whether an object has a property with the specified name.
            </summary>
            <param name="prop">A property name.</param>
        </member>
        <member name="M:DuoCode.Runtime.JsObject.isPrototypeOf(System.Object)">
            <summary>
            Determines whether an object exists in another object's prototype chain.
            </summary>
            <param name="obj">Another object whose prototype chain is to be checked.</param>
        </member>
        <member name="M:DuoCode.Runtime.JsObject.propertyIsEnumerable(System.String)">
            <summary>
            Determines whether a specified property is enumerable.
            </summary>
            <param name="prop">A property name.</param>
        </member>
        <member name="T:DuoCode.Runtime.RuntimeExtensions">
            <summary>
            This is a helper extension class for object type conversions with no casting.
            </summary>
        </member>
        <member name="M:DuoCode.Runtime.RuntimeExtensions.As``1(System.Object)">
            <summary>
            Converts object to the specified type <typeparamref name="T"/> with no casting.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="obj">The object to convert.</param>
            <returns><paramref name="obj"/>.</returns>
            <example>
            <code>
            document.getElementById(name).As&lt;Dom.HTMLInputElement&gt;()
            </code>
            </example>
        </member>
        <member name="M:DuoCode.Runtime.RuntimeExtensions.As``2(``1)">
            <summary>
            Converts value type (prevents boxing) to the specified type <typeparamref name="T"/> with no casting.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <typeparam name="S">The source type.</typeparam>
            <param name="v">The value to convert.</param>
            <returns><paramref name="v"/>.</returns>
        </member>
        <member name="M:DuoCode.Runtime.RuntimeExtensions.IsTruthy(System.Object)">
            <summary>
            Returns true if given object is not <c>0</c>, <c>false</c>, <c>null</c> or <c>undefined</c>.
            For instance '<c>if obj.IsTruthy() {...}</c>' translates to '<c>if (obj) {...}</c>' in JavaScript.
            </summary>
            <param name="obj">The object.</param>
            <returns>true if object is not <c>0</c>, <c>false</c>, <c>null</c> or <c>undefined</c>.</returns>
        </member>
        <member name="P:DuoCode.Dom.PropertyDescriptor.configurable">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.PropertyDescriptor.enumerable">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.PropertyDescriptor.value">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.PropertyDescriptor.writable">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Object.#ctor(System.Object)">
            <param name="value">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Object.constructor">
            <summary>
            The initial value of Object.prototype.constructor is the standard built-in Object constructor.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Object.toString">
            <summary>
            Returns a string representation of an object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Object.toLocaleString">
            <summary>
            Returns a date converted to a string using the current locale.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Object.valueOf">
            <summary>
            Returns the primitive value of the specified object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Object.hasOwnProperty(System.String)">
            <summary>
            Determines whether an object has a property with the specified name.
            </summary>
            <param name="v">A property name.</param>
        </member>
        <member name="M:DuoCode.Dom.Object.isPrototypeOf(DuoCode.Dom.Object)">
            <summary>
            Determines whether an object exists in another object's prototype chain.
            </summary>
            <param name="v">Another object whose prototype chain is to be checked.</param>
        </member>
        <member name="M:DuoCode.Dom.Object.propertyIsEnumerable(System.String)">
            <summary>
            Determines whether a specified property is enumerable.
            </summary>
            <param name="v">A property name.</param>
        </member>
        <member name="M:DuoCode.Dom.Function.apply(System.Object,System.Object)">
            <summary>
            Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.
            </summary>
            <param name="thisArg">The object to be used as the this object.</param>
            <param name="argArray">
            A set of arguments to be passed to the function.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Function.call(System.Object,System.Object[])">
            <summary>
            Calls a method of an object, substituting another object for the current object.
            </summary>
            <param name="thisArg">The object to be used as the current object.</param>
            <param name="argArray">A list of arguments to be passed to the method.</param>
        </member>
        <member name="M:DuoCode.Dom.Function.bind(System.Object,System.Object[])">
            <summary>
            For a given function, creates a bound function that has the same body as the original function.
            The this object of the bound function is associated with the specified object, and has the specified initial parameters.
            </summary>
            <param name="thisArg">An object to which the this keyword can refer inside the new function.</param>
            <param name="argArray">A list of arguments to be passed to the new function.</param>
        </member>
        <member name="M:DuoCode.Dom.String.#ctor(System.String)">
            <param name="value">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.String.toString">
            <summary>
            Returns a string representation of a string.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.String.charAt(System.Double)">
            <summary>
            Returns the character at the specified index.
            </summary>
            <param name="pos">The zero-based index of the desired character.</param>
        </member>
        <member name="M:DuoCode.Dom.String.charCodeAt(System.Int32)">
            <summary>
            Returns the Unicode value of the character at the specified location.
            </summary>
            <param name="index">The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.</param>
        </member>
        <member name="M:DuoCode.Dom.String.concat(System.String[])">
            <summary>
            Returns a string that contains the concatenation of two or more strings.
            </summary>
            <param name="strings">The strings to append to the end of the string.</param>
        </member>
        <member name="M:DuoCode.Dom.String.indexOf(System.String,System.Double)">
            <summary>
            Returns the position of the first occurrence of a substring.
            </summary>
            <param name="searchString">The substring to search for in the string</param>
            <param name="position">
            The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.String.lastIndexOf(System.String,System.Double)">
            <summary>
            Returns the last occurrence of a substring in the string.
            </summary>
            <param name="searchString">The substring to search for.</param>
            <param name="position">
            The index at which to begin searching. If omitted, the search begins at the end of the string.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.String.localeCompare(System.String)">
            <summary>
            Determines whether two strings are equivalent in the current locale.
            </summary>
            <param name="that">String to compare to target string</param>
        </member>
        <member name="M:DuoCode.Dom.String.match(System.String)">
            <summary>
            Matches a string with a regular expression, and returns an array containing the results of that search.
            </summary>
            <param name="regexp">A variable name or string literal containing the regular expression pattern and flags.</param>
        </member>
        <member name="M:DuoCode.Dom.String.match(DuoCode.Dom.RegExp)">
            <summary>
            Matches a string with a regular expression, and returns an array containing the results of that search.
            </summary>
            <param name="regexp">A regular expression object that contains the regular expression pattern and applicable flags.</param>
        </member>
        <member name="M:DuoCode.Dom.String.replace(System.String,System.String)">
            <summary>
            Replaces text in a string, using a regular expression or search string.
            </summary>
            <param name="searchValue">A String object or string literal that represents the regular expression</param>
            <param name="replaceValue">A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.</param>
        </member>
        <member name="M:DuoCode.Dom.String.replace(System.String,System.Func{System.String,System.Object[],System.String})">
            <summary>
            Replaces text in a string, using a regular expression or search string.
            </summary>
            <param name="searchValue">A String object or string literal that represents the regular expression</param>
            <param name="replaceValue">A function that returns the replacement text.</param>
        </member>
        <member name="M:DuoCode.Dom.String.replace(DuoCode.Dom.RegExp,System.String)">
            <summary>
            Replaces text in a string, using a regular expression or search string.
            </summary>
            <param name="searchValue">A Regular Expression object containing the regular expression pattern and applicable flags</param>
            <param name="replaceValue">A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.</param>
        </member>
        <member name="M:DuoCode.Dom.String.replace(DuoCode.Dom.RegExp,System.Func{System.String,System.Object[],System.String})">
            <summary>
            Replaces text in a string, using a regular expression or search string.
            </summary>
            <param name="searchValue">A Regular Expression object containing the regular expression pattern and applicable flags</param>
            <param name="replaceValue">A function that returns the replacement text.</param>
        </member>
        <member name="M:DuoCode.Dom.String.search(System.String)">
            <summary>
            Finds the first substring match in a regular expression search.
            </summary>
            <param name="regexp">The regular expression pattern and applicable flags.</param>
        </member>
        <member name="M:DuoCode.Dom.String.search(DuoCode.Dom.RegExp)">
            <summary>
            Finds the first substring match in a regular expression search.
            </summary>
            <param name="regexp">The regular expression pattern and applicable flags.</param>
        </member>
        <member name="M:DuoCode.Dom.String.slice(System.Int32,System.Int32)">
            <summary>
            Returns a section of a string.
            </summary>
            <param name="start">
            The index to the beginning of the specified portion of stringObj.
            This parameter is optional and can be omitted.
            </param>
            <param name="end">
            The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.
            If this value is not specified, the substring continues to the end of stringObj.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.String.split(System.String,System.Double)">
            <summary>
            Split a string into substrings using the specified separator and return them as an array.
            </summary>
            <param name="separator">A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.</param>
            <param name="limit">
            A value used to limit the number of elements returned in the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.String.split(DuoCode.Dom.RegExp,System.Double)">
            <summary>
            Split a string into substrings using the specified separator and return them as an array.
            </summary>
            <param name="separator">A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.</param>
            <param name="limit">
            A value used to limit the number of elements returned in the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.String.substring(System.Int32,System.Int32)">
            <summary>
            Returns the substring at the specified location within a String object.
            </summary>
            <param name="start">The zero-based index number indicating the beginning of the substring.</param>
            <param name="end">
            Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.
            If end is omitted, the characters from start through the end of the original string are returned.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.String.toLowerCase">
            <summary>
            Converts all the alphabetic characters in a string to lowercase.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.String.toLocaleLowerCase">
            <summary>
            Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.String.toUpperCase">
            <summary>
            Converts all the alphabetic characters in a string to uppercase.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.String.toLocaleUpperCase">
            <summary>
            Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.String.trim">
            <summary>
            Removes the leading and trailing white space and line terminator characters from a string.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.String.length">
            <summary>
            Returns the length of a String object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.String.substr(System.Double,System.Double)">
            <summary>
            Gets a substring beginning at the specified location and having the specified length.
            </summary>
            <param name="from_">The starting position of the desired substring. The index of the first character in the string is zero.</param>
            <param name="length">
            The number of characters to include in the returned substring.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.String.localeCompare(System.String,System.String[],System.Object)">
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Boolean.#ctor(System.Boolean)">
            <param name="value">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Number.#ctor(System.Object)">
            <param name="value">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Number.toString(System.Double)">
            <summary>
            Returns a string representation of an object.
            </summary>
            <param name="radix">
            Specifies a radix for converting numeric values to strings. This value is only used for numbers.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Number.toFixed(System.Double)">
            <summary>
            Returns a string representing a number in fixed-point notation.
            </summary>
            <param name="fractionDigits">
            Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Number.toExponential(System.Double)">
            <summary>
            Returns a string containing a number represented in exponential notation.
            </summary>
            <param name="fractionDigits">
            Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Number.toPrecision(System.Double)">
            <summary>
            Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.
            </summary>
            <param name="precision">
            Number of significant digits. Must be in the range 1 - 21, inclusive.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Number.toLocaleString(System.String[],System.Object)">
            <param name="locales">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Math.E">
            <summary>
            The mathematical constant e. This is Euler's number, the base of natural logarithms.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Math.LN10">
            <summary>
            The natural logarithm of 10.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Math.LN2">
            <summary>
            The natural logarithm of 2.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Math.LOG2E">
            <summary>
            The base-2 logarithm of e.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Math.LOG10E">
            <summary>
            The base-10 logarithm of e.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Math.PI">
            <summary>
            Pi. This is the ratio of the circumference of a circle to its diameter.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Math.SQRT1_2">
            <summary>
            The square root of 0.5, or, equivalently, one divided by the square root of 2.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Math.SQRT2">
            <summary>
            The square root of 2.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Math.abs(System.Double)">
            <summary>
            Returns the absolute value of a number (the value without regard to whether it is positive or negative).
            For example, the absolute value of -5 is the same as the absolute value of 5.
            </summary>
            <param name="x">A numeric expression for which the absolute value is needed.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.acos(System.Double)">
            <summary>
            Returns the arc cosine (or inverse cosine) of a number.
            </summary>
            <param name="x">A numeric expression.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.asin(System.Double)">
            <summary>
            Returns the arcsine of a number.
            </summary>
            <param name="x">A numeric expression.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.atan(System.Double)">
            <summary>
            Returns the arctangent of a number.
            </summary>
            <param name="x">A numeric expression for which the arctangent is needed.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.atan2(System.Double,System.Double)">
            <summary>
            Returns the angle (in radians) from the X axis to a point (y,x).
            </summary>
            <param name="y">A numeric expression representing the cartesian y-coordinate.</param>
            <param name="x">A numeric expression representing the cartesian x-coordinate.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.ceil(System.Double)">
            <summary>
            Returns the smallest number greater than or equal to its numeric argument.
            </summary>
            <param name="x">A numeric expression.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.cos(System.Double)">
            <summary>
            Returns the cosine of a number.
            </summary>
            <param name="x">A numeric expression that contains an angle measured in radians.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.exp(System.Double)">
            <summary>
            Returns e (the base of natural logarithms) raised to a power.
            </summary>
            <param name="x">A numeric expression representing the power of e.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.floor(System.Double)">
            <summary>
            Returns the greatest number less than or equal to its numeric argument.
            </summary>
            <param name="x">A numeric expression.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.log(System.Double)">
            <summary>
            Returns the natural logarithm (base e) of a number.
            </summary>
            <param name="x">A numeric expression.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.max(System.Double[])">
            <summary>
            Returns the larger of a set of supplied numeric expressions.
            </summary>
            <param name="values">Numeric expressions to be evaluated.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.min(System.Double[])">
            <summary>
            Returns the smaller of a set of supplied numeric expressions.
            </summary>
            <param name="values">Numeric expressions to be evaluated.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.pow(System.Double,System.Double)">
            <summary>
            Returns the value of a base expression taken to a specified power.
            </summary>
            <param name="x">The base value of the expression.</param>
            <param name="y">The exponent value of the expression.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.random">
            <summary>
            Returns a pseudorandom number between 0 and 1.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Math.round(System.Double)">
            <summary>
            Returns a supplied numeric expression rounded to the nearest number.
            </summary>
            <param name="x">The value to be rounded to the nearest number.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.sin(System.Double)">
            <summary>
            Returns the sine of a number.
            </summary>
            <param name="x">A numeric expression that contains an angle measured in radians.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.sqrt(System.Double)">
            <summary>
            Returns the square root of a number.
            </summary>
            <param name="x">A numeric expression.</param>
        </member>
        <member name="M:DuoCode.Dom.Math.tan(System.Double)">
            <summary>
            Returns the tangent of a number.
            </summary>
            <param name="x">A numeric expression that contains an angle measured in radians.</param>
        </member>
        <member name="M:DuoCode.Dom.Date.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <param name="date">This parameter is optional and can be omitted.</param>
            <param name="hours">This parameter is optional and can be omitted.</param>
            <param name="minutes">This parameter is optional and can be omitted.</param>
            <param name="seconds">This parameter is optional and can be omitted.</param>
            <param name="ms">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Date.toString">
            <summary>
            Returns a string representation of a date. The format of the string depends on the locale.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.toDateString">
            <summary>
            Returns a date as a string value.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.toTimeString">
            <summary>
            Returns a time as a string value.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.toLocaleString">
            <summary>
            Returns a value as a string value appropriate to the host environment's current locale.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.toLocaleDateString">
            <summary>
            Returns a date as a string value appropriate to the host environment's current locale.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.toLocaleTimeString">
            <summary>
            Returns a time as a string value appropriate to the host environment's current locale.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.valueOf">
            <summary>
            Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getTime">
            <summary>
            Gets the time value in milliseconds.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getFullYear">
            <summary>
            Gets the year, using local time.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getUTCFullYear">
            <summary>
            Gets the year using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getMonth">
            <summary>
            Gets the month, using local time.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getUTCMonth">
            <summary>
            Gets the month of a Date object using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getDate">
            <summary>
            Gets the day-of-the-month, using local time.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getUTCDate">
            <summary>
            Gets the day-of-the-month, using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getDay">
            <summary>
            Gets the day of the week, using local time.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getUTCDay">
            <summary>
            Gets the day of the week using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getHours">
            <summary>
            Gets the hours in a date, using local time.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getUTCHours">
            <summary>
            Gets the hours value in a Date object using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getMinutes">
            <summary>
            Gets the minutes of a Date object, using local time.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getUTCMinutes">
            <summary>
            Gets the minutes of a Date object using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getSeconds">
            <summary>
            Gets the seconds of a Date object, using local time.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getUTCSeconds">
            <summary>
            Gets the seconds of a Date object using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getMilliseconds">
            <summary>
            Gets the milliseconds of a Date, using local time.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getUTCMilliseconds">
            <summary>
            Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.getTimezoneOffset">
            <summary>
            Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.setTime(System.Double)">
            <summary>
            Sets the date and time value in the Date object.
            </summary>
            <param name="time">A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.</param>
        </member>
        <member name="M:DuoCode.Dom.Date.setMilliseconds(System.Double)">
            <summary>
            Sets the milliseconds value in the Date object using local time.
            </summary>
            <param name="ms">A numeric value equal to the millisecond value.</param>
        </member>
        <member name="M:DuoCode.Dom.Date.setUTCMilliseconds(System.Double)">
            <summary>
            Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).
            </summary>
            <param name="ms">A numeric value equal to the millisecond value.</param>
        </member>
        <member name="M:DuoCode.Dom.Date.setSeconds(System.Double,System.Double)">
            <summary>
            Sets the seconds value in the Date object using local time.
            </summary>
            <param name="sec">A numeric value equal to the seconds value.</param>
            <param name="ms">
            A numeric value equal to the milliseconds value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setUTCSeconds(System.Double,System.Double)">
            <summary>
            Sets the seconds value in the Date object using Universal Coordinated Time (UTC).
            </summary>
            <param name="sec">A numeric value equal to the seconds value.</param>
            <param name="ms">
            A numeric value equal to the milliseconds value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setMinutes(System.Double,System.Double,System.Double)">
            <summary>
            Sets the minutes value in the Date object using local time.
            </summary>
            <param name="min">A numeric value equal to the minutes value.</param>
            <param name="sec">
            A numeric value equal to the seconds value.
            This parameter is optional and can be omitted.
            </param>
            <param name="ms">
            A numeric value equal to the milliseconds value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setUTCMinutes(System.Double,System.Double,System.Double)">
            <summary>
            Sets the minutes value in the Date object using Universal Coordinated Time (UTC).
            </summary>
            <param name="min">A numeric value equal to the minutes value.</param>
            <param name="sec">
            A numeric value equal to the seconds value.
            This parameter is optional and can be omitted.
            </param>
            <param name="ms">
            A numeric value equal to the milliseconds value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setHours(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the hour value in the Date object using local time.
            </summary>
            <param name="hours">A numeric value equal to the hours value.</param>
            <param name="min">
            A numeric value equal to the minutes value.
            This parameter is optional and can be omitted.
            </param>
            <param name="sec">
            A numeric value equal to the seconds value.
            This parameter is optional and can be omitted.
            </param>
            <param name="ms">
            A numeric value equal to the milliseconds value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setUTCHours(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the hours value in the Date object using Universal Coordinated Time (UTC).
            </summary>
            <param name="hours">A numeric value equal to the hours value.</param>
            <param name="min">
            A numeric value equal to the minutes value.
            This parameter is optional and can be omitted.
            </param>
            <param name="sec">
            A numeric value equal to the seconds value.
            This parameter is optional and can be omitted.
            </param>
            <param name="ms">
            A numeric value equal to the milliseconds value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setDate(System.Double)">
            <summary>
            Sets the numeric day-of-the-month value of the Date object using local time.
            </summary>
            <param name="date">A numeric value equal to the day of the month.</param>
        </member>
        <member name="M:DuoCode.Dom.Date.setUTCDate(System.Double)">
            <summary>
            Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).
            </summary>
            <param name="date">A numeric value equal to the day of the month.</param>
        </member>
        <member name="M:DuoCode.Dom.Date.setMonth(System.Double,System.Double)">
            <summary>
            Sets the month value in the Date object using local time.
            </summary>
            <param name="month">A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.</param>
            <param name="date">
            A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setUTCMonth(System.Double,System.Double)">
            <summary>
            Sets the month value in the Date object using Universal Coordinated Time (UTC).
            </summary>
            <param name="month">A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.</param>
            <param name="date">
            A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setFullYear(System.Double,System.Double,System.Double)">
            <summary>
            Sets the year of the Date object using local time.
            </summary>
            <param name="year">A numeric value for the year.</param>
            <param name="month">
            A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.
            This parameter is optional and can be omitted.
            </param>
            <param name="date">
            A numeric value equal for the day of the month.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.setUTCFullYear(System.Double,System.Double,System.Double)">
            <summary>
            Sets the year value in the Date object using Universal Coordinated Time (UTC).
            </summary>
            <param name="year">A numeric value equal to the year.</param>
            <param name="month">
            A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.
            This parameter is optional and can be omitted.
            </param>
            <param name="date">
            A numeric value equal to the day of the month.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Date.toUTCString">
            <summary>
            Returns a date converted to a string using Universal Coordinated Time (UTC).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.toISOString">
            <summary>
            Returns a date as a string value in ISO format.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Date.toJSON(System.Object)">
            <summary>
            Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization.
            </summary>
            <param name="key">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Date.toLocaleString(System.String[],System.Object)">
            <param name="locales">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.join_(System.String)">
            <param name="separator">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.slice(System.Int32,System.Int32)">
            <param name="start">This parameter is optional and can be omitted.</param>
            <param name="end">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.sort(System.Func{System.String,System.String,System.Double})">
            <param name="compareFn">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.indexOf(System.String,System.Int32)">
            <param name="fromIndex">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.lastIndexOf(System.String,System.Int32)">
            <param name="fromIndex">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.every(System.Func{System.String,System.Int32,System.String[],System.Boolean},System.Object)">
            <param name="thisArg">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.some(System.Func{System.String,System.Int32,System.String[],System.Boolean},System.Object)">
            <param name="thisArg">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.forEach(System.Action{System.String,System.Int32,System.String[]},System.Object)">
            <param name="thisArg">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.map(System.Func{System.String,System.Int32,System.String[],System.Object},System.Object)">
            <param name="thisArg">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.filter(System.Func{System.String,System.Int32,System.String[],System.Boolean},System.Object)">
            <param name="thisArg">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.reduce(System.Func{System.Object,System.Object,System.Double,System.String[],System.Object},System.Object)">
            <param name="initialValue">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExpExecArray.reduceRight(System.Func{System.Object,System.Object,System.Double,System.String[],System.Object},System.Object)">
            <param name="initialValue">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExp.#ctor(System.String,System.String)">
            <param name="flags">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExp.exec(System.String)">
            <summary>
            Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.
            </summary>
            <param name="string_">The String object or string literal on which to perform the search.</param>
        </member>
        <member name="M:DuoCode.Dom.RegExp.test(System.String)">
            <summary>
            Returns a Boolean value that indicates whether or not a pattern exists in a searched string.
            </summary>
            <param name="string_">String on which to perform the search.</param>
        </member>
        <member name="P:DuoCode.Dom.RegExp.source">
            <summary>
            Returns a copy of the text of the regular expression pattern. Read-only. The rgExp argument is a Regular expression object. It can be a variable name or a literal.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.RegExp.global_">
            <summary>
            Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.RegExp.ignoreCase">
            <summary>
            Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.RegExp.multiline">
            <summary>
            Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Error.#ctor(System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.EvalError.#ctor(System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.RangeError.#ctor(System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.ReferenceError.#ctor(System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SyntaxError.#ctor(System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TypeError.#ctor(System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.URIError.#ctor(System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.JSON.parse(System.String,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Converts a JavaScript Object Notation (JSON) string into an object.
            </summary>
            <param name="text">A valid JSON string.</param>
            <param name="reviver">
            A function that transforms the results. This function is called for each member of the object.
            If a member contains nested objects, the nested objects are transformed before the parent object is.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.JSON.stringify(System.Object)">
            <summary>
            Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
            </summary>
            <param name="value">A JavaScript value, usually an object or array, to be converted.</param>
        </member>
        <member name="M:DuoCode.Dom.JSON.stringify(System.Object,System.Func{System.String,System.Object,System.Object})">
            <summary>
            Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
            </summary>
            <param name="value">A JavaScript value, usually an object or array, to be converted.</param>
            <param name="replacer">A function that transforms the results.</param>
        </member>
        <member name="M:DuoCode.Dom.JSON.stringify(System.Object,System.Func{System.String,System.Object,System.Object},System.Object)">
            <summary>
            Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
            </summary>
            <param name="value">A JavaScript value, usually an object or array, to be converted.</param>
            <param name="replacer">A function that transforms the results.</param>
            <param name="space">Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.</param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.toString">
            <summary>
            Returns a string representation of an array.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Array`1.concat(`0[])">
            <summary>
            Combines two or more arrays.
            </summary>
            <param name="items">Additional items to add to the end of array1.</param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.join_(System.String)">
            <summary>
            Adds all the elements of an array separated by the specified separator string.
            </summary>
            <param name="separator">
            A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.pop">
            <summary>
            Removes the last element from an array and returns it.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Array`1.push(`0[])">
            <summary>
            Appends new elements to an array, and returns the new length of the array.
            </summary>
            <param name="items">New elements of the Array.</param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.reverse">
            <summary>
            Reverses the elements in an Array.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Array`1.shift">
            <summary>
            Removes the first element from an array and returns it.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Array`1.slice(System.Int32,System.Int32)">
            <summary>
            Returns a section of an array.
            </summary>
            <param name="start">
            The beginning of the specified portion of the array.
            This parameter is optional and can be omitted.
            </param>
            <param name="end">
            The end of the specified portion of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.sort(System.Func{`0,`0,System.Double})">
            <summary>
            Sorts an array.
            </summary>
            <param name="compareFn">
            The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.splice(System.Int32)">
            <summary>
            Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
            </summary>
            <param name="start">The zero-based location in the array from which to start removing elements.</param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.splice(System.Int32,System.Int32,`0[])">
            <summary>
            Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
            </summary>
            <param name="start">The zero-based location in the array from which to start removing elements.</param>
            <param name="deleteCount">The number of elements to remove.</param>
            <param name="items">Elements to insert into the array in place of the deleted elements.</param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.unshift(`0[])">
            <summary>
            Inserts new elements at the start of an array.
            </summary>
            <param name="items"> Elements to insert at the start of the Array.</param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.indexOf(`0,System.Int32)">
            <summary>
            Returns the index of the first occurrence of a value in an array.
            </summary>
            <param name="searchElement">The value to locate in the array.</param>
            <param name="fromIndex">
            The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.lastIndexOf(`0,System.Int32)">
            <summary>
            Returns the index of the last occurrence of a specified value in an array.
            </summary>
            <param name="searchElement">The value to locate in the array.</param>
            <param name="fromIndex">
            The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.every(System.Func{`0,System.Int32,`0[],System.Boolean},System.Object)">
            <summary>
            Determines whether all the members of an array satisfy the specified test.
            </summary>
            <param name="callbackfn">A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.</param>
            <param name="thisArg">
            An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.some(System.Func{`0,System.Int32,`0[],System.Boolean},System.Object)">
            <summary>
            Determines whether the specified callback function returns true for any element of an array.
            </summary>
            <param name="callbackfn">A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.</param>
            <param name="thisArg">
            An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.forEach(System.Action{`0,System.Int32,`0[]},System.Object)">
            <summary>
            Performs the specified action for each element in an array.
            </summary>
            <param name="callbackfn"> A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.</param>
            <param name="thisArg">
             An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.map``1(System.Func{`0,System.Int32,`0[],``0},System.Object)">
            <summary>
            Calls a defined callback function on each element of an array, and returns an array that contains the results.
            </summary>
            <param name="callbackfn">A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.</param>
            <param name="thisArg">
            An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.filter(System.Func{`0,System.Int32,`0[],System.Boolean},System.Object)">
            <summary>
            Returns the elements of an array that meet the condition specified in a callback function.
            </summary>
            <param name="callbackfn">A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.</param>
            <param name="thisArg">
            An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.reduce(System.Func{`0,`0,System.Double,`0[],`0},`0)">
            <summary>
            Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
            </summary>
            <param name="callbackfn">A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.</param>
            <param name="initialValue">
            If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.reduce``1(System.Func{``0,`0,System.Double,`0[],``0},``0)">
            <summary>
            Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
            </summary>
            <param name="callbackfn">A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.</param>
            <param name="initialValue">If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.</param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.reduceRight(System.Func{`0,`0,System.Double,`0[],`0},`0)">
            <summary>
            Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
            </summary>
            <param name="callbackfn">A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.</param>
            <param name="initialValue">
            If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Array`1.reduceRight``1(System.Func{``0,`0,System.Double,`0[],``0},``0)">
            <summary>
            Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
            </summary>
            <param name="callbackfn">A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.</param>
            <param name="initialValue">If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.</param>
        </member>
        <member name="P:DuoCode.Dom.Array`1.length">
            <summary>
            Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.ArrayBuffer.byteLength">
            <summary>
            Read-only. The length of the ArrayBuffer (in bytes).
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Int8Array.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Int8Array.BYTES_PER_ELEMENT">
            <summary>
            The size in bytes of each element in the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Int8Array.length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Int8Array.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Int8Array.set(DuoCode.Dom.Int8Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Int8Array.set(System.Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Int8Array.subarray(System.Int32,System.Int32)">
            <summary>
            Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements at begin, inclusive, up to end, exclusive.
            </summary>
            <param name="begin">The index of the beginning of the array.</param>
            <param name="end">
            The index of the end of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint8Array.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Uint8Array.BYTES_PER_ELEMENT">
            <summary>
            The size in bytes of each element in the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Uint8Array.length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Uint8Array.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Uint8Array.set(DuoCode.Dom.Uint8Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint8Array.set(System.Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint8Array.subarray(System.Int32,System.Int32)">
            <summary>
            Gets a new Uint8Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray.
            </summary>
            <param name="begin">The index of the beginning of the array.</param>
            <param name="end">
            The index of the end of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Int16Array.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Int16Array.BYTES_PER_ELEMENT">
            <summary>
            The size in bytes of each element in the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Int16Array.length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Int16Array.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Int16Array.set(DuoCode.Dom.Int16Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Int16Array.set(System.Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Int16Array.subarray(System.Int32,System.Int32)">
            <summary>
            Gets a new Int16Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray.
            </summary>
            <param name="begin">The index of the beginning of the array.</param>
            <param name="end">
            The index of the end of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint16Array.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Uint16Array.BYTES_PER_ELEMENT">
            <summary>
            The size in bytes of each element in the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Uint16Array.length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Uint16Array.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Uint16Array.set(DuoCode.Dom.Uint16Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint16Array.set(System.Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint16Array.subarray(System.Int32,System.Int32)">
            <summary>
            Gets a new Uint16Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray.
            </summary>
            <param name="begin">The index of the beginning of the array.</param>
            <param name="end">
            The index of the end of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Int32Array.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Int32Array.BYTES_PER_ELEMENT">
            <summary>
            The size in bytes of each element in the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Int32Array.length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Int32Array.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Int32Array.set(DuoCode.Dom.Int32Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Int32Array.set(System.Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Int32Array.subarray(System.Int32,System.Int32)">
            <summary>
            Gets a new Int32Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray.
            </summary>
            <param name="begin">The index of the beginning of the array.</param>
            <param name="end">
            The index of the end of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint32Array.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Uint32Array.BYTES_PER_ELEMENT">
            <summary>
            The size in bytes of each element in the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Uint32Array.length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Uint32Array.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Uint32Array.set(DuoCode.Dom.Uint32Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint32Array.set(System.Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Uint32Array.subarray(System.Int32,System.Int32)">
            <summary>
            Gets a new Int8Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray.
            </summary>
            <param name="begin">The index of the beginning of the array.</param>
            <param name="end">
            The index of the end of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Float32Array.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Float32Array.BYTES_PER_ELEMENT">
            <summary>
            The size in bytes of each element in the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Float32Array.length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Float32Array.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Float32Array.set(DuoCode.Dom.Float32Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Float32Array.set(System.Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Float32Array.subarray(System.Int32,System.Int32)">
            <summary>
            Gets a new Float32Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray.
            </summary>
            <param name="begin">The index of the beginning of the array.</param>
            <param name="end">
            The index of the end of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Float64Array.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Float64Array.BYTES_PER_ELEMENT">
            <summary>
            The size in bytes of each element in the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Float64Array.length">
            <summary>
            The length of the array.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Float64Array.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Float64Array.set(DuoCode.Dom.Float64Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Float64Array.set(System.Array,System.Int32)">
            <summary>
            Sets a value or an array of values.
            </summary>
            <param name="array">typed or untyped array of values to set.</param>
            <param name="offset">
            The index in the current array at which the values are to be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Float64Array.subarray(System.Int32,System.Int32)">
            <summary>
            Gets a new Float64Array view of the ArrayBuffer Object store for this array, specifying the first and last members of the subarray.
            </summary>
            <param name="begin">The index of the beginning of the array.</param>
            <param name="end">
            The index of the end of the array.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.DataView.#ctor(DuoCode.Dom.ArrayBuffer,System.Int32,System.Int32)">
            <param name="byteOffset">This parameter is optional and can be omitted.</param>
            <param name="length">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.getInt8(System.Int32)">
            <summary>
            Gets the Int8 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be retrieved.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.getUint8(System.Int32)">
            <summary>
            Gets the Uint8 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be retrieved.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.getInt16(System.Int32,System.Boolean)">
            <summary>
            Gets the Int16 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be retrieved.</param>
            <param name="littleEndian">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.getUint16(System.Int32,System.Boolean)">
            <summary>
            Gets the Uint16 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be retrieved.</param>
            <param name="littleEndian">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.getInt32(System.Int32,System.Boolean)">
            <summary>
            Gets the Int32 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be retrieved.</param>
            <param name="littleEndian">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.getUint32(System.Int32,System.Boolean)">
            <summary>
            Gets the Uint32 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be retrieved.</param>
            <param name="littleEndian">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.getFloat32(System.Int32,System.Boolean)">
            <summary>
            Gets the Float32 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be retrieved.</param>
            <param name="littleEndian">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.getFloat64(System.Int32,System.Boolean)">
            <summary>
            Gets the Float64 value at the specified byte offset from the start of the view. There is no alignment constraint; multi-byte values may be fetched from any offset.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be retrieved.</param>
            <param name="littleEndian">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.setInt8(System.Int32,System.SByte)">
            <summary>
            Stores an Int8 value at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.setUint8(System.Int32,System.Byte)">
            <summary>
            Stores an Uint8 value at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:DuoCode.Dom.DataView.setInt16(System.Int32,System.Int16,System.Boolean)">
            <summary>
            Stores an Int16 value at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be set.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">
            If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.DataView.setUint16(System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Stores an Uint16 value at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be set.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">
            If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.DataView.setInt32(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Stores an Int32 value at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be set.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">
            If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.DataView.setUint32(System.Int32,System.UInt32,System.Boolean)">
            <summary>
            Stores an Uint32 value at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be set.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">
            If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.DataView.setFloat32(System.Int32,System.Single,System.Boolean)">
            <summary>
            Stores an Float32 value at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be set.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">
            If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.DataView.setFloat64(System.Int32,System.Double,System.Boolean)">
            <summary>
            Stores an Float64 value at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The place in the buffer at which the value should be set.</param>
            <param name="value">The value to set.</param>
            <param name="littleEndian">
            If false or undefined, a big-endian value should be written, otherwise a little-endian value should be written.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Map`2.forEach(System.Action{`1,`0,System.Object},System.Object)">
            <param name="thisArg">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Set`1.forEach(System.Action{`0,`0,System.Object},System.Object)">
            <param name="thisArg">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Intl.CollatorOptions.usage">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.CollatorOptions.localeMatcher">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.CollatorOptions.numeric">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.CollatorOptions.caseFirst">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.CollatorOptions.sensitivity">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.CollatorOptions.ignorePunctuation">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Intl.Collator.#ctor(System.String[],DuoCode.Dom.Intl.CollatorOptions)">
            <param name="locales">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.Intl.NumberFormatOptions.localeMatcher">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.NumberFormatOptions.style">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.NumberFormatOptions.currency">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.NumberFormatOptions.currencyDisplay">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.NumberFormatOptions.useGrouping">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedNumberFormatOptions.currency">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedNumberFormatOptions.currencyDisplay">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedNumberFormatOptions.minimumSignificantDigits">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedNumberFormatOptions.maximumSignificantDigits">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.localeMatcher">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.weekday">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.era">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.year">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.month">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.day">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.hour">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.minute">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.second">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.timeZoneName">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.DateTimeFormatOptions.formatMatcher">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.hour12">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.weekday">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.era">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.year">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.month">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.day">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.hour">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.minute">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.second">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Intl.ResolvedDateTimeFormatOptions.timeZoneName">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.PositionOptions.enableHighAccuracy">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.PositionOptions.timeout">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.PositionOptions.maximumAge">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.borderColorLight">
            <summary>
            Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.cellSpacing">
            <summary>
            Sets or retrieves the amount of space between cells in a table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.tFoot">
            <summary>
            Retrieves the tFoot object of the table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.frame">
            <summary>
            Sets or retrieves the way the border frame around the table is displayed.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.borderColor">
            <summary>
            Sets or retrieves the border color of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.rows">
            <summary>
            Sets or retrieves the number of horizontal rows contained in the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.rules">
            <summary>
            Sets or retrieves which dividing lines (inner borders) are displayed.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.cols">
            <summary>
            Sets or retrieves the number of columns in the table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.summary">
            <summary>
            Sets or retrieves a description and/or structure of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.caption">
            <summary>
            Retrieves the caption object of a table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.tBodies">
            <summary>
            Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.tHead">
            <summary>
            Retrieves the tHead object of the table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.align">
            <summary>
            Sets or retrieves a value that indicates the table alignment.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.cells">
            <summary>
            Retrieves a collection of all cells in the table row or in the entire table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.cellPadding">
            <summary>
            Sets or retrieves the amount of space between the border of the cell and the content of the cell.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.border">
            <summary>
            Sets or retrieves the width of the border to draw around the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableElement.borderColorDark">
            <summary>
            Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.deleteRow(System.Int32)">
            <summary>
            Removes the specified row (tr) from the element and from the rows collection.
            </summary>
            <param name="index">
            Number that specifies the zero-based position in the rows collection of the row to remove.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.createTBody">
            <summary>
            Creates an empty tBody element in the table.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.deleteCaption">
            <summary>
            Deletes the caption element and its contents from the table.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.insertRow(System.Int32)">
            <summary>
            Creates a new row (tr) in the table, and adds the row to the rows collection.
            </summary>
            <param name="index">
            Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.deleteTFoot">
            <summary>
            Deletes the tFoot element and its contents from the table.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.createTHead">
            <summary>
            Returns the tHead element object if successful, or null otherwise.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.deleteTHead">
            <summary>
            Deletes the tHead element and its contents from the table.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.createCaption">
            <summary>
            Creates an empty caption element in the table.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.moveRow(System.Double,System.Double)">
            <summary>
            Moves a table row to a new position.
            </summary>
            <param name="indexFrom">
            Number that specifies the index in the rows collection of the table row that is moved.
            This parameter is optional and can be omitted.
            </param>
            <param name="indexTo">
            Number that specifies where the row is moved within the rows collection.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableElement.createTFoot">
            <summary>
            Creates an empty tFoot element in the table.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Performance.getMeasures(System.String)">
            <param name="measureName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Performance.clearMarks(System.String)">
            <param name="markName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Performance.getMarks(System.String)">
            <param name="markName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Performance.measure(System.String,System.String,System.String)">
            <param name="startMarkName">This parameter is optional and can be omitted.</param>
            <param name="endMarkName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Performance.getEntriesByName(System.String,System.String)">
            <param name="entryType">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Performance.clearMeasures(System.String)">
            <param name="measureName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.WindowTimers.setTimeout(System.Object,System.Object,System.Object[])">
            <param name="timeout">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.WindowTimers.setInterval(System.Object,System.Object,System.Object[])">
            <param name="timeout">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CSSStyleDeclaration.setProperty(System.String,System.String,System.String)">
            <param name="priority">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Navigator.msLaunchUri(System.String,DuoCode.Dom.MSLaunchUriCallback,DuoCode.Dom.MSLaunchUriCallback)">
            <param name="successCallback">This parameter is optional and can be omitted.</param>
            <param name="noHandlerCallback">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLBaseElement.target">
            <summary>
            Sets or retrieves the window or frame at which to target content.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLBaseElement.href">
            <summary>
            Gets or sets the baseline URL on which relative links are based.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.DOMImplementation.hasFeature(System.String,System.String)">
            <param name="version">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Element.getAttribute(System.String)">
            <param name="name">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Element.removeAttribute(System.String)">
            <param name="name">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Element.fireEvent(System.String,System.Object)">
            <param name="eventObj">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Element.setAttribute(System.String,System.String)">
            <param name="name">This parameter is optional and can be omitted.</param>
            <param name="value">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Element.addEventListener(System.String,System.Func{DuoCode.Dom.PointerEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLParagraphElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLAreasCollection.remove_(System.Int32)">
            <summary>
            Removes an element from the collection.
            </summary>
            <param name="index">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLAreasCollection.add_(DuoCode.Dom.HTMLElement,System.Object)">
            <summary>
            Adds an element to the areas, controlRange, or options collection.
            </summary>
            <param name="before">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Node.cloneNode(System.Boolean)">
            <param name="deep">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Node.insertBefore(DuoCode.Dom.Node,DuoCode.Dom.Node)">
            <param name="refChild">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.codeType">
            <summary>
            Sets or retrieves the Internet media type for the code associated with the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.archive">
            <summary>
            Sets or retrieves a character string that can be used to implement your own archive functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.alt">
            <summary>
            Sets or retrieves a text alternative to the graphic.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.standby">
            <summary>
            Sets or retrieves a message to be displayed while an object is loading.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.classid">
            <summary>
            Sets or retrieves the class identifier for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.name">
            <summary>
            Sets or retrieves the shape of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.useMap">
            <summary>
            Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.data">
            <summary>
            Sets or retrieves the URL that references the data of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.altHtml">
            <summary>
            Gets or sets the optional alternative HTML script to execute if the object fails to load.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.contentDocument">
            <summary>
            Address of a pointer to the document this page or frame contains. If there is no document, then null will be returned.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.codeBase">
            <summary>
            Sets or retrieves the URL of the component.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.declare">
            <summary>
            Sets or retrieves a character string that can be used to implement your own declare functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.type">
            <summary>
            Returns the content type of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAppletElement.BaseHref">
            <summary>
            Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLAppletElement.namedRecordset(System.String,System.Object)">
            <param name="hierarchy">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLOListElement.start">
            <summary>
            The starting number.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.value">
            <summary>
            Sets or retrieves the value which is returned to the server when the form control is submitted.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.size">
            <summary>
            Sets or retrieves the number of rows in the list box.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.length">
            <summary>
            Sets or retrieves the number of objects in a collection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.selectedIndex">
            <summary>
            Sets or retrieves the index of the selected option in a select object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.multiple">
            <summary>
            Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.type">
            <summary>
            Retrieves the type of select control based on the value of the MULTIPLE attribute.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLSelectElement.remove_(System.Int32)">
            <summary>
            Removes an element from the collection.
            </summary>
            <param name="index">
            Number that specifies the zero-based index of the element to remove from the collection.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLSelectElement.add_(DuoCode.Dom.HTMLElement,System.Object)">
            <summary>
            Adds an element to the areas, controlRange, or options collection.
            </summary>
            <param name="element">Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.</param>
            <param name="before">
            Variant of type Object that specifies an element to insert before, or null to append the object to the collection.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLSelectElement.item(System.Object,System.Object)">
            <summary>
            Retrieves a select object or an object from an options collection.
            </summary>
            <param name="name">
            Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.
            This parameter is optional and can be omitted.
            </param>
            <param name="index">
            Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLSelectElement.namedItem(System.String)">
            <summary>
            Retrieves a select object or an object from an options collection.
            </summary>
            <param name="namedItem">A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.validationMessage">
            <summary>
            Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.autofocus">
            <summary>
            Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.validity">
            <summary>
            Returns a  ValidityState object that represents the validity states of an element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.required">
            <summary>
            When present, marks an element that can't be submitted without a value.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSelectElement.willValidate">
            <summary>
            Returns whether an element will successfully validate based on forms validation rules and constraints.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLSelectElement.checkValidity">
            <summary>
            Returns whether a form will validate when it is submitted, without having to submit it.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLSelectElement.setCustomValidity(System.String)">
            <summary>
            Sets a custom error message that is displayed when a form is submitted.
            </summary>
            <param name="error">Sets a custom error message that is displayed when a form is submitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextRange.move(System.String,System.Double)">
            <param name="count">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextRange.scrollIntoView(System.Boolean)">
            <param name="fStart">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextRange.findText(System.String,System.Double,System.Double)">
            <param name="count">This parameter is optional and can be omitted.</param>
            <param name="flags">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextRange.execCommand(System.String,System.Boolean,System.Object)">
            <param name="showUI">This parameter is optional and can be omitted.</param>
            <param name="value">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextRange.collapse(System.Boolean)">
            <param name="start">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextRange.moveEnd(System.String,System.Double)">
            <param name="count">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextRange.moveStart(System.String,System.Double)">
            <param name="count">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLBlockElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLBlockElement.cite">
            <summary>
            Sets or retrieves reference information about the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.CSSStyleSheet.addImport(System.String,System.Double)">
            <param name="lIndex">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CSSStyleSheet.addPageRule(System.String,System.String,System.Double)">
            <param name="lIndex">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CSSStyleSheet.insertRule(System.String,System.UInt32)">
            <param name="index">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CSSStyleSheet.deleteRule(System.UInt32)">
            <param name="index">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CSSStyleSheet.addRule(System.String,System.String,System.Double)">
            <param name="bstrStyle">This parameter is optional and can be omitted.</param>
            <param name="lIndex">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLMetaElement.httpEquiv">
            <summary>
            Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMetaElement.name">
            <summary>
            Sets or retrieves the value specified in the content attribute of the meta object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMetaElement.content">
            <summary>
            Gets or sets meta-information to associate with httpEquiv or name.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMetaElement.url">
            <summary>
            Sets or retrieves the URL property that will be loaded after the specified time has elapsed.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMetaElement.scheme">
            <summary>
            Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMetaElement.charset">
            <summary>
            Sets or retrieves the character set used to encode the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLDDElement.noWrap">
            <summary>
            Sets or retrieves whether the browser automatically performs wordwrap.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.MSDataBindingRecordSetReadonlyExtensions.namedRecordset(System.String,System.Object)">
            <param name="hierarchy">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.rel">
            <summary>
            Sets or retrieves the relationship between the object and the destination of the link.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.target">
            <summary>
            Sets or retrieves the window or frame at which to target content.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.href">
            <summary>
            Sets or retrieves a destination URL or an anchor point.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.media">
            <summary>
            Sets or retrieves the media type.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.rev">
            <summary>
            Sets or retrieves the relationship between the object and the destination of the link.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.type">
            <summary>
            Sets or retrieves the MIME type of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.charset">
            <summary>
            Sets or retrieves the character set used to encode the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.hreflang">
            <summary>
            Sets or retrieves the language code of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLinkElement.import">
            <summary>
            Gets the imported document for the import, represented by the link element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFontElement.face">
            <summary>
            Sets or retrieves the current typeface family.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.ControlRangeCollection.scrollIntoView(System.Object)">
            <param name="varargStart">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.ControlRangeCollection.execCommand(System.String,System.Boolean,System.Object)">
            <param name="showUI">This parameter is optional and can be omitted.</param>
            <param name="value">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSNamespaceInfo.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCaptionElement.align">
            <summary>
            Sets or retrieves the alignment of the caption or legend.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCaptionElement.vAlign">
            <summary>
            Sets or retrieves whether the caption appears at the top or bottom of the table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptionElement.index">
            <summary>
            Sets or retrieves the ordinal position of an option in a list box.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptionElement.defaultSelected">
            <summary>
            Sets or retrieves the status of an option.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptionElement.value">
            <summary>
            Sets or retrieves the value which is returned to the server when the form control is submitted.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptionElement.text">
            <summary>
            Sets or retrieves the text string specified by the option tag.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptionElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptionElement.label">
            <summary>
            Sets or retrieves a value that you can use to implement your own label functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptionElement.selected">
            <summary>
            Sets or retrieves whether the option in the list box is the default item.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMapElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMapElement.areas">
            <summary>
            Retrieves a collection of the area objects defined for the given map object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Window.alert(System.Object)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.scroll(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.scrollTo(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.prompt(System.String,System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
            <param name="defaul">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.open(System.String,System.String,System.String,System.Boolean)">
            <param name="url">This parameter is optional and can be omitted.</param>
            <param name="target">This parameter is optional and can be omitted.</param>
            <param name="features">This parameter is optional and can be omitted.</param>
            <param name="replace">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.scrollBy(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.confirm(System.String)">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.postMessage(System.Object,System.String,System.Object)">
            <param name="ports">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.showModalDialog(System.String,System.Object,System.Object)">
            <param name="url">This parameter is optional and can be omitted.</param>
            <param name="argument">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.getComputedStyle(DuoCode.Dom.Element,System.String)">
            <param name="pseudoElt">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.addEventListener(System.String,System.Func{DuoCode.Dom.MouseEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.showModelessDialog(System.String,System.Object,System.Object)">
            <param name="url">This parameter is optional and can be omitted.</param>
            <param name="argument">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.resizeBy(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.resizeTo(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.createPopup(System.Object)">
            <param name="arguments">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.execScript(System.String,System.String)">
            <param name="language">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.moveTo(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.moveBy(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.showHelp(System.String,System.Object,System.String)">
            <param name="helpArg">This parameter is optional and can be omitted.</param>
            <param name="features">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.setTimeout(System.Object,System.Object,System.Object[])">
            <param name="timeout">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Window.setInterval(System.Object,System.Object,System.Object[])">
            <param name="timeout">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSCSSProperties.getAttribute(System.String,System.Double)">
            <param name="flags">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSCSSProperties.setAttribute(System.String,System.Object,System.Double)">
            <param name="flags">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSCSSProperties.removeAttribute(System.String,System.Double)">
            <param name="flags">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLCollection.length">
            <summary>
            Sets or retrieves the number of objects in a collection.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLCollection.item(System.Object,System.Object)">
            <summary>
            Retrieves an object from various collections.
            </summary>
            <param name="nameOrIndex">This parameter is optional and can be omitted.</param>
            <param name="optionalIndex">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLCollection.namedItem(System.String)">
            <summary>
            Retrieves a select object or an object from an options collection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.vspace">
            <summary>
            Sets or retrieves the vertical margin for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.naturalHeight">
            <summary>
            The original height of the image resource before sizing.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.alt">
            <summary>
            Sets or retrieves a text alternative to the graphic.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.src">
            <summary>
            The address or URL of the a media resource that is to be considered.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.useMap">
            <summary>
            Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.naturalWidth">
            <summary>
            The original width of the image resource before sizing.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.border">
            <summary>
            Specifies the properties of a border drawn around an object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.hspace">
            <summary>
            Sets or retrieves the width of the border to draw around the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.longDesc">
            <summary>
            Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.href">
            <summary>
            Contains the hypertext reference (HREF) of the URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.isMap">
            <summary>
            Sets or retrieves whether the image is a server-side image map.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.complete">
            <summary>
            Retrieves whether the object is fully loaded.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.msPlayToPrimary">
            <summary>
            Gets or sets the primary DLNA PlayTo device.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.msPlayToDisabled">
            <summary>
            Gets or sets whether the DLNA PlayTo device is available.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLImageElement.msPlayToSource">
            <summary>
            Gets the source associated with the media element for use by the PlayToManager.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.protocol">
            <summary>
            Sets or retrieves the protocol portion of a URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.search">
            <summary>
            Sets or retrieves the substring of the href property that follows the question mark.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.alt">
            <summary>
            Sets or retrieves a text alternative to the graphic.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.coords">
            <summary>
            Sets or retrieves the coordinates of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.hostname">
            <summary>
            Sets or retrieves the host name part of the location or URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.port">
            <summary>
            Sets or retrieves the port number associated with a URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.pathname">
            <summary>
            Sets or retrieves the file name or path specified by the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.host">
            <summary>
            Sets or retrieves the hostname and port number of the location or URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.hash">
            <summary>
            Sets or retrieves the subsection of the href property that follows the number sign (#).
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.target">
            <summary>
            Sets or retrieves the window or frame at which to target content.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.href">
            <summary>
            Sets or retrieves a destination URL or an anchor point.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.noHref">
            <summary>
            Sets or gets whether clicks in this region cause action.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAreaElement.shape">
            <summary>
            Sets or retrieves the shape of the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLAreaElement.toString">
            <summary>
            Returns a string representation of an object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.EventTarget.addEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.EventTarget.removeEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.value">
            <summary>
            Sets or retrieves the default or selected value of the control.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.type">
            <summary>
            Gets the classification and default behavior of the button.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLButtonElement.createTextRange">
            <summary>
            Creates a TextRange object for the element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.validationMessage">
            <summary>
            Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.formTarget">
            <summary>
            Overrides the target attribute on a form element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.willValidate">
            <summary>
            Returns whether an element will successfully validate based on forms validation rules and constraints.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.formAction">
            <summary>
            Overrides the action attribute (where the data on a form is sent) on the parent form element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.autofocus">
            <summary>
            Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.validity">
            <summary>
            Returns a  ValidityState object that represents the validity states of an element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.formNoValidate">
            <summary>
            Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.formEnctype">
            <summary>
            Used to override the encoding (formEnctype attribute) specified on the form element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLButtonElement.formMethod">
            <summary>
            Overrides the submit method attribute previously specified on a form element.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLButtonElement.checkValidity">
            <summary>
            Returns whether a form will validate when it is submitted, without having to submit it.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLButtonElement.setCustomValidity(System.String)">
            <summary>
            Sets a custom error message that is displayed when a form is submitted.
            </summary>
            <param name="error">Sets a custom error message that is displayed when a form is submitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLSourceElement.src">
            <summary>
            The address or URL of the a media resource that is to be considered.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSourceElement.media">
            <summary>
            Gets or sets the intended media type of the media source.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLSourceElement.type">
            <summary>
            Gets or sets the MIME type of a media resource.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.compatible">
            <summary>
            Retrieves the collection of user agents and versions declared in the X-UA-Compatible
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onkeydown">
            <summary>
            Fires when the user presses a key.
            </summary>
            <param name="ev">The keyboard event</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onkeyup">
            <summary>
            Fires when the user releases a key.
            </summary>
            <param name="ev">The keyboard event</param>
        </member>
        <member name="P:DuoCode.Dom.Document.implementation">
            <summary>
            Gets the implementation object of the current document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onreset">
            <summary>
            Fires when the user resets a form.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.scripts">
            <summary>
            Retrieves a collection of all script objects in the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onhelp">
            <summary>
            Fires when the user presses the F1 key while the browser is the active window.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.ondragleave">
            <summary>
            Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
            </summary>
            <param name="ev">The drag event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.charset">
            <summary>
            Gets or sets the character set used to encode the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onfocusin">
            <summary>
            Fires for an element just prior to setting focus on that element.
            </summary>
            <param name="ev">The focus event</param>
        </member>
        <member name="P:DuoCode.Dom.Document.vlinkColor">
            <summary>
            Sets or gets the color of the links that the user has visited.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onseeked">
            <summary>
            Occurs when the seek operation ends.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.title">
            <summary>
            Contains the title of the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.namespaces">
            <summary>
            Retrieves a collection of namespace objects.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.defaultCharset">
            <summary>
            Gets the default character set from the current regional language settings.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.embeds">
            <summary>
            Retrieves a collection of all embed objects in the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.styleSheets">
            <summary>
            Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.frames">
            <summary>
            Retrieves a collection of all window objects defined by the given document or defined by the document associated with the given window.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.ondurationchange">
            <summary>
            Occurs when the duration attribute is updated.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.all">
            <summary>
            Returns a reference to the collection of elements contained by the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.forms">
            <summary>
            Retrieves a collection, in source order, of all form objects in the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onblur">
            <summary>
            Fires when the object loses the input focus.
            </summary>
            <param name="ev">The focus event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.dir">
            <summary>
            Sets or retrieves a value that indicates the reading order of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onemptied">
            <summary>
            Occurs when the media element is reset to its initial state.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.designMode">
            <summary>
            Sets or gets a value that indicates whether the document can be edited.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onseeking">
            <summary>
            Occurs when the current playback position is moved.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.ondeactivate">
            <summary>
            Fires when the activeElement is changed from the current object to another object in the parent document.
            </summary>
            <param name="ev">The UI Event</param>
        </member>
        <member name="P:DuoCode.Dom.Document.oncanplay">
            <summary>
            Occurs when playback is possible, but would require further buffering.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.ondatasetchanged">
            <summary>
            Fires when the data set exposed by a data source object changes.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onrowsdelete">
            <summary>
            Fires when rows are about to be deleted from the recordset.
            </summary>
            <param name="ev">The event</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onloadstart">
            <summary>
            Occurs when Internet Explorer begins looking for media data.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.URLUnencoded">
            <summary>
            Gets the URL for the document, stripped of any character encoding.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.oncontrolselect">
            <summary>
            Fires when the user is about to make a control selection of the object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.ondragenter">
            <summary>
            Fires on the target element when the user drags the object to a valid drop target.
            </summary>
            <param name="ev">The drag event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.inputEncoding">
            <summary>
            Returns the character encoding used to create the webpage that is loaded into the document object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.activeElement">
            <summary>
            Gets the object that has the focus when the parent document has focus.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onchange">
            <summary>
            Fires when the contents of the object or selection have changed.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.links">
            <summary>
            Retrieves a collection of all a objects that specify the href property and all area objects in the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.uniqueID">
            <summary>
            Retrieves an autogenerated, unique identifier for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.URL">
            <summary>
            Sets or gets the URL for the current document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onbeforeactivate">
            <summary>
            Fires immediately before the object is set as the active element.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.documentMode">
            <summary>
            Retrieves the document compatibility mode of the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.anchors">
            <summary>
            Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.ondatasetcomplete">
            <summary>
            Fires to indicate that all data is available from the data source object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onsuspend">
            <summary>
            Occurs if the load operation has been intentionally halted.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.rootElement">
            <summary>
            Gets the root svg element in the document hierarchy.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.readyState">
            <summary>
            Retrieves a value that indicates the current state of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.referrer">
            <summary>
            Gets the URL of the location that referred the user to the current page.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.alinkColor">
            <summary>
            Sets or gets the color of all active links in the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onerrorupdate">
            <summary>
            Fires on a databound object when an error occurs while updating the associated data in the data source object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.parentWindow">
            <summary>
            Gets a reference to the container object of the window.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onmouseout">
            <summary>
            Fires when the user moves the mouse pointer outside the boundaries of the object.
            </summary>
            <param name="ev">The mouse event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onmsthumbnailclick">
            <summary>
            Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onmousewheel">
            <summary>
            Fires when the wheel button is rotated.
            </summary>
            <param name="ev">The mouse event</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onvolumechange">
            <summary>
            Occurs when the volume is changed, or playback is muted or unmuted.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.oncellchange">
            <summary>
            Fires when data changes in the data provider.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onrowexit">
            <summary>
            Fires just before the data source control changes the current row in the object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onrowsinserted">
            <summary>
            Fires just after new rows are inserted in the current recordset.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.xmlVersion">
            <summary>
            Gets or sets the version attribute specified in the declaration of an XML document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onpropertychange">
            <summary>
            Fires when a property changes on the object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.ondragend">
            <summary>
            Fires on the source object when the user releases the mouse at the close of a drag operation.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.doctype">
            <summary>
            Gets an object representing the document type declaration associated with the current document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.ondragover">
            <summary>
            Fires on the target element continuously while the user drags the object over a valid drop target.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.bgColor">
            <summary>
            Deprecated. Sets or retrieves a value that indicates the background color behind the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.ondragstart">
            <summary>
            Fires on the source object when the user starts to drag a text selection or selected object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onmouseup">
            <summary>
            Fires when the user releases a mouse button while the mouse is over the object.
            </summary>
            <param name="ev">The mouse event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.ondrag">
            <summary>
            Fires on the source object continuously during a drag operation.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onmouseover">
            <summary>
            Fires when the user moves the mouse pointer into the object.
            </summary>
            <param name="ev">The mouse event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.linkColor">
            <summary>
            Sets or gets the color of the document links.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onpause">
            <summary>
            Occurs when playback is paused.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onmousedown">
            <summary>
            Fires when the user clicks the object with either mouse button.
            </summary>
            <param name="ev">The mouse event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onclick">
            <summary>
            Fires when the user clicks the left mouse button on the object
            </summary>
            <param name="ev">The mouse event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onwaiting">
            <summary>
            Occurs when playback stops because the next frame of a video resource is not available.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onstop">
            <summary>
            Fires when the user clicks the Stop button or leaves the Web page.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onmssitemodejumplistitemremoved">
            <summary>
            false (false)[rolls
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.applets">
            <summary>
            Retrieves a collection of all applet objects in the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.body">
            <summary>
            Specifies the beginning and end of the document body.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.domain">
            <summary>
            Sets or gets the security domain of the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.selection">
            <summary>
            Represents the active selection, which is a highlighted block of text or other elements in the document that a user or a script can carry out some action on.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onstalled">
            <summary>
            Occurs when the download has stopped.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onmousemove">
            <summary>
            Fires when the user moves the mouse over the object.
            </summary>
            <param name="ev">The mouse event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.documentElement">
            <summary>
            Gets a reference to the root node of the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onbeforeeditfocus">
            <summary>
            Fires before an object contained in an editable element enters a UI-activated state or when an editable container object is control selected.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onratechange">
            <summary>
            Occurs when the playback rate is increased or decreased.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onprogress">
            <summary>
            Occurs to indicate progress while downloading media data.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.ondblclick">
            <summary>
            Fires when the user double-clicks the object.
            </summary>
            <param name="ev">The mouse event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.oncontextmenu">
            <summary>
            Fires when the user clicks the right mouse button in the client area, opening the context menu.
            </summary>
            <param name="ev">The mouse event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onloadedmetadata">
            <summary>
            Occurs when the duration and dimensions of the media have been determined.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onerror">
            <summary>
            Fires when an error occurs during object loading.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onplay">
            <summary>
            Occurs when the play method is requested.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onplaying">
            <summary>
            Occurs when the audio or video has started playing.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.images">
            <summary>
            Retrieves a collection, in source order, of img objects in the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.location">
            <summary>
            Contains information about the current URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onabort">
            <summary>
            Fires when the user aborts the download.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onfocusout">
            <summary>
            Fires for the current element with focus immediately after moving focus to another element.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onselectionchange">
            <summary>
            Fires when the selection state of a document changes.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onstoragecommit">
            <summary>
            Fires when a local DOM Storage area is written to disk.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.ondataavailable">
            <summary>
            Fires periodically as data arrives from data source objects that asynchronously transmit their data.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onreadystatechange">
            <summary>
            Fires when the state of the object has changed.
            </summary>
            <param name="ev">The event</param>
        </member>
        <member name="P:DuoCode.Dom.Document.lastModified">
            <summary>
            Gets the date that the page was last modified, if the page supplies one.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onkeypress">
            <summary>
            Fires when the user presses an alphanumeric key.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onloadeddata">
            <summary>
            Occurs when media data is loaded at the current playback position.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onbeforedeactivate">
            <summary>
            Fires immediately before the activeElement is changed from the current object to another object in the parent document.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onactivate">
            <summary>
            Fires when the object is set as the active element.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onfocus">
            <summary>
            Fires when the object receives focus.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.fgColor">
            <summary>
            Sets or gets the foreground (text) color of the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.ontimeupdate">
            <summary>
            Occurs to indicate the current playback position.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onselect">
            <summary>
            Fires when the current selection changes.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onended">
            <summary>
            Occurs when the end of playback is reached.
            </summary>
            <param name="ev">The event</param>
        </member>
        <member name="P:DuoCode.Dom.Document.compatMode">
            <summary>
            Gets a value that indicates whether standards-compliant mode is switched on for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Document.onscroll">
            <summary>
            Fires when the user repositions the scroll box in the scroll bar on the object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onrowenter">
            <summary>
            Fires to indicate that the current row has changed in the data source and new data values are available on the object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="P:DuoCode.Dom.Document.onload">
            <summary>
            Fires immediately after the browser loads the object.
            </summary>
            <param name="ev">The event.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.queryCommandValue(System.String)">
            <summary>
            Returns the current value of the document, range, or current selection for the given command.
            </summary>
            <param name="commandId">String that specifies a command identifier.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.queryCommandIndeterm(System.String)">
            <summary>
            Returns a Boolean value that indicates whether the specified command is in the indeterminate state.
            </summary>
            <param name="commandId">String that specifies a command identifier.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.execCommand(System.String,System.Boolean,System.Object)">
            <summary>
            Executes a command on the current document, current selection, or the given range.
            </summary>
            <param name="commandId">String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.</param>
            <param name="showUI">
            Display the user interface, defaults to false.
            This parameter is optional and can be omitted.
            </param>
            <param name="value">
            Value to assign.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Document.elementFromPoint(System.Double,System.Double)">
            <summary>
            Returns the element for the specified x coordinate and the specified y coordinate.
            </summary>
            <param name="x">The x-offset</param>
            <param name="y">The y-offset</param>
        </member>
        <member name="M:DuoCode.Dom.Document.queryCommandText(System.String)">
            <summary>
            Retrieves the string associated with a command.
            </summary>
            <param name="commandId">String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.write(System.String[])">
            <summary>
            Writes one or more HTML expressions to a document in the specified window.
            </summary>
            <param name="content">Specifies the text and HTML tags to write.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.updateSettings">
            <summary>
            Allows updating the print settings for the page.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Document.createElement(System.String)">
            <summary>
            Creates an instance of the element for the specified tag.
            </summary>
            <param name="tagName">The name of an element.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.releaseCapture">
            <summary>
            Removes mouse capture from the object in the current document.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Document.writeln(System.String[])">
            <summary>
            Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.
            </summary>
            <param name="content">The text and HTML tags to write.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.open(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.
            </summary>
            <param name="url">
            Specifies a MIME type for the document.
            This parameter is optional and can be omitted.
            </param>
            <param name="name">
            Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.
            This parameter is optional and can be omitted.
            </param>
            <param name="features">
            Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.
            This parameter is optional and can be omitted.
            </param>
            <param name="replace">
            Specifies whether the existing entry for the document is replaced in the history list.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Document.queryCommandSupported(System.String)">
            <summary>
            Returns a Boolean value that indicates whether the current command is supported on the current range.
            </summary>
            <param name="commandId">Specifies a command identifier.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.createTreeWalker(DuoCode.Dom.Node,System.Double,DuoCode.Dom.NodeFilter,System.Boolean)">
            <summary>
            Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.
            </summary>
            <param name="root">The root element or node to start traversing on.</param>
            <param name="whatToShow">The type of nodes or elements to appear in the node list. For more information, see whatToShow.</param>
            <param name="filter">A custom NodeFilter function to use.</param>
            <param name="entityReferenceExpansion">A flag that specifies whether entity reference nodes are expanded.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.queryCommandEnabled(System.String)">
            <summary>
            Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.
            </summary>
            <param name="commandId">Specifies a command identifier.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.focus">
            <summary>
            Causes the element to receive the focus and executes the code specified by the onfocus event.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Document.close">
            <summary>
            Closes an output stream and forces the sent data to display.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Document.createRange">
            <summary>
            Returns an empty range object that has both of its boundary points positioned at the beginning of the document.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Document.fireEvent(System.String,System.Object)">
            <summary>
            Fires a specified event on the object.
            </summary>
            <param name="eventName">Specifies the name of the event to fire.</param>
            <param name="eventObj">
            Object that specifies the event object from which to obtain event object properties.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Document.createComment(System.String)">
            <summary>
            Creates a comment object with the specified data.
            </summary>
            <param name="data">Sets the comment object's data.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.getElementsByTagName(System.Object)">
            <summary>
            Retrieves a collection of objects based on the specified element name.
            </summary>
            <param name="name">Specifies the name of an element.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.createDocumentFragment">
            <summary>
            Creates a new document.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Document.createStyleSheet(System.String,System.Int32)">
            <summary>
            Creates a style sheet for the document.
            </summary>
            <param name="href">
            Specifies how to add the style sheet to the document. If a file name is specified for the URL, the style information is added as a link object. If the URL contains style information, it is added to the style object.
            This parameter is optional and can be omitted.
            </param>
            <param name="index">
            Specifies the index that indicates where the new style sheet is inserted in the styleSheets collection. The default is to insert the new style sheet at the end of the collection.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Document.getElementsByName(System.String)">
            <summary>
            Gets a collection of objects based on the value of the NAME or ID attribute.
            </summary>
            <param name="elementName">Gets a collection of objects based on the value of the NAME or ID attribute.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.queryCommandState(System.String)">
            <summary>
            Returns a Boolean value that indicates the current state of the command.
            </summary>
            <param name="commandId">String that specifies a command identifier.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.hasFocus">
            <summary>
            Gets a value indicating whether the object currently has focus.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Document.execCommandShowHelp(System.String)">
            <summary>
            Displays help information for the given command identifier.
            </summary>
            <param name="commandId">Displays help information for the given command identifier.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.createAttribute(System.String)">
            <summary>
            Creates an attribute object with a specified name.
            </summary>
            <param name="name">String that sets the attribute object's name.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.createTextNode(System.String)">
            <summary>
            Creates a text string from the specified value.
            </summary>
            <param name="data">String that specifies the nodeValue property of the text node.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.createNodeIterator(DuoCode.Dom.Node,System.Double,DuoCode.Dom.NodeFilter,System.Boolean)">
            <summary>
            Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
            </summary>
            <param name="root">The root element or node to start traversing on.</param>
            <param name="whatToShow">The type of nodes or elements to appear in the node list</param>
            <param name="filter">A custom NodeFilter function to use. For more information, see filter. Use null for no filter.</param>
            <param name="entityReferenceExpansion">A flag that specifies whether entity reference nodes are expanded.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.createEventObject(System.Object)">
            <summary>
            Generates an event object to pass event context information when you use the fireEvent method.
            </summary>
            <param name="eventObj">
            An object that specifies an existing event object on which to base the new object.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.Document.getSelection">
            <summary>
            Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Document.getElementById(System.String)">
            <summary>
            Returns a reference to the first object with the specified value of the ID or NAME attribute.
            </summary>
            <param name="elementId">String that specifies the ID value. Case-insensitive.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.addEventListener(System.String,System.Func{DuoCode.Dom.PointerEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Document.removeNode(System.Boolean)">
            <param name="deep">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLScriptElement.defer">
            <summary>
            Sets or retrieves the status of the script.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLScriptElement.text">
            <summary>
            Retrieves or sets the text of the object as a string.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLScriptElement.src">
            <summary>
            Retrieves the URL to an external file that contains the source code or data.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLScriptElement.htmlFor">
            <summary>
            Sets or retrieves the object that is bound to the event script.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLScriptElement.charset">
            <summary>
            Sets or retrieves the character set used to encode the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLScriptElement.type">
            <summary>
            Sets or retrieves the MIME type for the associated scripting engine.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLScriptElement.event_">
            <summary>
            Sets or retrieves the event for which the script is written.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.rowIndex">
            <summary>
            Retrieves the position of the object in the rows collection for the table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.cells">
            <summary>
            Retrieves a collection of all cells in the table row.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.borderColorLight">
            <summary>
            Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.sectionRowIndex">
            <summary>
            Retrieves the position of the object in the collection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.borderColor">
            <summary>
            Sets or retrieves the border color of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.borderColorDark">
            <summary>
            Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableRowElement.deleteCell(System.Int32)">
            <summary>
            Removes the specified cell from the table row, as well as from the cells collection.
            </summary>
            <param name="index">
            Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableRowElement.insertCell(System.Int32)">
            <summary>
            Creates a new cell in the table row, and adds the cell to the cells collection.
            </summary>
            <param name="index">
            Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.ch">
            <summary>
            Sets or retrieves a value that you can use to implement your own ch functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.vAlign">
            <summary>
            Sets or retrieves how text and other content are vertically aligned within the object that contains them.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableRowElement.chOff">
            <summary>
            Sets or retrieves a value that you can use to implement your own chOff functionality for the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.arc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <param name="anticlockwise">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.isPointInPath(System.Double,System.Double,System.String)">
            <param name="fillRule">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.putImageData(DuoCode.Dom.ImageData,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <param name="dirtyX">This parameter is optional and can be omitted.</param>
            <param name="dirtyY">This parameter is optional and can be omitted.</param>
            <param name="dirtyWidth">This parameter is optional and can be omitted.</param>
            <param name="dirtyHeight">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.fillText(System.String,System.Double,System.Double,System.Double)">
            <param name="maxWidth">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.fill(System.String)">
            <param name="fillRule">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.createImageData(System.Object,System.Double)">
            <param name="sh">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.clip(System.String)">
            <param name="fillRule">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.drawImage(DuoCode.Dom.HTMLElement,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <param name="width">This parameter is optional and can be omitted.</param>
            <param name="height">This parameter is optional and can be omitted.</param>
            <param name="canvasOffsetX">This parameter is optional and can be omitted.</param>
            <param name="canvasOffsetY">This parameter is optional and can be omitted.</param>
            <param name="canvasImageWidth">This parameter is optional and can be omitted.</param>
            <param name="canvasImageHeight">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CanvasRenderingContext2D.strokeText(System.String,System.Double,System.Double,System.Double)">
            <param name="maxWidth">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSCSSRuleList.item(System.Int32)">
            <param name="index">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLHtmlElement.version">
            <summary>
            Sets or retrieves the DTD version that governs the current document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.scrolling">
            <summary>
            Sets or retrieves whether the frame can be scrolled.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.marginHeight">
            <summary>
            Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.marginWidth">
            <summary>
            Sets or retrieves the left and right margin widths before displaying the text in a frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.borderColor">
            <summary>
            Sets or retrieves the border color of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.frameSpacing">
            <summary>
            Sets or retrieves the amount of additional space between the frames.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.frameBorder">
            <summary>
            Sets or retrieves whether to display a border for the frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.noResize">
            <summary>
            Sets or retrieves whether the user can resize the frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.contentWindow">
            <summary>
            Retrieves the object of the specified.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.src">
            <summary>
            Sets or retrieves a URL to be loaded by the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.name">
            <summary>
            Sets or retrieves the frame name.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.contentDocument">
            <summary>
            Retrieves the document object of the page or frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.border">
            <summary>
            Specifies the properties of a border drawn around an object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.longDesc">
            <summary>
            Sets or retrieves a URI to a long description of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.onload">
            <summary>
            Raised when the object has been completely received from the server.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameElement.security">
            <summary>
            Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLQuoteElement.dateTime">
            <summary>
            Sets or retrieves the date and time of a modification to the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLQuoteElement.cite">
            <summary>
            Sets or retrieves reference information about the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.CSSMediaRule.insertRule(System.String,System.Int32)">
            <param name="index">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CSSMediaRule.deleteRule(System.Int32)">
            <param name="index">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.XMLHttpRequest.open(System.String,System.String,System.Boolean,System.String,System.String)">
            <param name="async_">This parameter is optional and can be omitted.</param>
            <param name="user">This parameter is optional and can be omitted.</param>
            <param name="password">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.XMLHttpRequest.send(System.Object)">
            <param name="data">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.XMLHttpRequest.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableHeaderCellElement.scope">
            <summary>
            Sets or retrieves the group of cells in a table to which the object's information applies.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameSetElement.borderColor">
            <summary>
            Sets or retrieves the border color of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameSetElement.rows">
            <summary>
            Sets or retrieves the frame heights of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameSetElement.cols">
            <summary>
            Sets or retrieves the frame widths of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameSetElement.onblur">
            <summary>
            Fires when the object loses the input focus.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameSetElement.frameSpacing">
            <summary>
            Sets or retrieves the amount of additional space between the frames.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameSetElement.onfocus">
            <summary>
            Fires when the object receives focus.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFrameSetElement.frameBorder">
            <summary>
            Sets or retrieves whether to display a border for the frame.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Screen.addEventListener(System.String,System.Func{System.Object,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DataTransfer.clearData(System.String)">
            <param name="format">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSPluginsCollection.refresh(System.Boolean)">
            <param name="reload">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SVGSVGElement.getComputedStyle(DuoCode.Dom.Element,System.String)">
            <param name="pseudoElt">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLLabelElement.htmlFor">
            <summary>
            Sets or retrieves the object to which the given label object is assigned.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLabelElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLegendElement.align">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLegendElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLLIElement.value">
            <summary>
            Sets or retrieves the value of a list item.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.scrolling">
            <summary>
            Sets or retrieves whether the frame can be scrolled.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.marginHeight">
            <summary>
            Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.marginWidth">
            <summary>
            Sets or retrieves the left and right margin widths before displaying the text in a frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.frameSpacing">
            <summary>
            Sets or retrieves the amount of additional space between the frames.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.frameBorder">
            <summary>
            Sets or retrieves whether to display a border for the frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.noResize">
            <summary>
            Sets or retrieves whether the user can resize the frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.vspace">
            <summary>
            Sets or retrieves the vertical margin for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.contentWindow">
            <summary>
            Retrieves the object of the specified.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.src">
            <summary>
            Sets or retrieves a URL to be loaded by the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.name">
            <summary>
            Sets or retrieves the frame name.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.border">
            <summary>
            Specifies the properties of a border drawn around an object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.contentDocument">
            <summary>
            Retrieves the document object of the page or frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.hspace">
            <summary>
            Sets or retrieves the horizontal margin for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.longDesc">
            <summary>
            Sets or retrieves a URI to a long description of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.security">
            <summary>
            Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIFrameElement.onload">
            <summary>
            Raised when the object has been completely received from the server.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.DragEvent.msConvertURL(DuoCode.Dom.File,System.String,System.String)">
            <param name="targetURL">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableSectionElement.align">
            <summary>
            Sets or retrieves a value that indicates the table alignment.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableSectionElement.rows">
            <summary>
            Sets or retrieves the number of horizontal rows contained in the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableSectionElement.deleteRow(System.Int32)">
            <summary>
            Removes the specified row (tr) from the element and from the rows collection.
            </summary>
            <param name="index">
            Number that specifies the zero-based position in the rows collection of the row to remove.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableSectionElement.moveRow(System.Double,System.Double)">
            <summary>
            Moves a table row to a new position.
            </summary>
            <param name="indexFrom">
            Number that specifies the index in the rows collection of the table row that is moved.
            This parameter is optional and can be omitted.
            </param>
            <param name="indexTo">
            Number that specifies where the row is moved within the rows collection.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLTableSectionElement.insertRow(System.Int32)">
            <summary>
            Creates a new row (tr) in the table, and adds the row to the rows collection.
            </summary>
            <param name="index">
            Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableSectionElement.ch">
            <summary>
            Sets or retrieves a value that you can use to implement your own ch functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableSectionElement.vAlign">
            <summary>
            Sets or retrieves how text and other content are vertically aligned within the object that contains them.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableSectionElement.chOff">
            <summary>
            Sets or retrieves a value that you can use to implement your own chOff functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.selectionStart">
            <summary>
            Gets or sets the starting position or offset of a text selection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.selectionEnd">
            <summary>
            Gets or sets the end position or offset of a text selection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.vrml">
            <summary>
            Sets or retrieves the URL of the virtual reality modeling language (VRML) world to be displayed in the window.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.lowsrc">
            <summary>
            Sets or retrieves a lower resolution image to display.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.vspace">
            <summary>
            Sets or retrieves the vertical margin for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.accept">
            <summary>
            Sets or retrieves a comma-separated list of content types.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.alt">
            <summary>
            Sets or retrieves a text alternative to the graphic.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.defaultChecked">
            <summary>
            Sets or retrieves the state of the check box or radio button.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.value">
            <summary>
            Returns the value of the data at the cursor's current position.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.src">
            <summary>
            The address or URL of the a media resource that is to be considered.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.useMap">
            <summary>
            Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.border">
            <summary>
            Sets or retrieves the width of the border to draw around the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.checked_">
            <summary>
            Sets or retrieves the state of the check box or radio button.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.hspace">
            <summary>
            Sets or retrieves the width of the border to draw around the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.maxLength">
            <summary>
            Sets or retrieves the maximum number of characters that the user can enter in a text control.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.type">
            <summary>
            Returns the content type of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.defaultValue">
            <summary>
            Sets or retrieves the initial contents of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.complete">
            <summary>
            Retrieves whether the object is fully loaded.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLInputElement.createTextRange">
            <summary>
            Creates a TextRange object for the element.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLInputElement.setSelectionRange(System.Double,System.Double)">
            <summary>
            Sets the start and end positions of a selection in a text field.
            </summary>
            <param name="start">The offset into the text field for the start of the selection.</param>
            <param name="end">The offset into the text field for the end of the selection.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLInputElement.select_">
            <summary>
            Makes the selection equal to the current object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.validationMessage">
            <summary>
            Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.files">
            <summary>
            Returns a FileList object on a file type input object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.max">
            <summary>
            Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.formTarget">
            <summary>
            Overrides the target attribute on a form element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.willValidate">
            <summary>
            Returns whether an element will successfully validate based on forms validation rules and constraints.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.step">
            <summary>
            Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.autofocus">
            <summary>
            Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.required">
            <summary>
            When present, marks an element that can't be submitted without a value.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.formEnctype">
            <summary>
            Used to override the encoding (formEnctype attribute) specified on the form element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.valueAsNumber">
            <summary>
            Returns the input field value as a number.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.placeholder">
            <summary>
            Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.formMethod">
            <summary>
            Overrides the submit method attribute previously specified on a form element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.list">
            <summary>
            Specifies the ID of a pre-defined datalist of options for an input element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.autocomplete">
            <summary>
            Specifies whether autocomplete is applied to an editable text field.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.min">
            <summary>
            Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.formAction">
            <summary>
            Overrides the action attribute (where the data on a form is sent) on the parent form element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.pattern">
            <summary>
            Gets or sets a string containing a regular expression that the user's input must match.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.validity">
            <summary>
            Returns a  ValidityState object that represents the validity states of an element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.formNoValidate">
            <summary>
            Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLInputElement.multiple">
            <summary>
            Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLInputElement.checkValidity">
            <summary>
            Returns whether a form will validate when it is submitted, without having to submit it.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLInputElement.stepDown(System.Int32)">
            <summary>
            Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.
            </summary>
            <param name="n">
            Value to decrement the value by.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLInputElement.stepUp(System.Int32)">
            <summary>
            Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.
            </summary>
            <param name="n">
            Value to increment the value by.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLInputElement.setCustomValidity(System.String)">
            <summary>
            Sets a custom error message that is displayed when a form is submitted.
            </summary>
            <param name="error">Sets a custom error message that is displayed when a form is submitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.rel">
            <summary>
            Sets or retrieves the relationship between the object and the destination of the link.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.protocol">
            <summary>
            Contains the protocol of the URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.search">
            <summary>
            Sets or retrieves the substring of the href property that follows the question mark.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.coords">
            <summary>
            Sets or retrieves the coordinates of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.hostname">
            <summary>
            Contains the hostname of a URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.pathname">
            <summary>
            Contains the pathname of the URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.target">
            <summary>
            Sets or retrieves the window or frame at which to target content.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.href">
            <summary>
            Sets or retrieves a destination URL or an anchor point.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.name">
            <summary>
            Sets or retrieves the shape of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.charset">
            <summary>
            Sets or retrieves the character set used to encode the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.hreflang">
            <summary>
            Sets or retrieves the language code of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.port">
            <summary>
            Sets or retrieves the port number associated with a URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.host">
            <summary>
            Contains the hostname and port values of the URL.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.hash">
            <summary>
            Contains the anchor portion of the URL including the hash sign (#).
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.rev">
            <summary>
            Sets or retrieves the relationship between the object and the destination of the link.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.shape">
            <summary>
            Sets or retrieves the shape of the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLAnchorElement.toString">
            <summary>
            Returns a string representation of an object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLAnchorElement.text">
            <summary>
            Retrieves or sets the text of the object as a string.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLParamElement.value">
            <summary>
            Sets or retrieves the value of an input parameter for an element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLParamElement.name">
            <summary>
            Sets or retrieves the name of an input parameter for an element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLParamElement.type">
            <summary>
            Sets or retrieves the content type of the resource designated by the value attribute.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLParamElement.valueType">
            <summary>
            Sets or retrieves the data type of the value attribute.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLPreElement.width">
            <summary>
            Sets or gets a value that you can use to implement your own width functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLPreElement.cite">
            <summary>
            Indicates a citation by rendering text in italic type.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.XDomainRequest.send(System.Object)">
            <param name="data">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.XDomainRequest.addEventListener(System.String,System.Func{DuoCode.Dom.ErrorEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.XDomainRequest.addEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLPhraseElement.dateTime">
            <summary>
            Sets or retrieves the date and time of a modification to the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLPhraseElement.cite">
            <summary>
            Sets or retrieves reference information about the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.MSEventObj.getAttribute(System.String,System.Double)">
            <param name="lFlags">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSEventObj.setAttribute(System.String,System.Object,System.Double)">
            <param name="lFlags">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSEventObj.removeAttribute(System.String,System.Double)">
            <param name="lFlags">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLCanvasElement.width">
            <summary>
            Gets or sets the width of a canvas element on a document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLCanvasElement.height">
            <summary>
            Gets or sets the height of a canvas element on a document.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLCanvasElement.toDataURL(System.String,System.Object[])">
            <summary>
            Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.
            </summary>
            <param name="type">
            The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLCanvasElement.getContext(System.Object)">
            <summary>
            Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.
            </summary>
            <param name="contextId">The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext("experimental-webgl");</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLCanvasElement.msToBlob">
            <summary>
            Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Location.reload(System.Boolean)">
            <param name="flag">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLTitleElement.text">
            <summary>
            Retrieves or sets the text of the object as a string.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLStyleElement.media">
            <summary>
            Sets or retrieves the media type.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLStyleElement.type">
            <summary>
            Retrieves the CSS language in which the style sheet is written.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Text.removeNode(System.Boolean)">
            <param name="deep">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLUnknownElement.namedRecordset(System.String,System.Object)">
            <param name="hierarchy">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.headers">
            <summary>
            Sets or retrieves a list of header cells that provide information for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.cellIndex">
            <summary>
            Retrieves the position of the object in the cells collection of a row.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.borderColorLight">
            <summary>
            Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.colSpan">
            <summary>
            Sets or retrieves the number columns in the table that the object should span.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.borderColor">
            <summary>
            Sets or retrieves the border color of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.axis">
            <summary>
            Sets or retrieves a comma-delimited list of conceptual categories associated with the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.noWrap">
            <summary>
            Sets or retrieves whether the browser automatically performs wordwrap.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.abbr">
            <summary>
            Sets or retrieves abbreviated text for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.rowSpan">
            <summary>
            Sets or retrieves how many rows in a table the cell should span.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.scope">
            <summary>
            Sets or retrieves the group of cells in a table to which the object's information applies.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.borderColorDark">
            <summary>
            Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.ch">
            <summary>
            Sets or retrieves a value that you can use to implement your own ch functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.vAlign">
            <summary>
            Sets or retrieves how text and other content are vertically aligned within the object that contains them.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableCellElement.chOff">
            <summary>
            Sets or retrieves a value that you can use to implement your own chOff functionality for the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.MSNamespaceInfoCollection.add_(System.String,System.String,System.Object)">
            <param name="namespace_">This parameter is optional and can be omitted.</param>
            <param name="urn">This parameter is optional and can be omitted.</param>
            <param name="implementationUrl">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.StyleSheetList.item(System.Int32)">
            <param name="index">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLBaseFontElement.face">
            <summary>
            Sets or retrieves the current typeface family.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLBaseFontElement.size">
            <summary>
            Sets or retrieves the font size of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.value">
            <summary>
            Retrieves or sets the text in the entry field of the textArea element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.status">
            <summary>
            Sets or retrieves the value indicating whether the control is selected.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.selectionStart">
            <summary>
            Gets or sets the starting position or offset of a text selection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.rows">
            <summary>
            Sets or retrieves the number of horizontal rows contained in the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.cols">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.readOnly">
            <summary>
            Sets or retrieves the value indicated whether the content of the object is read-only.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.wrap">
            <summary>
            Sets or retrieves how to handle wordwrapping in the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.selectionEnd">
            <summary>
            Gets or sets the end position or offset of a text selection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.type">
            <summary>
            Retrieves the type of control.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.defaultValue">
            <summary>
            Sets or retrieves the initial contents of the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTextAreaElement.createTextRange">
            <summary>
            Creates a TextRange object for the element.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTextAreaElement.setSelectionRange(System.Double,System.Double)">
            <summary>
            Sets the start and end positions of a selection in a text field.
            </summary>
            <param name="start">The offset into the text field for the start of the selection.</param>
            <param name="end">The offset into the text field for the end of the selection.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLTextAreaElement.select_">
            <summary>
            Highlights the input area of a form element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.validationMessage">
            <summary>
            Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.autofocus">
            <summary>
            Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.validity">
            <summary>
            Returns a  ValidityState object that represents the validity states of an element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.required">
            <summary>
            When present, marks an element that can't be submitted without a value.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.maxLength">
            <summary>
            Sets or retrieves the maximum number of characters that the user can enter in a text control.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.willValidate">
            <summary>
            Returns whether an element will successfully validate based on forms validation rules and constraints.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTextAreaElement.placeholder">
            <summary>
            Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTextAreaElement.checkValidity">
            <summary>
            Returns whether a form will validate when it is submitted, without having to submit it.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLTextAreaElement.setCustomValidity(System.String)">
            <summary>
            Sets a custom error message that is displayed when a form is submitted.
            </summary>
            <param name="error">Sets a custom error message that is displayed when a form is submitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Geolocation.getCurrentPosition(System.Action{DuoCode.Dom.Position},System.Action{DuoCode.Dom.PositionError},DuoCode.Dom.PositionOptions)">
            <param name="errorCallback">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Geolocation.watchPosition(System.Action{DuoCode.Dom.Position},System.Action{DuoCode.Dom.PositionError},DuoCode.Dom.PositionOptions)">
            <param name="errorCallback">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSNodeExtensions.removeNode(System.Boolean)">
            <param name="deep">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.History.back(System.Object)">
            <param name="distance">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.History.forward(System.Object)">
            <param name="distance">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.History.go(System.Object)">
            <param name="delta">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.History.replaceState(System.Object,System.String,System.String)">
            <param name="url">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.History.pushState(System.Object,System.String,System.String)">
            <param name="url">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLModElement.dateTime">
            <summary>
            Sets or retrieves the date and time of a modification to the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLModElement.cite">
            <summary>
            Sets or retrieves reference information about the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.MSPopupWindow.show(System.Double,System.Double,System.Double,System.Double,System.Object)">
            <param name="element">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableColElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableColElement.align">
            <summary>
            Sets or retrieves the alignment of the object relative to the display or table.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableColElement.span">
            <summary>
            Sets or retrieves the number of columns in the group.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableColElement.ch">
            <summary>
            Sets or retrieves a value that you can use to implement your own ch functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableColElement.vAlign">
            <summary>
            Sets or retrieves how text and other content are vertically aligned within the object that contains them.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableColElement.chOff">
            <summary>
            Sets or retrieves a value that you can use to implement your own chOff functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableAlignment.ch">
            <summary>
            Sets or retrieves a value that you can use to implement your own ch functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableAlignment.vAlign">
            <summary>
            Sets or retrieves how text and other content are vertically aligned within the object that contains them.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLTableAlignment.chOff">
            <summary>
            Sets or retrieves a value that you can use to implement your own chOff functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLDivElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLDivElement.noWrap">
            <summary>
            Sets or retrieves whether the browser automatically performs wordwrap.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.showModelessDialog(System.String,System.Object,System.Object)">
            <param name="url">This parameter is optional and can be omitted.</param>
            <param name="argument">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.resizeBy(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.resizeTo(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.createPopup(System.Object)">
            <param name="arguments">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.execScript(System.String,System.String)">
            <param name="language">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.moveTo(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.moveBy(System.Double,System.Double)">
            <param name="x">This parameter is optional and can be omitted.</param>
            <param name="y">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.showHelp(System.String,System.Object,System.String)">
            <param name="helpArg">This parameter is optional and can be omitted.</param>
            <param name="features">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.addEventListener(System.String,System.Func{DuoCode.Dom.MouseEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWindowExtensions.addEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.DocumentFragment.removeNode(System.Boolean)">
            <param name="deep">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLBRElement.clear">
            <summary>
            Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLHeadingElement.align">
            <summary>
            Sets or retrieves a value that indicates the table alignment.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.length">
            <summary>
            Sets or retrieves the number of objects in a collection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.target">
            <summary>
            Sets or retrieves the window or frame at which to target content.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.acceptCharset">
            <summary>
            Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.enctype">
            <summary>
            Sets or retrieves the encoding type for the form.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.elements">
            <summary>
            Retrieves a collection, in source order, of all controls in a given form.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.action">
            <summary>
            Sets or retrieves the URL to which the form content is sent for processing.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.method">
            <summary>
            Sets or retrieves how to send the form data to the server.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.encoding">
            <summary>
            Sets or retrieves the MIME encoding for the form.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLFormElement.reset">
            <summary>
            Fires when the user resets a form.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLFormElement.item(System.Object,System.Object)">
            <summary>
            Retrieves a form object or an object from an elements collection.
            </summary>
            <param name="name">
            Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.
            This parameter is optional and can be omitted.
            </param>
            <param name="index">
            Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.
            This parameter is optional and can be omitted.
            </param>
        </member>
        <member name="M:DuoCode.Dom.HTMLFormElement.submit">
            <summary>
            Fires when a FORM is about to be submitted.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLFormElement.namedItem(System.String)">
            <summary>
            Retrieves a form object or an object from an elements collection.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.autocomplete">
            <summary>
            Specifies whether autocomplete is applied to an editable text field.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFormElement.noValidate">
            <summary>
            Designates a form that is not validated when submitted.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLFormElement.checkValidity">
            <summary>
            Returns whether a form will validate when it is submitted, without having to submit it.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.initialTime">
            <summary>
            Gets the earliest possible position, in seconds, that the playback can begin.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.played">
            <summary>
            Gets TimeRanges for the current media resource that has been played.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.currentSrc">
            <summary>
            Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.autobuffer">
            <summary>
            The autobuffer element is not supported by Internet Explorer 9. Use the preload element instead.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.loop">
            <summary>
            Gets or sets a flag to specify whether playback should restart after it completes.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.ended">
            <summary>
            Gets information about whether the playback has ended or not.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.buffered">
            <summary>
            Gets a collection of buffered time ranges.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.error">
            <summary>
            Returns an object representing the current error state of the audio or video element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.seekable">
            <summary>
            Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.autoplay">
            <summary>
            Gets or sets a value that indicates whether to start playing the media automatically.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.controls">
            <summary>
            Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.volume">
            <summary>
            Gets or sets the volume level for audio portions of the media element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.src">
            <summary>
            The address or URL of the a media resource that is to be considered.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.playbackRate">
            <summary>
            Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.duration">
            <summary>
            Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.muted">
            <summary>
            Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.defaultPlaybackRate">
            <summary>
            Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.paused">
            <summary>
            Gets a flag that specifies whether playback is paused.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.seeking">
            <summary>
            Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.currentTime">
            <summary>
            Gets or sets the current playback position, in seconds.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.preload">
            <summary>
            Gets or sets the current playback position, in seconds.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.networkState">
            <summary>
            Gets the current network activity for the element.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLMediaElement.pause">
            <summary>
            Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLMediaElement.play">
            <summary>
            Loads and starts playback of a media resource.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLMediaElement.load">
            <summary>
            Fires immediately after the client loads the object.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLMediaElement.canPlayType(System.String)">
            <summary>
            Returns a string that specifies whether the client can play a given media resource type.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.msAudioCategory">
            <summary>
            Specifies the purpose of the audio or video media, such as background audio or alerts.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.msRealTime">
            <summary>
            Specifies whether or not to enable low-latency playback on the media element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.msPlayToPrimary">
            <summary>
            Gets or sets the primary DLNA PlayTo device.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.msPlayToDisabled">
            <summary>
            Gets or sets whether the DLNA PlayTo device is available.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.audioTracks">
            <summary>
            Returns an AudioTrackList object with the audio tracks for a given video element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.msPlayToSource">
            <summary>
            Gets the source associated with the media element for use by the PlayToManager.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.msAudioDeviceType">
            <summary>
            Specifies the output device id that the audio will be sent to.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLMediaElement.msClearEffects">
            <summary>
            Clears all effects from the media pipeline.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLMediaElement.msSetMediaProtectionManager(System.Object)">
            <summary>
            Specifies the media protection manager for a given media pipeline.
            </summary>
            <param name="mediaProtectionManager">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLMediaElement.msInsertAudioEffect(System.String,System.Boolean,System.Object)">
            <summary>
            Inserts the specified audio effect into media pipeline.
            </summary>
            <param name="config">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.msPlayToPreferredSourceUri">
            <summary>
            Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLMediaElement.msKeys">
            <summary>
            Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLMediaElement.addTextTrack(System.String,System.String,System.String)">
            <param name="label">This parameter is optional and can be omitted.</param>
            <param name="language">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.ElementCSSInlineStyle.doScroll(System.Object)">
            <param name="component">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLDTElement.noWrap">
            <summary>
            Sets or retrieves whether the browser automatically performs wordwrap.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFieldSetElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFieldSetElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFieldSetElement.validationMessage">
            <summary>
            Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFieldSetElement.validity">
            <summary>
            Returns a  ValidityState object that represents the validity states of an element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLFieldSetElement.willValidate">
            <summary>
            Returns whether an element will successfully validate based on forms validation rules and constraints.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLFieldSetElement.checkValidity">
            <summary>
            Returns whether a form will validate when it is submitted, without having to submit it.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLFieldSetElement.setCustomValidity(System.String)">
            <summary>
            Sets a custom error message that is displayed when a form is submitted.
            </summary>
            <param name="error">Sets a custom error message that is displayed when a form is submitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLBGSoundElement.balance">
            <summary>
            Sets or gets the value indicating how the volume of the background sound is divided between the left speaker and the right speaker.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLBGSoundElement.volume">
            <summary>
            Sets or gets the volume setting for the sound.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLBGSoundElement.src">
            <summary>
            Sets or gets the URL of a sound to play.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLBGSoundElement.loop">
            <summary>
            Sets or retrieves the number of times a sound or video clip will loop when activated.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLElement.scrollIntoView(System.Boolean)">
            <param name="top">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLElement.setCapture(System.Boolean)">
            <param name="containerCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLElement.mergeAttributes(DuoCode.Dom.HTMLElement,System.Boolean)">
            <param name="preserveIdentity">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLElement.applyElement(DuoCode.Dom.Element,System.String)">
            <param name="where_">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLElement.addBehavior(System.String,System.Object)">
            <param name="factory">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLElement.doScroll(System.Object)">
            <param name="component">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.HTMLElement.removeNode(System.Boolean)">
            <param name="deep">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLHRElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLHRElement.align">
            <summary>
            Sets or retrieves how the object is aligned with adjacent text.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLHRElement.noShade">
            <summary>
            Sets or retrieves whether the horizontal rule is drawn with 3-D shading.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.codeType">
            <summary>
            Sets or retrieves the Internet media type for the code associated with the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.object_">
            <summary>
            Retrieves the contained object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.code">
            <summary>
            Sets or retrieves the URL of the file containing the compiled Java class.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.archive">
            <summary>
            Sets or retrieves a character string that can be used to implement your own archive functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.standby">
            <summary>
            Sets or retrieves a message to be displayed while an object is loading.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.alt">
            <summary>
            Sets or retrieves a text alternative to the graphic.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.classid">
            <summary>
            Sets or retrieves the class identifier for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.useMap">
            <summary>
            Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.data">
            <summary>
            Sets or retrieves the URL that references the data of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.contentDocument">
            <summary>
            Retrieves the document object of the page or frame.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.altHtml">
            <summary>
            Gets or sets the optional alternative HTML script to execute if the object fails to load.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.codeBase">
            <summary>
            Sets or retrieves the URL of the component.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.type">
            <summary>
            Sets or retrieves the MIME type of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.BaseHref">
            <summary>
            Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.validationMessage">
            <summary>
            Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.validity">
            <summary>
            Returns a  ValidityState object that represents the validity states of an element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.willValidate">
            <summary>
            Returns whether an element will successfully validate based on forms validation rules and constraints.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLObjectElement.checkValidity">
            <summary>
            Returns whether a form will validate when it is submitted, without having to submit it.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLObjectElement.setCustomValidity(System.String)">
            <summary>
            Sets a custom error message that is displayed when a form is submitted.
            </summary>
            <param name="error">Sets a custom error message that is displayed when a form is submitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.msPlayToPreferredSourceUri">
            <summary>
            Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.msPlayToPrimary">
            <summary>
            Gets or sets the primary DLNA PlayTo device.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.msPlayToDisabled">
            <summary>
            Gets or sets whether the DLNA PlayTo device is available.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLObjectElement.msPlayToSource">
            <summary>
            Gets the source associated with the media element for use by the PlayToManager.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLObjectElement.namedRecordset(System.String,System.Object)">
            <param name="hierarchy">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.width">
            <summary>
            Sets or retrieves the width of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.palette">
            <summary>
            Retrieves the palette used for the embedded document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.src">
            <summary>
            Sets or retrieves a URL to be loaded by the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.name">
            <summary>
            Sets or retrieves the name of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.pluginspage">
            <summary>
            Retrieves the URL of the plug-in used to view an embedded document.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.height">
            <summary>
            Sets or retrieves the height of the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.units">
            <summary>
            Sets or retrieves the height and width units of the embed object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.msPlayToPreferredSourceUri">
            <summary>
            Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.msPlayToPrimary">
            <summary>
            Gets or sets the primary DLNA PlayTo device.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.msPlayToDisabled">
            <summary>
            Gets or sets whether the DLNA PlayTo device is available.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLEmbedElement.msPlayToSource">
            <summary>
            Gets the source associated with the media element for use by the PlayToManager.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptGroupElement.index">
            <summary>
            Sets or retrieves the ordinal position of an option in a list box.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptGroupElement.defaultSelected">
            <summary>
            Sets or retrieves the status of an option.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptGroupElement.text">
            <summary>
            Sets or retrieves the text string specified by the option tag.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptGroupElement.value">
            <summary>
            Sets or retrieves the value which is returned to the server when the form control is submitted.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptGroupElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptGroupElement.label">
            <summary>
            Sets or retrieves a value that you can use to implement your own label functionality for the object.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLOptGroupElement.selected">
            <summary>
            Sets or retrieves whether the option in the list box is the default item.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIsIndexElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLIsIndexElement.action">
            <summary>
            Sets or retrieves the URL to which the form content is sent for processing.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.MSDataBindingRecordSetExtensions.namedRecordset(System.String,System.Object)">
            <param name="hierarchy">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLVideoElement.width">
            <summary>
            Gets or sets the width of the video element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLVideoElement.videoWidth">
            <summary>
            Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLVideoElement.videoHeight">
            <summary>
            Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLVideoElement.height">
            <summary>
            Gets or sets the height of the video element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLVideoElement.poster">
            <summary>
            Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.HTMLVideoElement.msInsertVideoEffect(System.String,System.Boolean,System.Object)">
            <param name="config">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.ObjectURLOptions.oneTimeOnly">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.TextTrackCue.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSStreamReader.readAsArrayBuffer(DuoCode.Dom.MSStream,System.Double)">
            <param name="size">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSStreamReader.readAsBlob(DuoCode.Dom.MSStream,System.Double)">
            <param name="size">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSStreamReader.readAsDataURL(DuoCode.Dom.MSStream,System.Double)">
            <param name="size">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSStreamReader.readAsText(DuoCode.Dom.MSStream,System.String,System.Double)">
            <param name="encoding">This parameter is optional and can be omitted.</param>
            <param name="size">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.WebSocket.close(System.UInt16,System.String)">
            <param name="code">This parameter is optional and can be omitted.</param>
            <param name="reason">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.WebSocket.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBObjectStore.count(System.Object)">
            <param name="key">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBObjectStore.add_(System.Object,System.Object)">
            <param name="key">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBObjectStore.createIndex(System.String,System.String,System.Object)">
            <param name="optionalParameters">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBObjectStore.put(System.Object,System.Object)">
            <param name="key">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBObjectStore.openCursor(System.Object,System.String)">
            <param name="range">This parameter is optional and can be omitted.</param>
            <param name="direction">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBIndex.count(System.Object)">
            <param name="key">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBIndex.openKeyCursor(DuoCode.Dom.IDBKeyRange,System.String)">
            <param name="range">This parameter is optional and can be omitted.</param>
            <param name="direction">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBIndex.openCursor(DuoCode.Dom.IDBKeyRange,System.String)">
            <param name="range">This parameter is optional and can be omitted.</param>
            <param name="direction">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBCursor.continue_(System.Object)">
            <param name="key">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.URL.createObjectURL(System.Object,DuoCode.Dom.ObjectURLOptions)">
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.XMLHttpRequestEventTarget.addEventListener(System.String,System.Func{DuoCode.Dom.ProgressEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.AudioTrackList.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSBaseReader.addEventListener(System.String,System.Func{DuoCode.Dom.ProgressEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBKeyRange.bound(System.Object,System.Object,System.Boolean,System.Boolean)">
            <param name="lowerOpen">This parameter is optional and can be omitted.</param>
            <param name="upperOpen">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBKeyRange.lowerBound(System.Object,System.Boolean)">
            <param name="open">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBKeyRange.upperBound(System.Object,System.Boolean)">
            <param name="open">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBTransaction.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextTrackList.addEventListener(System.String,System.Func{DuoCode.Dom.TrackEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.TextTrackList.addEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.info(System.Object,System.Object[])">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.profile(System.String)">
            <param name="reportName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.assert(System.Boolean,System.String,System.Object[])">
            <param name="test">This parameter is optional and can be omitted.</param>
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.dir(System.Object,System.Object[])">
            <param name="value">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.warn(System.Object,System.Object[])">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.error(System.Object,System.Object[])">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.log(System.Object,System.Object[])">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.count(System.String)">
            <param name="countTitle">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.time(System.String)">
            <param name="timerName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.timeEnd(System.String)">
            <param name="timerName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.group_(System.String)">
            <param name="groupTitle">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.debug(System.String,System.Object[])">
            <param name="message">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Console.groupCollapsed(System.String)">
            <param name="groupTitle">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBDatabase.createObjectStore(System.String,System.Object)">
            <param name="optionalParameters">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBDatabase.transaction(System.Object,System.String)">
            <param name="mode">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBDatabase.addEventListener(System.String,System.Func{DuoCode.Dom.ErrorEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBOpenDBRequest.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.HTMLProgressElement.value">
            <summary>
            Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLProgressElement.max">
            <summary>
            Defines the maximum, or "done" value for a progress element.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLProgressElement.position">
            <summary>
            Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).
            </summary>
        </member>
        <member name="P:DuoCode.Dom.HTMLProgressElement.form">
            <summary>
            Retrieves a reference to the form that the object is embedded in.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.TextTrack.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBRequest.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MessagePort.postMessage(System.Object,System.Object)">
            <param name="message">This parameter is optional and can be omitted.</param>
            <param name="ports">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MessagePort.addEventListener(System.String,System.Func{DuoCode.Dom.MessageEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.FileReader.readAsText(DuoCode.Dom.Blob,System.String)">
            <param name="encoding">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.BlobPropertyBag.type">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.BlobPropertyBag.endings">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.Blob.#ctor(System.Object[],DuoCode.Dom.BlobPropertyBag)">
            <param name="blobParts">This parameter is optional and can be omitted.</param>
            <param name="options">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Blob.slice(System.Int32,System.Int32,System.String)">
            <param name="start">This parameter is optional and can be omitted.</param>
            <param name="end">This parameter is optional and can be omitted.</param>
            <param name="contentType">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.ApplicationCache.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.ApplicationCache.addEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSFileSaver.msSaveBlob(System.Object,System.String)">
            <param name="defaultName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSFileSaver.msSaveOrOpenBlob(System.Object,System.String)">
            <param name="defaultName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSBlobBuilder.append(System.Object,System.String)">
            <param name="endings">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSBlobBuilder.getBlob(System.String)">
            <param name="contentType">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.IDBFactory.open(System.String,System.UInt64)">
            <param name="version">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.FormData.#ctor(DuoCode.Dom.HTMLFormElement)">
            <param name="form">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.FormData.append(System.Object,System.Object,System.String)">
            <param name="blobName">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.AbstractWorker.addEventListener(System.String,System.Func{DuoCode.Dom.ErrorEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.AbstractWorker.addEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSCSSMatrix.#ctor(System.String)">
            <param name="text">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSCSSMatrix.rotate(System.Double,System.Double,System.Double)">
            <param name="angleY">This parameter is optional and can be omitted.</param>
            <param name="angleZ">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSCSSMatrix.translate(System.Double,System.Double,System.Double)">
            <param name="z">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSCSSMatrix.scale(System.Double,System.Double,System.Double)">
            <param name="scaleY">This parameter is optional and can be omitted.</param>
            <param name="scaleZ">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Worker.postMessage(System.Object,System.Object)">
            <param name="ports">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.Worker.addEventListener(System.String,System.Func{DuoCode.Dom.ErrorEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="P:DuoCode.Dom.StoreExceptionsInformation.siteName">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.StoreExceptionsInformation.explanationString">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.StoreExceptionsInformation.detailURI">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.StoreSiteSpecificExceptionsInformation.arrayOfDomainStrings">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.ConfirmSiteSpecificExceptionsInformation.arrayOfDomainStrings">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MutationObserverInit.childList">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MutationObserverInit.attributes">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MutationObserverInit.characterData">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MutationObserverInit.subtree">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MutationObserverInit.attributeOldValue">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MutationObserverInit.characterDataOldValue">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MutationObserverInit.attributeFilter">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.ExceptionInformation.domain">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MsZoomToOptions.contentX">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MsZoomToOptions.contentY">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MsZoomToOptions.viewportX">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MsZoomToOptions.viewportY">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MsZoomToOptions.scaleFactor">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.MsZoomToOptions.animate">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.DeviceAccelerationDict.x">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.DeviceAccelerationDict.y">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.DeviceAccelerationDict.z">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.DeviceRotationRateDict.alpha">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.DeviceRotationRateDict.beta">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.DeviceRotationRateDict.gamma">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Algorithm.name">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="P:DuoCode.Dom.Algorithm.params_">
            <summary>
            This property is optional and might be undefined.
            </summary>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.unwrapKey(DuoCode.Dom.ArrayBufferView,System.Object,DuoCode.Dom.Key,System.Boolean,System.String[])">
            <param name="extractable">This parameter is optional and can be omitted.</param>
            <param name="keyUsages">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.encrypt(System.Object,DuoCode.Dom.Key,DuoCode.Dom.ArrayBufferView)">
            <param name="buffer">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.importKey(System.String,DuoCode.Dom.ArrayBufferView,System.Object,System.Boolean,System.String[])">
            <param name="extractable">This parameter is optional and can be omitted.</param>
            <param name="keyUsages">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.verify(System.Object,DuoCode.Dom.Key,DuoCode.Dom.ArrayBufferView,DuoCode.Dom.ArrayBufferView)">
            <param name="buffer">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.deriveKey(System.Object,DuoCode.Dom.Key,System.Object,System.Boolean,System.String[])">
            <param name="extractable">This parameter is optional and can be omitted.</param>
            <param name="keyUsages">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.digest(System.Object,DuoCode.Dom.ArrayBufferView)">
            <param name="buffer">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.generateKey(System.Object,System.Boolean,System.String[])">
            <param name="extractable">This parameter is optional and can be omitted.</param>
            <param name="keyUsages">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.sign(System.Object,DuoCode.Dom.Key,DuoCode.Dom.ArrayBufferView)">
            <param name="buffer">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SubtleCrypto.decrypt(System.Object,DuoCode.Dom.Key,DuoCode.Dom.ArrayBufferView)">
            <param name="buffer">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.GlobalEventHandlers.addEventListener(System.String,System.Func{DuoCode.Dom.PointerEvent,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.GlobalEventHandlers.addEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.KeyOperation.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSMediaKeys.createSession(System.String,DuoCode.Dom.Uint8Array,DuoCode.Dom.Uint8Array)">
            <param name="cdmData">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSMediaKeys.isTypeSupported(System.String,System.String)">
            <param name="type">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.SourceBuffer.appendStream(DuoCode.Dom.MSStream,System.Double)">
            <param name="maxSize">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSInputMethodContext.addEventListener(System.String,System.Func{System.Object,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.PluginArray.refresh(System.Boolean)">
            <param name="reload">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MediaSource.endOfStream(System.String)">
            <param name="error">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSWebViewAsyncOperation.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.MSAppView.postMessage(System.Object,System.String,System.Object)">
            <param name="ports">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.PerfWidgetExternal.addEventListener(System.String,DuoCode.Dom.EventListener,System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="M:DuoCode.Dom.CryptoOperation.addEventListener(System.String,System.Func{DuoCode.Dom.Event,System.Object},System.Boolean)">
            <param name="useCapture">This parameter is optional and can be omitted.</param>
        </member>
        <member name="T:System.Converter`2">
            <summary>Represents a method that converts an object from one type to another type.</summary>
            <returns>The <typeparamref name="TOutput" /> that represents the converted <typeparamref name="TInput" />.</returns>
            <param name="input">The object to convert.</param>
            <typeparam name="TInput">The type of object that is to be converted.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
            <typeparam name="TOutput">The type the input object is to be converted to.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="T:System.Predicate`1">
            <summary>Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</summary>
            <returns>true if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, false.</returns>
            <param name="obj">The object to compare against the criteria defined within the method represented by this delegate.</param>
            <typeparam name="T">The type of the object to compare. This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="T:System.AggregateException">
            <summary>Represents one or more errors that occur during application execution.</summary> 
            <remarks>
            <see cref="T:System.AggregateException"/> is used to consolidate multiple failures into a single, throwable
            exception object.
            </remarks> 
        </member>
        <member name="M:System.AggregateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class. 
            </summary>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with 
            a specified error message.
            </summary> 
            <param name="message">The error message that explains the reason for the exception.</param> 
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error 
            message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param> 
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerException"/> argument
            is null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary> 
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with 
            references to the inner exceptions that are the cause of this exception.
            </summary> 
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is 
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with
            references to the inner exceptions that are the cause of this exception. 
            </summary>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param> 
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument 
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is 
            null.</exception>
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary> 
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument 
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is 
            null.</exception> 
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
            <summary> 
            Initializes a new instance of the <see cref="T:System.AggregateException"/> class with a specified error
            message and references to the inner exceptions that are the cause of this exception. 
            </summary> 
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param> 
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument
            is null.</exception>
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception> 
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IList{System.Exception})">
            <summary>
            Allocates a new aggregate exception with the specified message and list of inner exceptions.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param> 
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="innerExceptions"/> argument 
            is null.</exception> 
            <exception cref="T:System.ArgumentException">An element of <paramref name="innerExceptions"/> is
            null.</exception> 
        </member>
        <member name="M:System.AggregateException.GetBaseException">
            <summary> 
            Returns the <see cref="T:System.AggregateException"/> that is the root cause of this exception. 
            </summary>
        </member>
        <member name="P:System.AggregateException.InnerExceptions">
            <summary> 
            Gets a read-only collection of the <see cref="T:System.Exception"/> instances that caused the 
            current exception.
            </summary> 
        </member>
        <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
            <summary> 
            Invokes a handler on each <see cref="T:System.Exception"/> contained by this <see
            cref="T:System.AggregateException"/>. 
            </summary>
            <param name="predicate">The predicate to execute for each exception. The predicate accepts as an
            argument the <see cref="T:System.Exception"/> to be processed and returns a Boolean to indicate
            whether the exception was handled.</param> 
            <remarks>
            Each invocation of the <paramref name="predicate"/> returns true or false to indicate whether the 
            <see cref="T:System.Exception"/> was handled. After all invocations, if any exceptions went 
            unhandled, all unhandled exceptions will be put into a new <see cref="T:System.AggregateException"/>
            which will be thrown. Otherwise, the <see cref="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})"/> method simply returns. If any 
            invocations of the <paramref name="predicate"/> throws an exception, it will halt the processing
            of any more exceptions and immediately propagate the thrown exception as-is.
            </remarks>
            <exception cref="T:System.AggregateException">An exception contained by this <see 
            cref="T:System.AggregateException"/> was not handled.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> argument is 
            null.</exception> 
        </member>
        <member name="M:System.AggregateException.Flatten">
            <summary> 
            Flattens an <see cref="T:System.AggregateException"/> instances into a single, new instance.
            </summary> 
            <returns>A new, flattened <see cref="T:System.AggregateException"/>.</returns>
            <remarks>
            If any inner exceptions are themselves instances of
            <see cref="T:System.AggregateException"/>, this method will recursively flatten all of them. The 
            inner exceptions returned in the new <see cref="T:System.AggregateException"/>
            will be the union of all of the the inner exceptions from exception tree rooted at the provided 
            <see cref="T:System.AggregateException"/> instance. 
            </remarks>
        </member>
        <member name="M:System.AggregateException.ToString">
            <summary>
            Creates and returns a string representation of the current <see cref="T:System.AggregateException"/>. 
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="M:System.AppDomain.GetAssemblies">
            <summary>
            Gets the assemblies that have been loaded into the execution context of this application domain.
            </summary>
            
            <returns>
            An array of assemblies in this application domain.
            </returns>
            <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
        </member>
        <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the first element and pastes them into another <see cref="T:System.Array"/> starting at the first element. The length is specified as a 32-bit integer.
            </summary>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param><param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param><param name="length">A 32-bit integer that represents the number of elements to copy.</param><exception cref="T:System.ArgumentNullException"><paramref name="sourceArray"/> is null.-or-<paramref name="destinationArray"/> is null.</exception><exception cref="T:System.RankException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> have different ranks.</exception><exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> are of incompatible types.</exception><exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray"/> cannot be cast to the type of <paramref name="destinationArray"/>.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is less than zero.</exception><exception cref="T:System.ArgumentException"><paramref name="length"/> is greater than the number of elements in <paramref name="sourceArray"/>.-or-<paramref name="length"/> is greater than the number of elements in <paramref name="destinationArray"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
            </summary>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param><param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param><param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param><param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray"/> at which storing begins.</param><param name="length">A 32-bit integer that represents the number of elements to copy.</param><exception cref="T:System.ArgumentNullException"><paramref name="sourceArray"/> is null.-or-<paramref name="destinationArray"/> is null.</exception><exception cref="T:System.RankException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> have different ranks.</exception><exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> are of incompatible types.</exception><exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray"/> cannot be cast to the type of <paramref name="destinationArray"/>.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is less than the lower bound of the first dimension of <paramref name="sourceArray"/>.-or-<paramref name="destinationIndex"/> is less than the lower bound of the first dimension of <paramref name="destinationArray"/>.-or-<paramref name="length"/> is less than zero.</exception><exception cref="T:System.ArgumentException"><paramref name="length"/> is greater than the number of elements from <paramref name="sourceIndex"/> to the end of <paramref name="sourceArray"/>.-or-<paramref name="length"/> is greater than the number of elements from <paramref name="destinationIndex"/> to the end of <paramref name="destinationArray"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.
            </summary>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param><param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param><param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param><param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray"/> at which storing begins.</param><param name="length">A 32-bit integer that represents the number of elements to copy.</param><exception cref="T:System.ArgumentNullException"><paramref name="sourceArray"/> is null.-or-<paramref name="destinationArray"/> is null.</exception><exception cref="T:System.RankException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> have different ranks.</exception><exception cref="T:System.ArrayTypeMismatchException">The <paramref name="sourceArray"/> type is neither the same as nor derived from the <paramref name="destinationArray"/> type.</exception><exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray"/> cannot be cast to the type of <paramref name="destinationArray"/>.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is less than the lower bound of the first dimension of <paramref name="sourceArray"/>.-or-<paramref name="destinationIndex"/> is less than the lower bound of the first dimension of <paramref name="destinationArray"/>.-or-<paramref name="length"/> is less than zero.</exception><exception cref="T:System.ArgumentException"><paramref name="length"/> is greater than the number of elements from <paramref name="sourceIndex"/> to the end of <paramref name="sourceArray"/>.-or-<paramref name="length"/> is greater than the number of elements from <paramref name="destinationIndex"/> to the end of <paramref name="destinationArray"/>.</exception>
        </member>
        <member name="M:System.Array.Copy(System.Array,System.Array,System.Int64)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the first element and pastes them into another <see cref="T:System.Array"/> starting at the first element. The length is specified as a 64-bit integer.
            </summary>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param><param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param><param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue"/>, inclusive.</param><exception cref="T:System.ArgumentNullException"><paramref name="sourceArray"/> is null.-or-<paramref name="destinationArray"/> is null.</exception><exception cref="T:System.RankException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> have different ranks.</exception><exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> are of incompatible types.</exception><exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray"/> cannot be cast to the type of <paramref name="destinationArray"/>.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is less than 0 or greater than <see cref="F:System.Int32.MaxValue"/>.</exception><exception cref="T:System.ArgumentException"><paramref name="length"/> is greater than the number of elements in <paramref name="sourceArray"/>.-or-<paramref name="length"/> is greater than the number of elements in <paramref name="destinationArray"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param><param name="sourceIndex">A 64-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param><param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param><param name="destinationIndex">A 64-bit integer that represents the index in the <paramref name="destinationArray"/> at which storing begins.</param><param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue"/>, inclusive.</param><exception cref="T:System.ArgumentNullException"><paramref name="sourceArray"/> is null.-or-<paramref name="destinationArray"/> is null.</exception><exception cref="T:System.RankException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> have different ranks.</exception><exception cref="T:System.ArrayTypeMismatchException"><paramref name="sourceArray"/> and <paramref name="destinationArray"/> are of incompatible types.</exception><exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray"/> cannot be cast to the type of <paramref name="destinationArray"/>.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is outside the range of valid indexes for the <paramref name="sourceArray"/>.-or-<paramref name="destinationIndex"/> is outside the range of valid indexes for the <paramref name="destinationArray"/>.-or-<paramref name="length"/> is less than 0 or greater than <see cref="F:System.Int32.MaxValue"/>.</exception><exception cref="T:System.ArgumentException"><paramref name="length"/> is greater than the number of elements from <paramref name="sourceIndex"/> to the end of <paramref name="sourceArray"/>.-or-<paramref name="length"/> is greater than the number of elements from <paramref name="destinationIndex"/> to the end of <paramref name="destinationArray"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional <see cref="T:System.Array"/> to the specified one-dimensional <see cref="T:System.Array"/> starting at the specified destination <see cref="T:System.Array"/> index. The index is specified as a 32-bit integer.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the current <see cref="T:System.Array"/>.</param>
            <param name="index">A 32-bit integer that represents the index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than the lower bound of <paramref name="array"/>.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Array"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.</exception><exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:System.Array"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><exception cref="T:System.RankException">The source <see cref="T:System.Array"/> is multidimensional.</exception><exception cref="T:System.InvalidCastException">At least one element in the source <see cref="T:System.Array"/> cannot be cast to the type of destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>Converts an array of one type to an array of another type.</summary>
            <returns>An array of the target type containing the converted elements from the source array.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</param>
            <param name="converter">A <see cref="T:System.Converter`2" /> that converts each element from one type to another type.</param>
            <typeparam name="TInput">The type of the elements of the source array.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.-or-<paramref name="converter" /> is null.</exception>
        </member>
        <member name="P:System.Array.IsTypedArray">
            <summary>Gets a value indicating whether this array is a JavaScript typed array.</summary>
            <returns>true if this array is a JavaScript typed array; otherwise, false.</returns>
        </member>
        <member name="M:System.Array.ConvertToUntyped``1(``0[])">
            <summary>
            Converts the given array to regular JS array, not a typed-array.
            </summary>
        </member>
        <member name="M:System.Array.ConvertToUntyped``1(System.Array)">
            <summary>
            Converts the given array to regular JS array, not a typed-array.
            </summary>
        </member>
        <member name="M:System.Array.ConvertToUntyped(System.Array)">
            <summary>
            Converts the given array to regular JS array, not a typed-array.
            </summary>
        </member>
        <member name="M:System.Array.IndexOf(System.Array,System.Object)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the entire one-dimensional <see cref="T:System.Array" />.</summary>
            <returns>The index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</returns>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.RankException">
              <paramref name="array" /> is multidimensional.</exception>
        </member>
        <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
            <returns>The index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, the lower bound of the array minus 1.</returns>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
            <exception cref="T:System.RankException">
              <paramref name="array" /> is multidimensional.</exception>
        </member>
        <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
            <returns>The index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, the lower bound of the array minus 1.</returns>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
            <exception cref="T:System.RankException">
              <paramref name="array" /> is multidimensional.</exception>
        </member>
        <member name="M:System.Array.IndexOf``1(``0[],``0)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
        </member>
        <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array" />.</summary>
            <returns>The index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, the lower bound of the array minus 1.</returns>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.RankException">
              <paramref name="array" /> is multidimensional.</exception>
        </member>
        <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
            <returns>The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</returns>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
            <exception cref="T:System.RankException">
              <paramref name="array" /> is multidimensional.</exception>
        </member>
        <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
            <returns>The index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, the lower bound of the array minus 1.</returns>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
            <exception cref="T:System.RankException">
              <paramref name="array" /> is multidimensional.</exception>
        </member>
        <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
            <summary>Changes the size of an array to the specified new size.</summary>
            <param name="array">The one-dimensional, zero-based array to resize, or null to create a new array with the specified size.</param>
            <param name="newSize">The size of the new array.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="newSize" /> is less than zero.</exception>
        </member>
        <member name="M:System.Array.GetLength(System.Int32)">
            <summary>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array" />.</summary>
            <returns>A 32-bit integer that represents the number of elements in the specified dimension.</returns>
            <param name="dimension">A zero-based dimension of the <see cref="T:System.Array" /> whose length needs to be determined.</param>
            <exception cref="T:System.IndexOutOfRangeException">
              <paramref name="dimension" /> is less than zero.-or-<paramref name="dimension" /> is equal to or greater than <see cref="P:System.Array.Rank" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.GetUpperBound(System.Int32)">
            <summary>
            Gets the upper bound of the specified dimension in the <see cref="T:System.Array"/>.
            </summary>
            
            <returns>
            The upper bound of the specified dimension in the <see cref="T:System.Array"/>.
            </returns>
            <param name="dimension">A zero-based dimension of the <see cref="T:System.Array"/> whose upper bound needs to be determined.</param><exception cref="T:System.IndexOutOfRangeException"><paramref name="dimension"/> is less than zero.-or-<paramref name="dimension"/> is equal to or greater than <see cref="P:System.Array.Rank"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.GetLowerBound(System.Int32)">
            <summary>
            Gets the lower bound of the specified dimension in the <see cref="T:System.Array"/>.
            </summary>
            
            <returns>
            The lower bound of the specified dimension in the <see cref="T:System.Array"/>.
            </returns>
            <param name="dimension">A zero-based dimension of the <see cref="T:System.Array"/> whose lower bound needs to be determined.</param><exception cref="T:System.IndexOutOfRangeException"><paramref name="dimension"/> is less than zero.-or-<paramref name="dimension"/> is equal to or greater than <see cref="P:System.Array.Rank"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Boolean)">
            <summary>
            Creates a one-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and length, with zero-based indexing.
            </summary>
            
            <returns>
            A new one-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length, using zero-based indexing.
            </returns>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="length">The size of the <see cref="T:System.Array"/> to create.</param>
            <param name="forceUntyped">If true creates regular JS array, not a typed-array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="elementType"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="elementType"/> is not a valid <see cref="T:System.Type"/>.</exception><exception cref="T:System.NotSupportedException"><paramref name="elementType"/> is not supported. For example, <see cref="T:System.Void"/> is not supported.-or-<paramref name="elementType"/> is an open generic type.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/> is less than zero.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.CreateInstance``1(System.Int32,System.Boolean)">
            <summary>
            Creates a one-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and length, with zero-based indexing.
            </summary>
            
            <returns>
            A new one-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length, using zero-based indexing.
            </returns>
            <typeparam name="T">The type of the <see cref="T:System.Array"/> to create.</typeparam>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="length">The size of the <see cref="T:System.Array"/> to create.</param>
            <param name="forceUntyped">If true creates regular JS array, not a typed-array.</param>
        </member>
        <member name="M:System.Array.GetValue(System.Int32)">
            <summary>
            Gets the value at the specified position in the one-dimensional <see cref="T:System.Array"/>. The index is specified as a 32-bit integer.
            </summary>
            
            <returns>
            The value at the specified position in the one-dimensional <see cref="T:System.Array"/>.
            </returns>
            <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array"/> element to get.</param><exception cref="T:System.ArgumentException">The current <see cref="T:System.Array"/> does not have exactly one dimension.</exception><exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the current <see cref="T:System.Array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Array.SetValue(System.Object,System.Int32)">
            <summary>
            Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array"/>. The index is specified as a 32-bit integer.
            </summary>
            <param name="value">The new value for the specified element.</param><param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array"/> element to set.</param><exception cref="T:System.ArgumentException">The current <see cref="T:System.Array"/> does not have exactly one dimension.</exception><exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be cast to the element type of the current <see cref="T:System.Array"/>.</exception><exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the current <see cref="T:System.Array"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Array.GetValue(System.Int64)">
            <summary>
            Gets the value at the specified position in the one-dimensional <see cref="T:System.Array"/>. The index is specified as a 32-bit integer.
            </summary>
            
            <returns>
            The value at the specified position in the one-dimensional <see cref="T:System.Array"/>.
            </returns>
            <param name="index">A 64-bit integer that represents the position of the <see cref="T:System.Array"/> element to get.</param><exception cref="T:System.ArgumentException">The current <see cref="T:System.Array"/> does not have exactly one dimension.</exception><exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the current <see cref="T:System.Array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Array.SetValue(System.Object,System.Int64)">
            <summary>
            Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array"/>. The index is specified as a 32-bit integer.
            </summary>
            <param name="value">The new value for the specified element.</param><param name="index">A 64-bit integer that represents the position of the <see cref="T:System.Array"/> element to set.</param><exception cref="T:System.ArgumentException">The current <see cref="T:System.Array"/> does not have exactly one dimension.</exception><exception cref="T:System.InvalidCastException"><paramref name="value"/> cannot be cast to the element type of the current <see cref="T:System.Array"/>.</exception><exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the current <see cref="T:System.Array"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.
            </summary>
            
            <returns>
            true if a custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, false.
            </returns>
            <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo"/> class that describes a constructor, event, field, method, type, or property member of a class. </param><param name="attributeType">The type, or a base type, of the custom attribute to search for.</param><exception cref="T:System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="T:System.Attribute"/>. </exception><exception cref="T:System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            
            <returns>
            true if a custom attribute of type <paramref name="attributeType"/> is applied to <paramref name="element"/>; otherwise, false.
            </returns>
            <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo"/> class that describes a constructor, event, field, method, type, or property member of a class. </param><param name="attributeType">The type, or a base type, of the custom attribute to search for.</param><param name="inherit">If true, specifies to also search the ancestors of <paramref name="element"/> for custom attributes. </param><exception cref="T:System.ArgumentNullException"><paramref name="element"/> or <paramref name="attributeType"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="attributeType"/> is not derived from <see cref="T:System.Attribute"/>. </exception><exception cref="T:System.NotSupportedException"><paramref name="element"/> is not a constructor, method, property, event, type, or field. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Boolean.Parse(System.String)">
            <summary>
            Enables you to parse a string representation of a boolean value.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>The resulting boolean value.</returns>
        </member>
        <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
            <summary>Identifies code generated by a tool. This class cannot be inherited.</summary>
        </member>
        <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
            <summary>Gets the name of the tool that generated the code.</summary>
            <returns>The name of the tool that generated to code.</returns>
        </member>
        <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
            <summary>Gets the version of the tool that generated the code.</summary>
            <returns>The version of the tool that generated the code.</returns>
        </member>
        <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" /> class specifying the name and version of the tool that generated the code.</summary>
            <param name="tool">The name of the tool that generated the code.</param>
            <param name="version">The version of the tool that generated the code.</param>
        </member>
        <member name="T:System.Collections.Comparer">
            <summary>
            Compares two objects for equivalence, where string comparisons are case-sensitive.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:System.Collections.Comparer.Default">
            <summary>
            Represents an instance of <see cref="T:System.Collections.Comparer"/> that is associated with the <see cref="P:System.Threading.Thread.CurrentCulture"/> of the current thread. This field is read-only.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:System.Collections.Comparer.DefaultInvariant">
            <summary>
            Represents an instance of <see cref="T:System.Collections.Comparer"/> that is associated with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. This field is read-only.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Comparer"/> class using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for the new <see cref="T:System.Collections.Comparer"/>. </param><exception cref="T:System.ArgumentNullException"><paramref name="culture"/> is null. </exception>
        </member>
        <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
            <summary>
            Performs a case-sensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>, as shown in the following table.Value Meaning Less than zero <paramref name="a"/> is less than <paramref name="b"/>. Zero <paramref name="a"/> equals <paramref name="b"/>. Greater than zero <paramref name="a"/> is greater than <paramref name="b"/>.
            </returns>
            <param name="a">The first object to compare. </param><param name="b">The second object to compare. </param><exception cref="T:System.ArgumentException">Neither <paramref name="a"/> nor <paramref name="b"/> implements the <see cref="T:System.IComparable"/> interface.-or- <paramref name="a"/> and <paramref name="b"/> are of different types and neither one can handle comparisons with the other. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.Collections.Generic.Comparer`1">
            <summary>
            Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.Comparer`1.Default">
            <summary>
            Returns a default sort order comparer for the type specified by the generic argument.
            </summary>
            
            <returns>
            An object that inherits <see cref="T:System.Collections.Generic.Comparer`1"/> and serves as a sort order comparer for type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Comparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Comparer`1"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
            <summary>
            Creates a comparer by using the specified comparison.
            </summary>
            
            <returns>
            The new comparer.
            </returns>
            <param name="comparison">The comparison to use.</param>
        </member>
        <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
            <summary>
            When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero <paramref name="x"/> is less than <paramref name="y"/>.Zero <paramref name="x"/> equals <paramref name="y"/>.Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param><exception cref="T:System.ArgumentException">Type <typeparamref name="T"/> does not implement either the <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> interface.</exception>
        </member>
        <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2"/> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
            <summary>
            This constructor exists to make the compiler happy, as it invokes this constructor when 
            generating certain switch statements.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2"/> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2"/> can contain.</param><param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the default equality comparer for the key type.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param><param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param><exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
            <summary>
            Returns a default equality comparer for the type specified by the generic argument.
            </summary>
            
            <returns>
            The default instance of the <see cref="T:System.Collections.Generic.EqualityComparer`1"/> class for type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.EqualityComparer`1"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type <typeparamref name="T"/> are equal.
            </summary>
            
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
            <summary>
            When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The object for which to get a hash code.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1"/> class that is empty and uses the specified equality comparer for the set type.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the set type.</param>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1"/> class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new set.</param><param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the set type.</param><exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="P:System.Collections.Generic.ICollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="T:System.Collections.Generic.IComparer`1">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <typeparam name="T">The type of objects to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="T:System.Collections.Generic.IDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam><typeparam name="TValue">The type of values in the dictionary.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="P:System.Collections.Generic.IDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:System.Collections.Generic.IDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:System.Collections.Generic.IEnumerator`1">
            <summary>
            Supports a simple iteration over a generic collection.
            </summary>
            <typeparam name="T">The type of objects to enumerate.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="P:System.Collections.Generic.IEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IEqualityComparer`1">
            <summary>
            Defines methods to support the comparison of objects for equality.
            </summary>
            <typeparam name="T">The type of objects to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param><param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
        </member>
        <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>
            Represents a strongly-typed, read-only collection of elements.
            </summary>
            <typeparam name="T">The type of the elements.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            
            <returns>
            The number of elements in the collection.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>
            Represents a generic read-only collection of key/value pairs.
            </summary>
            <typeparam name="TKey">The type of keys in the read-only dictionary. </typeparam><typeparam name="TValue">The type of values in the read-only dictionary. </typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element that has the specified key in the read-only dictionary.
            </summary>
            
            <returns>
            The element that has the specified key in the read-only dictionary.
            </returns>
            <param name="key">The key to locate.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found. </exception>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
            
            <returns>
            An enumerable collection that contains the keys in the read-only dictionary.
            </returns>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only dictionary.
            </summary>
            
            <returns>
            An enumerable collection that contains the values in the read-only dictionary.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the read-only dictionary contains an element that has the specified key.
            </summary>
            
            <returns>
            true if the read-only dictionary contains an element that has the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            
            <returns>
            true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> interface contains an element that has the specified key; otherwise, false.
            </returns>
            <param name="key">The key to locate.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>
            Represents a read-only collection of elements that can be accessed by index.
            </summary>
            <typeparam name="T">The type of elements in the read-only list. This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list.
            </summary>
            
            <returns>
            The element at the specified index in the read-only list.
            </returns>
            <param name="index">The zero-based index of the element to get. </param>
        </member>
        <member name="T:System.Collections.Generic.KeyValuePair`2">
            <summary>
            Defines a key/value pair that can be set or retrieved.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam><typeparam name="TValue">The type of the value.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
            <summary>
            Gets the key in the key/value pair.
            </summary>
            <returns>
            A <typeparamref name="TKey"/> that is the key of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </returns>
        </member>
        <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
            <summary>
            Gets the value in the key/value pair.
            </summary>
            
            <returns>
            A <typeparamref name="TValue"/> that is the value of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> structure with the specified key and value.
            </summary>
            <param name="key">The object defined in each key/value pair.</param><param name="value">The definition associated with <paramref name="key"/>.</param>
        </member>
        <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
            <summary>
            Returns a string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, using the string representations of the key and value.
            </summary>
            
            <returns>
            A string representation of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, which includes the string representations of the key and value.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.Queue`1"/> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:System.Collections.Generic.Queue`1"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.Queue`1.Clear">
            <summary>Removes all objects from the <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
        </member>
        <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
            <summary>Determines whether an element is in the <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Queue`1" />; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.Queue`1" />. The value can be null for reference types.</param>
        </member>
        <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid 
            index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the 
            <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">The collection of items to remove from the set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a set is a subset of a specified collection.
            </summary>
            
            <returns>
            true if the current set is a subset of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a superset of a specified collection.
            </summary>
            
            <returns>
            true if the current set is a superset of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
            
            <returns>
            true if the current set is a proper superset of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set. </param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
            
            <returns>
            true if the current set is a proper subset of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set overlaps with the specified collection.
            </summary>
            
            <returns>
            true if the current set and <paramref name="other"/> share at least one common element; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set and the specified collection contain the same elements.
            </summary>
            
            <returns>
            true if the current set is equal to <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current set.</param><exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="P:System.Collections.Generic.List`1.Capacity">
            <summary>Gets or sets the total number of elements the internal data structure can hold without resizing.</summary>
            <returns>The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
        </member>
        <member name="M:System.Collections.Generic.List`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1"/> using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1"/> using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param><exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception><exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison"/> caused an error during the sort. For example, <paramref name="comparison"/> might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:System.Collections.Generic.List`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.
            </summary>
            <returns>An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Stack`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</summary>
            <param name="collection">The collection to copy elements from.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="collection" /> is null.</exception>
        </member>
        <member name="M:System.Collections.Generic.Stack`1.Clear">
            <summary>Removes all objects from the <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
        </member>
        <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
            <summary>Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.Stack`1" />; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.Stack`1" />. The value can be null for reference types.</param>
        </member>
        <member name="T:System.Collections.DictionaryEntry">
            <summary>
            Defines a dictionary key/value pair that can be set or retrieved.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:System.Collections.DictionaryEntry.Key">
            <summary>
            Gets or sets the key in the key/value pair.
            </summary>
            
            <returns>
            The key in the key/value pair.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:System.Collections.DictionaryEntry.Value">
            <summary>
            Gets or sets the value in the key/value pair.
            </summary>
            
            <returns>
            The value in the key/value pair.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
            <summary>
            Initializes an instance of the <see cref="T:System.Collections.DictionaryEntry"/> type with the specified key and value.
            </summary>
            <param name="key">The object defined in each key/value pair. </param><param name="value">The definition associated with <paramref name="key"/>. </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null and the .NET Framework version is 1.0 or 1.1. </exception>
        </member>
        <member name="T:System.Collections.IComparer">
            <summary>
            Exposes a method that compares two objects.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/> equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare. </param><param name="y">The second object to compare. </param><exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.-or- <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.Collections.IDictionary">
            <summary>
            Represents a nongeneric collection of key/value pairs.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:System.Collections.IDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            
            <returns>
            The element with the specified key, or null if the key does not exist.
            </returns>
            <param name="key">The key of the element to get or set. </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary"/> object is read-only.-or- The property is set, <paramref name="key"/> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"/> object is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IDictionary.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add. </param><param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add. </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null. </exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"/> object. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"/> is read-only.-or- The <see cref="T:System.Collections.IDictionary"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"/> object is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IDictionary.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove. </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"/> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.Collections.IDictionaryEnumerator">
            <summary>
            Enumerates the elements of a nongeneric dictionary.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IDictionaryEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            
            <returns>
            The key of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IDictionaryEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            
            <returns>
            The value of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IDictionaryEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and the value of the current dictionary entry.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator"/> is positioned before the first entry of the dictionary or after the last entry. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.Collections.IEqualityComparer">
            <summary>
            Defines methods to support the comparison of objects for equality.
            </summary>
        </member>
        <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param><exception cref="T:System.ArgumentException"><paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other.</exception>
        </member>
        <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="P:System.Collections.ICollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.ICollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.ICollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.-or-The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            
            <returns>
            The current element in the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Collections.IList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IList.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            
            <returns>
            The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection,
            </returns>
            <param name="value">The object to add to the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IList.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IList.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.IList"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. </param><param name="value">The object to insert into the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The object to remove from the <see cref="T:System.Collections.IList"/>. </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.Collections.IStructuralComparable">
            <summary>
            Supports the structural comparison of collection objects.
            </summary>
        </member>
        <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.
            </summary>
            
            <returns>
            An integer that indicates the relationship of the current collection object to <paramref name="other"/>, as shown in the following table.Return valueDescription-1The current instance precedes <paramref name="other"/>.0The current instance and <paramref name="other"/> are equal.1The current instance follows <paramref name="other"/>.
            </returns>
            <param name="other">The object to compare with the current instance.</param><param name="comparer">An object that compares members of the current collection object with the corresponding members of <paramref name="other"/>.</param><exception cref="T:System.ArgumentException">This instance and <paramref name="other"/> are not the same type.</exception>
        </member>
        <member name="T:System.Collections.IStructuralEquatable">
            <summary>
            Defines methods to support the comparison of objects for structural equality.
            </summary>
        </member>
        <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Determines whether an object is structurally equal to the current instance.
            </summary>
            
            <returns>
            true if the two objects are equal; otherwise, false.
            </returns>
            <param name="other">The object to compare with the current instance.</param><param name="comparer">An object that determines whether the current instance and <paramref name="other"/> are equal. </param>
        </member>
        <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
            <summary>
            Returns a hash code for the current instance.
            </summary>
            
            <returns>
            The hash code for the current instance.
            </returns>
            <param name="comparer">An object that computes the hash code of the current object.</param>
        </member>
        <member name="T:System.ComponentModel.EditorBrowsableAttribute">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="T:System.ComponentModel.EditorBrowsableState">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Always">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Never">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            
            <returns>
            An object whose type is <paramref name="conversionType"/> and whose value is equivalent to <paramref name="value"/>.-or-A null reference (Nothing in Visual Basic), if <paramref name="value"/> is null and <paramref name="conversionType"/> is not a value type.
            </returns>
            <param name="value">An object that implements the <see cref="T:System.IConvertible"/> interface. </param><param name="conversionType">The type of object to return. </param><exception cref="T:System.InvalidCastException">This conversion is not supported.  -or-<paramref name="value"/> is null and <paramref name="conversionType"/> is a value type.-or-<paramref name="value"/> does not implement the <see cref="T:System.IConvertible"/> interface.</exception><exception cref="T:System.FormatException"><paramref name="value"/> is not in a format recognized by <paramref name="conversionType"/>.</exception><exception cref="T:System.OverflowException"><paramref name="value"/> represents a number that is out of the range of <paramref name="conversionType"/>.</exception><exception cref="T:System.ArgumentNullException"><paramref name="conversionType"/> is null.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year, month, and day.
            </summary>
            <param name="year">The year (1 through 9999). </param><param name="month">The month (1 through 12). </param><param name="day">The day (1 through the number of days in <paramref name="month"/>). </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year"/> is less than 1 or greater than 9999.-or- <paramref name="month"/> is less than 1 or greater than 12.-or- <paramref name="day"/> is less than 1 or greater than the number of days in <paramref name="month"/>. </exception>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year, month, day, hour, minute, and second.
            </summary>
            <param name="year">The year (1 through 9999). </param><param name="month">The month (1 through 12). </param><param name="day">The day (1 through the number of days in <paramref name="month"/>). </param><param name="hour">The hours (0 through 23). </param><param name="minute">The minutes (0 through 59). </param><param name="second">The seconds (0 through 59). </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year"/> is less than 1 or greater than 9999. -or- <paramref name="month"/> is less than 1 or greater than 12. -or- <paramref name="day"/> is less than 1 or greater than the number of days in <paramref name="month"/>.-or- <paramref name="hour"/> is less than 0 or greater than 23. -or- <paramref name="minute"/> is less than 0 or greater than 59. -or- <paramref name="second"/> is less than 0 or greater than 59. </exception>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999). </param><param name="month">The month (1 through 12). </param><param name="day">The day (1 through the number of days in <paramref name="month"/>). </param><param name="hour">The hours (0 through 23). </param><param name="minute">The minutes (0 through 59). </param><param name="second">The seconds (0 through 59). </param><param name="kind">One of the enumeration values that indicates whether <paramref name="year"/>, <paramref name="month"/>, <paramref name="day"/>, <paramref name="hour"/>, <paramref name="minute"/> and <paramref name="second"/> specify a local time, Coordinated Universal Time (UTC), or neither.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year"/> is less than 1 or greater than 9999. -or- <paramref name="month"/> is less than 1 or greater than 12. -or- <paramref name="day"/> is less than 1 or greater than the number of days in <paramref name="month"/>.-or- <paramref name="hour"/> is less than 0 or greater than 23. -or- <paramref name="minute"/> is less than 0 or greater than 59. -or- <paramref name="second"/> is less than 0 or greater than 59. </exception><exception cref="T:System.ArgumentException"><paramref name="kind"/> is not one of the <see cref="T:System.DateTimeKind"/> values.</exception>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year, month, day, hour, minute, second, and millisecond.
            </summary>
            <param name="year">The year (1 through 9999). </param><param name="month">The month (1 through 12). </param><param name="day">The day (1 through the number of days in <paramref name="month"/>). </param><param name="hour">The hours (0 through 23). </param><param name="minute">The minutes (0 through 59). </param><param name="second">The seconds (0 through 59). </param><param name="millisecond">The milliseconds (0 through 999). </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year"/> is less than 1 or greater than 9999.-or- <paramref name="month"/> is less than 1 or greater than 12.-or- <paramref name="day"/> is less than 1 or greater than the number of days in <paramref name="month"/>.-or- <paramref name="hour"/> is less than 0 or greater than 23.-or- <paramref name="minute"/> is less than 0 or greater than 59.-or- <paramref name="second"/> is less than 0 or greater than 59.-or- <paramref name="millisecond"/> is less than 0 or greater than 999. </exception>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999). </param><param name="month">The month (1 through 12). </param><param name="day">The day (1 through the number of days in <paramref name="month"/>). </param><param name="hour">The hours (0 through 23). </param><param name="minute">The minutes (0 through 59). </param><param name="second">The seconds (0 through 59). </param><param name="millisecond">The milliseconds (0 through 999). </param><param name="kind">One of the enumeration values that indicates whether <paramref name="year"/>, <paramref name="month"/>, <paramref name="day"/>, <paramref name="hour"/>, <paramref name="minute"/>, <paramref name="second"/>, and <paramref name="millisecond"/> specify a local time, Coordinated Universal Time (UTC), or neither.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year"/> is less than 1 or greater than 9999.-or- <paramref name="month"/> is less than 1 or greater than 12.-or- <paramref name="day"/> is less than 1 or greater than the number of days in <paramref name="month"/>.-or- <paramref name="hour"/> is less than 0 or greater than 23.-or- <paramref name="minute"/> is less than 0 or greater than 59.-or- <paramref name="second"/> is less than 0 or greater than 59.-or- <paramref name="millisecond"/> is less than 0 or greater than 999. </exception><exception cref="T:System.ArgumentException"><paramref name="kind"/> is not one of the <see cref="T:System.DateTimeKind"/> values.</exception>
        </member>
        <member name="P:System.DateTime.Date">
            <summary>
            Gets the date component of this instance.
            </summary>
            
            <returns>
            A new object with the same date as this instance, and the time value set to 12:00:00 midnight 
            (00:00:00).
            </returns>
        </member>
        <member name="P:System.DateTime.Day">
            <summary>
            Gets the day of the month represented by this instance.
            </summary>
            
            <returns>
            The day component, expressed as a value between 1 and 31.
            </returns>
        </member>
        <member name="P:System.DateTime.DayOfWeek">
            <summary>
            Gets the day of the week represented by this instance.
            </summary>
            
            <returns>
            An enumerated constant that indicates the day of the week of this <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="P:System.DateTime.DayOfYear">
            <summary>
            Gets the day of the year represented by this instance.
            </summary>
            
            <returns>
            The day of the year, expressed as a value between 1 and 366.
            </returns>
        </member>
        <member name="P:System.DateTime.Hour">
            <summary>
            Gets the hour component of the date represented by this instance.
            </summary>
            
            <returns>
            The hour component, expressed as a value between 0 and 23.
            </returns>
        </member>
        <member name="P:System.DateTime.Kind">
            <summary>
            Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.
            </summary>
            
            <returns>
            One of the enumeration values that indicates what the current time represents. The default is <see cref="F:System.DateTimeKind.Unspecified"/>.
            </returns>
        </member>
        <member name="P:System.DateTime.Millisecond">
            <summary>
            Gets the milliseconds component of the date represented by this instance.
            </summary>
            
            <returns>
            The milliseconds component, expressed as a value between 0 and 999.
            </returns>
        </member>
        <member name="P:System.DateTime.Minute">
            <summary>
            Gets the minute component of the date represented by this instance.
            </summary>
            
            <returns>
            The minute component, expressed as a value between 0 and 59.
            </returns>
        </member>
        <member name="P:System.DateTime.Month">
            <summary>
            Gets the month component of the date represented by this instance.
            </summary>
            
            <returns>
            The month component, expressed as a value between 1 and 12.
            </returns>
        </member>
        <member name="P:System.DateTime.Now">
            <summary>
            Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the local time.
            </summary>
            
            <returns>
            An object whose value is the current local date and time.
            </returns>
        </member>
        <member name="P:System.DateTime.UtcNow">
            <summary>
            Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
            
            <returns>
            An object whose value is the current UTC date and time.
            </returns>
        </member>
        <member name="P:System.DateTime.Second">
            <summary>
            Gets the seconds component of the date represented by this instance.
            </summary>
            
            <returns>
            The seconds component, expressed as a value between 0 and 59.
            </returns>
        </member>
        <member name="P:System.DateTime.Today">
            <summary>
            Gets the current date.
            </summary>
            
            <returns>
            An object that is set to today's date, with the time component set to 00:00:00.
            </returns>
        </member>
        <member name="P:System.DateTime.Year">
            <summary>
            Gets the year component of the date represented by this instance.
            </summary>
            
            <returns>
            The year, between 1 and 9999.
            </returns>
        </member>
        <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Creates a new <see cref="T:System.DateTime"/> object that has the same number of ticks as the specified <see cref="T:System.DateTime"/>, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind"/> value.
            </summary>
            
            <returns>
            A new object that has the same number of ticks as the object represented by the <paramref name="value"/> parameter and the <see cref="T:System.DateTimeKind"/> value specified by the <paramref name="kind"/> parameter.
            </returns>
            <param name="value">A date and time. </param><param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
        </member>
        <member name="M:System.DateTime.Add(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the value of the specified <see cref="T:System.TimeSpan"/> to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value"/>.
            </returns>
            <param name="value">A positive or negative time interval. </param><exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. </exception>
        </member>
        <member name="M:System.DateTime.AddTicks(System.Int64)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of ticks to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of 100-nanosecond ticks. The <paramref name="value"/> parameter can be positive or negative. </param><exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. </exception>
        </member>
        <member name="M:System.DateTime.AddYears(System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of years to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of years. The <paramref name="value"/> parameter can be negative or positive. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> or the resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. </exception>
        </member>
        <member name="M:System.DateTime.AddMonths(System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of months to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and <paramref name="months"/>.
            </returns>
            <param name="months">A number of months. The <paramref name="months"/> parameter can be negative or positive. </param><exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.-or- <paramref name="months"/> is less than -120,000 or greater than 120,000. </exception>
        </member>
        <member name="M:System.DateTime.AddDays(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of days to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional days. The <paramref name="value"/> parameter can be negative or positive. </param><exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. </exception>
        </member>
        <member name="M:System.DateTime.AddHours(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of hours to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional hours. The <paramref name="value"/> parameter can be negative or positive. </param><exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. </exception>
        </member>
        <member name="M:System.DateTime.AddMilliseconds(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of milliseconds to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional milliseconds. The <paramref name="value"/> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param><exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. </exception>
        </member>
        <member name="M:System.DateTime.AddMinutes(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of minutes to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional minutes. The <paramref name="value"/> parameter can be negative or positive. </param><exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. </exception>
        </member>
        <member name="M:System.DateTime.AddSeconds(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of seconds to the value of this instance.
            </summary>
            
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional seconds. The <paramref name="value"/> parameter can be negative or positive. </param><exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime"/> is less than <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>. </exception>
        </member>
        <member name="T:System.DayOfWeek">
            <summary>
            Specifies the day of the week.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
            <summary>Concatenates the invocation lists of two delegates.</summary>
        </member>
        <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
            <summary>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</summary>
        </member>
        <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
            <summary>Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute">
            <summary>Suppresses reporting of a specific static analysis tool rule violation, allowing multiple suppressions on a single code artifact.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Category">
            <summary>Gets the category identifying the classification of the attribute.</summary>
            <returns>The category identifying the attribute.</returns>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.CheckId">
            <summary>Gets the identifier of the static analysis tool rule to be suppressed.</summary>
            <returns>The identifier of the static analysis tool rule to be suppressed.</returns>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Scope">
            <summary>Gets or sets the scope of the code that is relevant for the attribute.</summary>
            <returns>The scope of the code that is relevant for the attribute.</returns>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Target">
            <summary>Gets or sets a fully qualified path that represents the target of the attribute.</summary>
            <returns>A fully qualified path that represents the target of the attribute.</returns>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.MessageId">
            <summary>Gets or sets an optional argument expanding on exclusion criteria.</summary>
            <returns>A string containing the expanded exclusion criteria.</returns>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Justification">
            <summary>Gets or sets the justification for suppressing the code analysis message.</summary>
            <returns>The justification for suppressing the message.</returns>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> class, specifying the category of the static analysis tool and the identifier for an analysis rule. </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis tool rule the attribute applies to.</param>
        </member>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>
            Methods and classes marked with this attribute can be used within calls to Contract methods. Such methods not make any visible state changes.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
            <summary>
            Types marked with this attribute specify that a separate type contains the contracts for this type.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
            <summary>
            Types marked with this attribute specify that they are a contract for the type that is the argument of the constructor.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
            <summary>
            This attribute is used to mark a method as being the invariant
            method for a class. The method can have any name, but it must
            return "void" and take no parameters. The body of the method
            must consist solely of one or more calls to the method
            Contract.Invariant. A suggested name for the method is 
            "ObjectInvariant".
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
            <summary>
            Attribute that specifies that an assembly is a reference assembly with contracts.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
            <summary>
            Methods (and properties) marked with this attribute can be used within calls to Contract methods, but have no runtime behavior associated with them.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
            <summary>
            Instructs downstream tools whether to assume the correctness of this assembly, type or member without performing any verification or not.
            Can use [ContractVerification(false)] to explicitly mark assembly, type or member as one to *not* have verification performed on it.
            Most specific element found (member, type, then assembly) takes precedence.
            (That is useful if downstream tools allow a user to decide which polarity is the default, unmarked case.)
            </summary>
            <remarks>
            Apply this attribute to a type to apply to all members of the type, including nested types.
            Apply this attribute to an assembly to apply to all types and members of the assembly.
            Apply this attribute to a property to apply to both the getter and setter.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
            <summary>
            Allows a field f to be used in the method contracts for a method m when f has less visibility than m.
            For instance, if the method is public, but the field is private.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
            <summary>
            Enables factoring legacy if-then-throw into separate methods for reuse and full control over
            thrown exception and arguments
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
            <summary>
            Enables writing abbreviations for contracts that get copied to other methods
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
            <summary>
            Allows setting contract and tool options at assembly, type, or method granularity.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.Contract">
            <summary>
            Contains static methods for representing program contracts such as preconditions, postconditions, and invariants.
            </summary>
            <remarks>
            WARNING: A binary rewriter must be used to insert runtime enforcement of these contracts.
            Otherwise some contracts like Ensures can only be checked statically and will not throw exceptions during runtime when contracts are violated.
            Please note this class uses conditional compilation to help avoid easy mistakes.  Defining the preprocessor
            symbol CONTRACTS_PRECONDITIONS will include all preconditions expressed using Contract.Requires in your 
            build.  The symbol CONTRACTS_FULL will include postconditions and object invariants, and requires the binary rewriter.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
            <summary>
            Instructs code analysis tools to assume the expression <paramref name="condition"/> is true even if it can not be statically proven to always be true.
            </summary>
            <param name="condition">Expression to assume will always be true.</param>
            <remarks>
            At runtime this is equivalent to an <seealso cref="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
            <summary>
            Instructs code analysis tools to assume the expression <paramref name="condition"/> is true even if it can not be statically proven to always be true.
            </summary>
            <param name="condition">Expression to assume will always be true.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            At runtime this is equivalent to an <seealso cref="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
            <summary>
            In debug builds, perform a runtime check that <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Expression to check to always be true.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
            <summary>
            In debug builds, perform a runtime check that <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Expression to check to always be true.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when backward compatibility does not force you to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when backward compatibility does not force you to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when you want to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when you want to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
            <summary>
            Specifies a public contract such that the expression <paramref name="condition"/> will be true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">Boolean expression representing the contract.  May include <seealso cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> and <seealso cref="M:System.Diagnostics.Contracts.Contract.Result``1"/>.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
            <summary>
            Specifies a public contract such that the expression <paramref name="condition"/> will be true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">Boolean expression representing the contract.  May include <seealso cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> and <seealso cref="M:System.Diagnostics.Contracts.Contract.Result``1"/>.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
            <summary>
            Specifies a contract such that if an exception of type <typeparamref name="TException"/> is thrown then the expression <paramref name="condition"/> will be true when the enclosing method or property terminates abnormally.
            </summary>
            <typeparam name="TException">Type of exception related to this postcondition.</typeparam>
            <param name="condition">Boolean expression representing the contract.  May include <seealso cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> and <seealso cref="M:System.Diagnostics.Contracts.Contract.Result``1"/>.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference types and members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that if an exception of type <typeparamref name="TException"/> is thrown then the expression <paramref name="condition"/> will be true when the enclosing method or property terminates abnormally.
            </summary>
            <typeparam name="TException">Type of exception related to this postcondition.</typeparam>
            <param name="condition">Boolean expression representing the contract.  May include <seealso cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)"/> and <seealso cref="M:System.Diagnostics.Contracts.Contract.Result``1"/>.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference types and members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
            <summary>
            Represents the result (a.k.a. return value) of a method or property.
            </summary>
            <typeparam name="T">Type of return value of the enclosing method or property.</typeparam>
            <returns>Return value of the enclosing method or property.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
            <summary>
            Represents the final (output) value of an out parameter when returning from a method.
            </summary>
            <typeparam name="T">Type of the out parameter.</typeparam>
            <param name="value">The out parameter.</param>
            <returns>The output value of the out parameter.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
            <summary>
            Represents the value of <paramref name="value"/> as it was at the start of the method or property.
            </summary>
            <typeparam name="T">Type of <paramref name="value"/>.  This can be inferred.</typeparam>
            <param name="value">Value to represent.  This must be a field or parameter.</param>
            <returns>Value of <paramref name="value"/> at the start of the method or property.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> will be true after every method or property on the enclosing class.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This contact can only be specified in a dedicated invariant method declared on a class.
            This contract is not exposed to clients so may reference members less visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this invariant.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> will be true after every method or property on the enclosing class.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This contact can only be specified in a dedicated invariant method declared on a class.
            This contract is not exposed to clients so may reference members less visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this invariant.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c> 
            for all integers starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.
            </summary>
            <param name="fromInclusive">First integer to pass to <paramref name="predicate"/>.</param>
            <param name="toExclusive">One greater than the last integer to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</param>
            <returns><c>true</c> if <paramref name="predicate"/> returns <c>true</c> for all integers 
            starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c> 
            for all elements in the <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection from which elements will be drawn from to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated on elements from <paramref name="collection"/>.</param>
            <returns><c>true</c> if and only if <paramref name="predicate"/> returns <c>true</c> for all elements in
            <paramref name="collection"/>.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c> 
            for any integer starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.
            </summary>
            <param name="fromInclusive">First integer to pass to <paramref name="predicate"/>.</param>
            <param name="toExclusive">One greater than the last integer to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</param>
            <returns><c>true</c> if <paramref name="predicate"/> returns <c>true</c> for any integer
            starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c> 
            for any element in the <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection from which elements will be drawn from to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated on elements from <paramref name="collection"/>.</param>
            <returns><c>true</c> if and only if <paramref name="predicate"/> returns <c>true</c> for an element in
            <paramref name="collection"/>.</returns>
            <seealso cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
            <summary>
            Marker to indicate the end of the contract section of a method.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerVisualizerAttribute">
            <summary>
            Signifies that the attributed type has a visualizer which is pointed
            to by the parameter type name strings.
            </summary>
        </member>
        <member name="M:System.Enum.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            
            <returns>
            An object of type <paramref name="enumType"/> whose value is represented by <paramref name="value"/>.
            </returns>
            <param name="enumType">An enumeration type. </param><param name="value">A string containing the name or value to convert. </param><exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> or <paramref name="value"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>.-or- <paramref name="value"/> is either an empty string or only contains white space.-or- <paramref name="value"/> is a name, but not one of the named constants defined for the enumeration. </exception><exception cref="T:System.OverflowException"><paramref name="value"/> is outside the range of the underlying type of <paramref name="enumType"/>.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
            <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive.</summary>
            <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
            <param name="enumType">An enumeration type. </param>
            <param name="value">A string containing the name or value to convert. </param>
            <param name="ignoreCase">true to ignore case; false to regard case. </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumType" /> or <paramref name="value" /> is null. </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="enumType" /> is not an <see cref="T:System.Enum" />.-or- <paramref name="value" /> is either an empty string ("") or only contains white space.-or- <paramref name="value" /> is a name, but not one of the named constants defined for the enumeration. </exception>
            <exception cref="T:System.OverflowException">
              <paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</exception>
        </member>
        <member name="M:System.Enum.TryParse``1(System.String,``0@)">
            <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</summary>
            <returns>true if the <paramref name="value" /> parameter was converted successfully; otherwise, false.</returns>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="result">When this method returns, contains an object of type <typeparamref name="TEnum" /> whose value is represented by <paramref name="value" />. This parameter is passed uninitialized.</param>
            <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum" /> is not an enumeration type.</exception>
        </member>
        <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</summary>
            <returns>true if the <paramref name="value" /> parameter was converted successfully; otherwise, false.</returns>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to consider case.</param>
            <param name="result">When this method returns, contains an object of type <typeparamref name="TEnum" /> whose value is represented by <paramref name="value" />. This parameter is passed uninitialized.</param>
            <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value" />.</typeparam>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum" /> is not an enumeration type.</exception>
        </member>
        <member name="M:System.Enum.ToObject``1(System.Type,``0)">
            <summary>
            Converts the specified object with an integer value to an enumeration member.
            </summary>
            
            <returns>
            An enumeration object whose value is <paramref name="value"/>.
            </returns>
            <param name="enumType">The enumeration type to return. </param><param name="value">The value convert to an enumeration member. </param><exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> or <paramref name="value"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>.-or- <paramref name="value"/> is not type <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>, or <see cref="T:System.UInt64"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Enum.GetNames(System.Type)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            
            <returns>
            A string array of the names of the constants in <paramref name="enumType"/>.
            </returns>
            <param name="enumType">An enumeration type. </param><exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="enumType"/> parameter is not an <see cref="T:System.Enum"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Enum.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            
            <returns>
            An array that contains the values of the constants in <paramref name="enumType"/>.
            </returns>
            <param name="enumType">An enumeration type. </param><exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not an <see cref="T:System.Enum"/>. </exception><exception cref="T:System.InvalidOperationException">The method is invoked by reflection in a reflection-only context, -or-<paramref name="enumType"/> is a type from an assembly loaded in a reflection-only context.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Enum.GetUnderlyingType(System.Type)">
            <summary>Returns the underlying type of the specified enumeration.</summary>
            <returns>The underlying type of <paramref name="enumType" />.</returns>
            <param name="enumType">An enumeration type. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumType" /> is null. </exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />. </exception>
        </member>
        <member name="P:System.Environment.TickCount">
            <summary>Gets the number of milliseconds elapsed since the system started.</summary>
            <returns>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</returns>
        </member>
        <member name="T:System.EventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> is the base class for classes containing event data.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:System.EventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.EventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.EventArgs"/> class.
            </summary>
        </member>
        <member name="T:System.GC">
            <summary>
            Controls the system garbage collector, a service that automatically reclaims unused memory.
            </summary>
        </member>
        <member name="M:System.GC.KeepAlive(System.Object)">
            <summary>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</summary>
            <param name="obj">The object to reference.</param>
        </member>
        <member name="M:System.GC.SuppressFinalize(System.Object)">
            <summary>Requests that the system not call the finalizer for the specified object.</summary>
            <param name="obj">The object that a finalizer must not be called for.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="obj" />is null.</exception>
        </member>
        <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
            <summary>
            Compares two strings.
            </summary>
            
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition zero The two strings are equal. less than zero <paramref name="string1"/> is less than <paramref name="string2"/>. greater than zero <paramref name="string1"/> is greater than <paramref name="string2"/>.
            </returns>
            <param name="string1">The first string to compare. </param><param name="string2">The second string to compare. </param>
        </member>
        <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
            <summary>
            Compares two strings using the specified <see cref="T:System.Globalization.CompareOptions"/> value.
            </summary>
            
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition zero The two strings are equal. less than zero <paramref name="string1"/> is less than <paramref name="string2"/>. greater than zero <paramref name="string1"/> is greater than <paramref name="string2"/>.
            </returns>
            <param name="string1">The first string to compare. </param><param name="string2">The second string to compare. </param><param name="options">A value that defines how <paramref name="string1"/> and <paramref name="string2"/> should be compared. <paramref name="options"/> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal"/>, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>, and <see cref="F:System.Globalization.CompareOptions.StringSort"/>.</param><exception cref="T:System.ArgumentException"><paramref name="options"/> contains an invalid <see cref="T:System.Globalization.CompareOptions"/> value. </exception>
        </member>
        <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Compares a section of one string with a section of another string.
            </summary>
            
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition zero The two strings are equal. less than zero The specified section of <paramref name="string1"/> is less than the specified section of <paramref name="string2"/>. greater than zero The specified section of <paramref name="string1"/> is greater than the specified section of <paramref name="string2"/>.
            </returns>
            <param name="string1">The first string to compare. </param><param name="offset1">The zero-based index of the character in <paramref name="string1"/> at which to start comparing. </param><param name="length1">The number of consecutive characters in <paramref name="string1"/> to compare. </param><param name="string2">The second string to compare. </param><param name="offset2">The zero-based index of the character in <paramref name="string2"/> at which to start comparing. </param><param name="length2">The number of consecutive characters in <paramref name="string2"/> to compare. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1"/> or <paramref name="length1"/> or <paramref name="offset2"/> or <paramref name="length2"/> is less than zero.-or- <paramref name="offset1"/> is greater than or equal to the number of characters in <paramref name="string1"/>.-or- <paramref name="offset2"/> is greater than or equal to the number of characters in <paramref name="string2"/>.-or- <paramref name="length1"/> is greater than the number of characters from <paramref name="offset1"/> to the end of <paramref name="string1"/>.-or- <paramref name="length2"/> is greater than the number of characters from <paramref name="offset2"/> to the end of <paramref name="string2"/>. </exception>
        </member>
        <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
            <summary>
            Compares the end section of a string with the end section of another string using the specified <see cref="T:System.Globalization.CompareOptions"/> value.
            </summary>
            
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition zero The two strings are equal. less than zero The specified section of <paramref name="string1"/> is less than the specified section of <paramref name="string2"/>. greater than zero The specified section of <paramref name="string1"/> is greater than the specified section of <paramref name="string2"/>.
            </returns>
            <param name="string1">The first string to compare. </param><param name="offset1">The zero-based index of the character in <paramref name="string1"/> at which to start comparing. </param><param name="string2">The second string to compare. </param><param name="offset2">The zero-based index of the character in <paramref name="string2"/> at which to start comparing. </param><param name="options">A value that defines how <paramref name="string1"/> and <paramref name="string2"/> should be compared. <paramref name="options"/> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal"/>, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>, and <see cref="F:System.Globalization.CompareOptions.StringSort"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1"/> or <paramref name="offset2"/> is less than zero.-or- <paramref name="offset1"/> is greater than or equal to the number of characters in <paramref name="string1"/>.-or- <paramref name="offset2"/> is greater than or equal to the number of characters in <paramref name="string2"/>. </exception><exception cref="T:System.ArgumentException"><paramref name="options"/> contains an invalid <see cref="T:System.Globalization.CompareOptions"/> value. </exception>
        </member>
        <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Compares the end section of a string with the end section of another string.
            </summary>
            
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition zero The two strings are equal. less than zero The specified section of <paramref name="string1"/> is less than the specified section of <paramref name="string2"/>. greater than zero The specified section of <paramref name="string1"/> is greater than the specified section of <paramref name="string2"/>.
            </returns>
            <param name="string1">The first string to compare. </param><param name="offset1">The zero-based index of the character in <paramref name="string1"/> at which to start comparing. </param><param name="string2">The second string to compare. </param><param name="offset2">The zero-based index of the character in <paramref name="string2"/> at which to start comparing. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1"/> or <paramref name="offset2"/> is less than zero.-or- <paramref name="offset1"/> is greater than or equal to the number of characters in <paramref name="string1"/>.-or- <paramref name="offset2"/> is greater than or equal to the number of characters in <paramref name="string2"/>. </exception>
        </member>
        <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
            <summary>
            Compares a section of one string with a section of another string using the specified <see cref="T:System.Globalization.CompareOptions"/> value.
            </summary>
            
            <returns>
            A 32-bit signed integer indicating the lexical relationship between the two comparands.Value Condition zero The two strings are equal. less than zero The specified section of <paramref name="string1"/> is less than the specified section of <paramref name="string2"/>. greater than zero The specified section of <paramref name="string1"/> is greater than the specified section of <paramref name="string2"/>.
            </returns>
            <param name="string1">The first string to compare. </param><param name="offset1">The zero-based index of the character in <paramref name="string1"/> at which to start comparing. </param><param name="length1">The number of consecutive characters in <paramref name="string1"/> to compare. </param><param name="string2">The second string to compare. </param><param name="offset2">The zero-based index of the character in <paramref name="string2"/> at which to start comparing. </param><param name="length2">The number of consecutive characters in <paramref name="string2"/> to compare. </param><param name="options">A value that defines how <paramref name="string1"/> and <paramref name="string2"/> should be compared. <paramref name="options"/> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal"/>, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth"/>, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType"/>, and <see cref="F:System.Globalization.CompareOptions.StringSort"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset1"/> or <paramref name="length1"/> or <paramref name="offset2"/> or <paramref name="length2"/> is less than zero.-or- <paramref name="offset1"/> is greater than or equal to the number of characters in <paramref name="string1"/>.-or- <paramref name="offset2"/> is greater than or equal to the number of characters in <paramref name="string2"/>.-or- <paramref name="length1"/> is greater than the number of characters from <paramref name="offset1"/> to the end of <paramref name="string1"/>.-or- <paramref name="length2"/> is greater than the number of characters from <paramref name="offset2"/> to the end of <paramref name="string2"/>. </exception><exception cref="T:System.ArgumentException"><paramref name="options"/> contains an invalid <see cref="T:System.Globalization.CompareOptions"/> value. </exception>
        </member>
        <member name="T:System.Globalization.CompareOptions">
            <summary>
            Defines the string comparison options to use with <see cref="T:System.Globalization.CompareInfo"/>.
            </summary>
        </member>
        <member name="T:System.Globalization.CultureInfo">
            <summary>
            Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, and formatting for dates and sort strings.
            </summary>
        </member>
        <member name="T:System.Guid">
            <summary>
            Represents a globally unique identifier (GUID).
            </summary>
        </member>
        <member name="F:System.Guid.Empty">
            <summary>A read-only instance of the <see cref="T:System.Guid" /> structure whose value is all zeros.</summary>
        </member>
        <member name="M:System.Guid.ToByteArray">
            <summary>Returns a 16-element byte array that contains the value of this instance.</summary>
            <returns>A 16-element byte array.</returns>
        </member>
        <member name="M:System.Guid.ToString">
            <summary>Returns a string representation of the value of this instance in registry format.</summary>
            <returns>The value of this <see cref="T:System.Guid" />, formatted using the "D" format specifier as follows: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27".</returns>
        </member>
        <member name="M:System.Guid.ToString(System.String)">
            <summary>Returns a string representation of the value of this <see cref="T:System.Guid" /> instance, according to the provided format specifier.</summary>
            <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format. </returns>
            <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B" or "P". If <paramref name="format" /> is null or an empty string (""), "D" is used. </param>
            <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not null, an empty string (""), "N", "D", "B" or "P". </exception>
        </member>
        <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
            <summary>Returns a string representation of the value of this instance of the <see cref="T:System.Guid" /> structure, according to the provided format specifier and culture-specific format information.</summary>
            <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
            <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The <paramref name="format" /> parameter can be "N", "D", "B" or "P". If <paramref name="format" /> is null or an empty string (""), "D" is used. </param>
            <param name="provider">(Reserved) An object that supplies culture-specific formatting services. </param>
            <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not null, an empty string (""), "N", "D", "B" or "P". </exception>
        </member>
        <member name="M:System.Guid.Parse(System.String)">
            <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
            <returns>A structure that contains the value that was parsed.</returns>
            <param name="input">The GUID to convert.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="input" /> is null.</exception>
            <exception cref="T:System.FormatException">
              <paramref name="input" /> is not in a recognized format.</exception>
        </member>
        <member name="M:System.Guid.ParseExact(System.String,System.String)">
            <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
            <returns>A structure that contains the value that was parsed.</returns>
            <param name="input">The GUID to convert.</param>
            <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B" or "P".</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="input" /> or <paramref name="format" /> is null.</exception>
            <exception cref="T:System.FormatException">
              <paramref name="input" /> is not in a recognized format.</exception>
        </member>
        <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
            <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
            <returns>true if the parse operation was successful; otherwise, false.</returns>
            <param name="input">The GUID to convert.</param>
            <param name="result">The structure that will contain the parsed value.</param>
        </member>
        <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
            <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
            <returns>true if the parse operation was successful; otherwise, false.</returns>
            <param name="input">The GUID to convert.</param>
            <param name="format">One of the following specifiers that indicates the exact format to use when interpreting <paramref name="input" />: "N", "D", "B" or "P".</param>
            <param name="result">The structure that will contain the parsed value.</param>
        </member>
        <member name="T:System.IComparable">
            <summary>
            Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.IComparable.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj"/> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj"/>. Greater than zero This instance follows <paramref name="obj"/> in the sort order.
            </returns>
            <param name="obj">An object to compare with this instance. </param><exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.IComparable`1">
            <summary>
            Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering instances.
            </summary>
            <typeparam name="T">The type of objects to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.IComparable`1.CompareTo(`0)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:System.IConvertible">
            <summary>
            Defines methods that convert the value of the implementing reference or value type to a common language runtime type that has an equivalent value.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.ICustomFormatter">
            <summary>
            Defines a method that supports custom formatting of the value of an object.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            
            <returns>
            The string representation of the value of <paramref name="arg"/>, formatted as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <param name="format">A format string containing formatting specifications. </param><param name="arg">An object to format. </param><param name="formatProvider">An object that supplies format information about the current instance. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.IEquatable`1">
            <summary>
            Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="M:System.IEquatable`1.Equals(`0)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:System.IFormatProvider">
            <summary>
            Provides a mechanism for retrieving an object to control formatting.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IFormatProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            
            <returns>
            An instance of the object specified by <paramref name="formatType"/>, if the <see cref="T:System.IFormatProvider"/> implementation can supply that type of object; otherwise, null.
            </returns>
            <param name="formatType">An object that specifies the type of format object to return. </param><filterpriority>1</filterpriority>
        </member>
        <member name="T:System.IFormattable">
            <summary>
            Provides functionality to format the value of an object into a string representation.
            </summary>
        </member>
        <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            
            <returns>
            The value of the current instance in the specified format.
            </returns>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation. </param><param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.Int32">
            <summary>
            The int data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="F:System.Int32.MaxValue">
            <summary>
            Represents the largest possible value of an <see cref="T:System.Int32"/>. This field is constant.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:System.Int32.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:System.Int32"/>. This field is constant.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:System.IObservable`1">
            <summary>
            Represents a push-style collection.
            </summary>
        </member>
        <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the observable sequence.
            </summary>
        </member>
        <member name="T:System.IObserver`1">
            <summary>
            Supports push-style iteration over an observable sequence.
            </summary>
        </member>
        <member name="M:System.IObserver`1.OnNext(`0)">
            <summary>
            Notifies the observer of a new element in the sequence.
            </summary>
            <param name="value">Next element in the sequence.</param>
        </member>
        <member name="M:System.IObserver`1.OnError(System.Exception)">
            <summary>
            Notifies the observer that an exception has occurred.
            </summary>
            <param name="error">The error that has occurred.</param>
        </member>
        <member name="M:System.IObserver`1.OnCompleted">
            <summary>
            Notifies the observer of the end of the sequence.
            </summary>
        </member>
        <member name="T:System.IServiceProvider">
            <summary>
            Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.IServiceProvider.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
            <param name="serviceType">An object that specifies the type of service object to get. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.LazyThreadSafetyMode">
            <summary>
            Specifies how a <see cref="T:System.Lazy`1"/> instance synchronizes access among multiple threads.
            </summary>
        </member>
        <member name="T:System.Lazy`1">
            <summary>
            Provides support for lazy initialization.
            </summary>
            <typeparam name="T">Specifies the type of element being laziliy initialized.</typeparam>
            <remarks>
            <para>
            By default, all public and protected members of <see cref="T:System.Lazy`1"> are thread-safe and may be used
            concurrently from multiple threads.  These thread-safety guarantees may be removed optionally and per instance
            using parameters to the type's constructors.
            </see></para>
            </remarks>
        </member>
        <member name="T:System.Lazy`1.Boxed">
            <summary>
            wrapper class to box the initialized value, this is mainly created to avoid boxing/unboxing the value each time the value is called in case T is
            a value type
            </summary>
        </member>
        <member name="T:System.Lazy`1.LazyInternalExceptionHolder">
            <summary>
            Wrapper class to wrap the excpetion thrown by the value factory
            </summary>
        </member>
        <member name="M:System.Lazy`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"> class that
            uses <typeparamref name="T">'s default constructor for lazy initialization.
            </typeparamref></see></summary>
            <remarks>
            An instance created with this constructor may be used concurrently from multiple threads.
            </remarks>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class that uses a
            specified initialization function.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce the lazily-initialized value when it is
            needed.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null
            reference (Nothing in Visual Basic).</exception>
            <remarks>
            An instance created with this constructor may be used concurrently from multiple threads.
            </remarks>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/>
            class that uses <typeparamref name="T"/>'s default constructor and a specified thread-safety mode.
            </summary>
            <param name="mode">The lazy thread-safety mode mode</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode"/> mode contains an invalid value</exception>
        </member>
        <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class
            that uses a specified initialization function and a specified thread-safety mode.
            </summary>
            <param name="valueFactory">
            The <see cref="T:System.Func{T}"/> invoked to produce the lazily-initialized value when it is needed.
            </param>
            <param name="mode">The lazy thread-safety mode.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is
            a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode"/> mode contains an invalid value.</exception>
        </member>
        <member name="M:System.Lazy`1.GetObjectFromMode(System.LazyThreadSafetyMode)">
            <summary>
            Static helper function that returns an object based on the given mode. it also throws an exception if the mode is invalid
            </summary>
        </member>
        <member name="M:System.Lazy`1.ToString">
            <summary>Creates and returns a string representation of this instance.</summary>
            <returns>The result of calling <see cref="M:System.Object.ToString"> on the <see cref="P:System.Lazy`1.Value">.</see></see></returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:System.Lazy`1.Value"> is null.
            </see></exception>
        </member>
        <member name="P:System.Lazy`1.ValueForDebugDisplay">
            <summary>Gets the value of the Lazy&lt;T&gt; for debugging display purposes.</summary>
        </member>
        <member name="P:System.Lazy`1.Mode">
            <summary>
            Gets a value indicating whether this instance may be used concurrently from multiple threads.
            </summary>
        </member>
        <member name="P:System.Lazy`1.IsValueFaulted">
            <summary>
            Gets whether the value creation is faulted or not
            </summary>
        </member>
        <member name="P:System.Lazy`1.IsValueCreated">
            <summary>Gets a value indicating whether the <see cref="T:System.Threading.Lazy{T}"> has been initialized.
            </see></summary>
            <value>true if the <see cref="T:System.Threading.Lazy{T}"> instance has been initialized;
            otherwise, false.</see></value>
            <remarks>
            The initialization of a <see cref="T:System.Threading.Lazy{T}"> instance may result in either
            a value being produced or an exception being thrown.  If an exception goes unhandled during initialization,
            the <see cref="T:System.Threading.Lazy{T}"> instance is still considered initialized, and that exception
            will be thrown on subsequent accesses to <see cref="P:System.Lazy`1.Value">.  In such cases, <see cref="P:System.Lazy`1.IsValueCreated">
            will return true.
            </see></see></see></see></remarks>
        </member>
        <member name="P:System.Lazy`1.Value">
            <summary>Gets the lazily initialized value of the current <see cref="T:System.Threading.Lazy{T}">.</see></summary>
            <value>The lazily initialized value of the current <see cref="T:System.Threading.Lazy{T}">.</see></value>
            <exception cref="T:System.MissingMemberException">
            The <see cref="T:System.Threading.Lazy{T}"> was initialized to use the default constructor
            of the type being lazily initialized, and that type does not have a public, parameterless constructor.
            </see></exception>
            <exception cref="T:System.MemberAccessException">
            The <see cref="T:System.Threading.Lazy{T}"> was initialized to use the default constructor
            of the type being lazily initialized, and permissions to access the constructor were missing.
            </see></exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Threading.Lazy{T}"> was constructed with the <see cref="T:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication"> or
            <see cref="T:System.Threading.LazyThreadSafetyMode.None">  and the initialization function attempted to access <see cref="P:System.Lazy`1.Value"> on this instance.
            </see></see></see></see></exception>
        </member>
        <member name="M:System.Lazy`1.LazyInitValue">
            <summary>
            local helper method to initialize the value
            </summary>
            <returns>The inititialized T value</returns>
        </member>
        <member name="M:System.Lazy`1.CreateValue">
            <summary>Creates an instance of T using m_valueFactory in case its not null or use reflection to create a new T()</summary>
            <returns>An instance of Boxed.</returns>
        </member>
        <member name="T:System.System_LazyDebugView`1">
            <summary>A debugger view of the Lazy&lt;T&gt; to surface additional debugging properties and 
            to ensure that the Lazy&lt;T&gt; does not become initialized if it was not already.</summary>
        </member>
        <member name="M:System.System_LazyDebugView`1.#ctor(System.Lazy{`0})">
            <summary>Constructs a new debugger view object for the provided Lazy object.</summary>
            <param name="lazy">A Lazy object to browse in the debugger.</param>
        </member>
        <member name="P:System.System_LazyDebugView`1.IsValueCreated">
            <summary>Returns whether the Lazy object is initialized or not.</summary>
        </member>
        <member name="P:System.System_LazyDebugView`1.Value">
            <summary>Returns the value of the Lazy object.</summary>
        </member>
        <member name="P:System.System_LazyDebugView`1.Mode">
            <summary>Returns the execution mode of the Lazy object</summary>
        </member>
        <member name="P:System.System_LazyDebugView`1.IsValueFaulted">
            <summary>Returns the execution mode of the Lazy object</summary>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            
            <returns>
            The final accumulator value.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param><param name="func">An accumulator function to be invoked on each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="func"/> is null.</exception><exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            
            <returns>
            The final accumulator value.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param><param name="seed">The initial accumulator value.</param><param name="func">An accumulator function to be invoked on each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TAccumulate">The type of the accumulator value.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
            </summary>
            
            <returns>
            The transformed final accumulator value.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param><param name="seed">The initial accumulator value.</param><param name="func">An accumulator function to be invoked on each element.</param><param name="resultSelector">A function to transform the final accumulator value into the result value.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TAccumulate">The type of the accumulator value.</typeparam><typeparam name="TResult">The type of the resulting value.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="func"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition.
            </summary>
            
            <returns>
            true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to apply the predicate to.</param><param name="predicate">A function to test each element for a condition.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param><param name="predicate">A function to test each element for a condition.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. Each element's index is used in the logic 
            of the predicate function.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the 
            input sequence that satisfy the condition.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="predicate">A function to test each source element for a condition; the second parameter of the 
            function represents the index of the source element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> 
            is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of 
            invoking the transform function on each element of <paramref name="source"/>.
            </returns>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> 
            is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of a sequence into a new form by incorporating the element's index.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
            <param name="source">A sequence of values to invoke a transform function on.</param><param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            and flattens the resulting sequences into one sequence.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the 
            one-to-many transform function on each element of the input sequence.
            </returns>
            <param name="source">A sequence of values to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by 
            <paramref name="selector"/>.</typeparam><exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.
            </returns>
            <param name="source">A sequence of values to project.</param><param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector"/> on each element of <paramref name="source"/> and then mapping each of those sequence elements and their corresponding source element to a result element.
            </returns>
            <param name="source">A sequence of values to project.</param><param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param><param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector"/>.</typeparam><typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="collectionSelector"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector"/> on each element of <paramref name="source"/> and then mapping each of those sequence elements and their corresponding source element to a result element.
            </returns>
            <param name="source">A sequence of values to project.</param><param name="collectionSelector">A transform function to apply to each element of the input sequence.</param><param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector"/>.</typeparam><typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="collectionSelector"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the specified number of elements from the start of the input sequence.
            </returns>
            <param name="source">The sequence to return elements from.</param><param name="count">The number of elements to return.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from the input sequence that occur before the element at which the test no longer passes.
            </returns>
            <param name="source">A sequence to return elements from.</param><param name="predicate">A function to test each element for a condition.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that occur before the element at which the test no longer passes.
            </returns>
            <param name="source">The sequence to return elements from.</param><param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements that occur after the specified index in the input sequence.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return elements from.</param><param name="count">The number of elements to skip before returning the remaining elements.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate"/>.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return elements from.</param><param name="predicate">A function to test each element for a condition.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate"/>.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return elements from.</param><param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer 
            is used to compare keys.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has elements of type 
            <typeparamref name="TResult"/> that are obtained by performing an inner join on two sequences.
            </returns>
            <param name="outer">The first sequence to join.</param>
            <param name="inner">The sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first 
            sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second 
            sequence.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="outer"/> or <paramref name="inner"/> or 
            <paramref name="outerKeySelector"/> or <paramref name="innerKeySelector"/> or 
            <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
            <summary>
            Generates a sequence that contains one repeated value.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a repeated value.
            </returns>
            <param name="element">The value to be repeated.</param><param name="count">The number of times to repeat the value in the generated sequence.</param><typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Casts the elements of an <see cref="T:System.Collections.IEnumerable"/> to the specified type.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains each element of the source sequence cast to the specified type.
            </returns>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> that contains the elements to be cast to type <typeparamref name="TResult"/>.</param><typeparam name="TResult">The type to cast the elements of <paramref name="source"/> to.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.InvalidCastException">An element in the sequence cannot be cast to type <typeparamref name="TResult"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or 
            <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <param name="source">A sequence of values to order.</param><param name="keySelector">A function to extract a key from an element.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <param name="source">A sequence of values to order.</param><param name="keySelector">A function to extract a key from an element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <param name="source">A sequence of values to order.</param><param name="keySelector">A function to extract a key from an element.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param><param name="keySelector">A function to extract a key from each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param><param name="keySelector">A function to extract a key from each element.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param><param name="keySelector">A function to extract a key from each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param><param name="keySelector">A function to extract a key from each element.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Empty``1">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has the 
            specified type argument.
            </summary>
            
            <returns>
            An empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose type argument is 
            <typeparamref name="TResult"/>.
            </returns>
            <typeparam name="TResult">The type to assign to the type parameter of the returned generic 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> object that contains the default value for the <typeparamref name="TSource"/> type if <paramref name="source"/> is empty; otherwise, <paramref name="source"/>.
            </returns>
            <param name="source">The sequence to return a default value for if it is empty.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains <paramref name="defaultValue"/> if <paramref name="source"/> is empty; otherwise, <paramref name="source"/>.
            </returns>
            <param name="source">The sequence to return the specified value for if it is empty.</param><param name="defaultValue">The value to return if the sequence is empty.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a sequence of objects and a key.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param><param name="keySelector">A function to extract the key for each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
            </summary>
            
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects and a key.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param><param name="keySelector">A function to extract the key for each element.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
            </summary>
            
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects of type <typeparamref name="TElement"/> and a key.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param><param name="keySelector">A function to extract the key for each element.</param><param name="elementSelector">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2"/>.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.
            </summary>
            
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects of type <typeparamref name="TElement"/> and a key.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param><param name="keySelector">A function to extract the key for each element.</param><param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
            </summary>
            
            <returns>
            A collection of elements of type <typeparamref name="TResult"/> where each element represents a projection over a group and its key.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param><param name="keySelector">A function to extract the key for each element.</param><param name="resultSelector">A function to create a result value from each group.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
            </summary>
            
            <returns>
            A collection of elements of type <typeparamref name="TResult"/> where each element represents a projection over a group and its key.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param><param name="keySelector">A function to extract the key for each element.</param><param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param><param name="resultSelector">A function to create a result value from each group.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam><typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.
            </summary>
            
            <returns>
            A collection of elements of type <typeparamref name="TResult"/> where each element represents a projection over a group and its key.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param><param name="keySelector">A function to extract the key for each element.</param><param name="resultSelector">A function to create a result value from each group.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys with.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.
            </summary>
            
            <returns>
            A collection of elements of type <typeparamref name="TResult"/> where each element represents a projection over a group and its key.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.</param><param name="keySelector">A function to extract the key for each element.</param><param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.</param><param name="resultSelector">A function to create a result value from each group.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys with.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.</typeparam><typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector"/>.</typeparam>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a <see cref="T:System.Linq.Lookup`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Lookup`2"/> that contains keys and values.
            </returns>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Linq.Lookup`2"/> from.</param><param name="keySelector">A function to extract a key from each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Linq.Lookup`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function and key comparer.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Lookup`2"/> that contains keys and values.
            </returns>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Linq.Lookup`2"/> from.</param><param name="keySelector">A function to extract a key from each element.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a <see cref="T:System.Linq.Lookup`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to specified key selector and element selector functions.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Lookup`2"/> that contains values of type <typeparamref name="TElement"/> selected from the input sequence.
            </returns>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Linq.Lookup`2"/> from.</param><param name="keySelector">A function to extract a key from each element.</param><param name="elementSelector">A transform function to produce a result element value from each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><typeparam name="TElement">The type of the value returned by <paramref name="elementSelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Linq.Lookup`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function, a comparer and an element selector function.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Lookup`2"/> that contains values of type <typeparamref name="TElement"/> selected from the input sequence.
            </returns>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Linq.Lookup`2"/> from.</param><param name="keySelector">A function to extract a key from each element.</param><param name="elementSelector">A transform function to produce a result element value from each element.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare keys.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam><typeparam name="TElement">The type of the value returned by <paramref name="elementSelector"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer to compare values.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.
            </returns>
            <param name="source">The sequence to remove duplicate elements from.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.
            </returns>
            <param name="source">The sequence to remove duplicate elements from.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            
            <returns>
            The element at the specified position in the source sequence.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.</param><param name="index">The zero-based index of the element to retrieve.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than or equal to the number of elements in <paramref name="source"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
            <returns>
            default(<typeparamref name="TSource"/>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.</param><param name="index">The zero-based index of the element to retrieve.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            
            <returns>
            An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.
            </returns>
            <param name="start">The value of the first integer in the sequence.</param><param name="count">The number of sequential integers to generate.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.-or-<paramref name="start"/> + <paramref name="count"/> -1 is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains merged elements of two input sequences.
            </returns>
            <param name="first">The first sequence to merge.</param><param name="second">The second sequence to merge.</param><param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param><typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam><typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam><typeparam name="TResult">The type of the elements of the result sequence.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.</param><param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.</param><typeparam name="TSource">The type of the elements of the input sequences.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.</param><param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.</param><param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param><typeparam name="TSource">The type of the elements of the input sequences.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set intersection of two sequences by using the default equality comparer to compare values.
            </summary>
            
            <returns>
            A sequence that contains the elements that form the set intersection of two sequences.
            </returns>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in <paramref name="second"/> will be returned.</param><param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in the first sequence will be returned.</param><typeparam name="TSource">The type of the elements of the input sequences.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            
            <returns>
            A sequence that contains the elements that form the set intersection of two sequences.
            </returns>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in <paramref name="second"/> will be returned.</param><param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in the first sequence will be returned.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param><typeparam name="TSource">The type of the elements of the input sequences.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            
            <returns>
            The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param><param name="selector">A transform function to apply to each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception><exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            
            <returns>
            The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal"/> values to calculate the average of.</param><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            
            <returns>
            The average of the sequence of values.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Decimal"/> values to calculate the average of.</param><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            
            <returns>
            The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
            </returns>
            <param name="source">A sequence of values to calculate the average of.</param><param name="selector">A transform function to apply to each element.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception><exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            
            <returns>
            The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal"/> values to calculate the average of.</param><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            
            <returns>
            The average of the sequence of values.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Decimal"/> values to calculate the average of.</param><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal"/> values.
            </summary>
            
            <returns>
            The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
            </returns>
            <param name="source">A sequence of nullable <see cref="T:System.Decimal"/> values to calculate the average of.</param><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal"/> values.
            </summary>
            
            <returns>
            The average of the sequence of values.
            </returns>
            <param name="source">A sequence of <see cref="T:System.Decimal"/> values to calculate the average of.</param><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            
            <returns>
            The number of elements in the input sequence.
            </returns>
            <param name="source">A sequence that contains elements to be counted.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a number that represents how many elements in the specified sequence satisfy a condition.
            </summary>
            
            <returns>
            A number that represents how many elements in the sequence satisfy the condition in the predicate function.
            </returns>
            <param name="source">A sequence that contains elements to be tested and counted.</param><param name="predicate">A function to test each element for a condition.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception><exception cref="T:System.OverflowException">The number of elements in <paramref name="source"/> is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:System.Int64"/> that represents the total number of elements in a sequence.
            </summary>
            
            <returns>
            The number of elements in the source sequence.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to be counted.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception><exception cref="T:System.OverflowException">The number of elements exceeds <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns an <see cref="T:System.Int64"/> that represents how many elements in a sequence satisfy a condition.
            </summary>
            
            <returns>
            A number that represents how many elements in the sequence satisfy the condition in the predicate function.
            </returns>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to be counted.</param><param name="predicate">A function to test each element for a condition.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception><exception cref="T:System.OverflowException">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            
            <returns>
            true if the source sequence contains an element that has the specified value; otherwise, false.
            </returns>
            <param name="source">A sequence in which to locate a value.</param><param name="value">The value to locate in the sequence.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            
            <returns>
            true if the source sequence contains an element that has the specified value; otherwise, false.
            </returns>
            <param name="source">A sequence in which to locate a value.</param><param name="value">The value to locate in the sequence.</param><param name="comparer">An equality comparer to compare values.</param><typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set difference of two sequences by using the default equality comparer to compare values.
            </summary>
            
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not also in <paramref name="second"/> will be returned.</param><param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param><typeparam name="TSource">The type of the elements of the input sequences.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not also in <paramref name="second"/> will be returned.</param><param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param><param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param><typeparam name="TSource">The type of the elements of the input sequences.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"/> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.
            </summary>
            
            <returns>
            An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda"/> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"/> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"/> properties set to the specified values.
            </returns>
            <param name="delegateType">A <see cref="T:System.Type"/> that represents a delegate signature for the lambda.</param><param name="body">An <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"/> property equal to.</param><param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression"/> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"/> collection.</param><exception cref="T:System.ArgumentNullException"><paramref name="delegateType"/> or <paramref name="body"/> is null.-or-One or more elements in <paramref name="parameters"/> are null.</exception><exception cref="T:System.ArgumentException"><paramref name="delegateType"/> does not represent a delegate type.-or-<paramref name="body"/>.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType"/>.-or-<paramref name="parameters"/> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType"/>.-or-The <see cref="P:System.Linq.Expressions.Expression.Type"/> property of an element of <paramref name="parameters"/> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType"/>.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            Creates a LambdaExpression by first constructing a delegate type.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.LambdaExpression"/> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType"/> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"/> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"/> properties set to the specified values.
            </returns>
            <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type"/> representing the delegate signature for the lambda.</param><param name="body">An <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body"/> property equal to. </param><param name="name">The name for the lambda. Used for emitting debug information.</param><param name="tailCall">A <see cref="T:System.Boolean"/> that indicates if tail call optimization will be applied when compiling the created expression. </param><param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains <see cref="T:System.Linq.Expressions.ParameterExpression"/> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters"/> collection. </param>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.IndexExpression"/> representing the access to an indexed property.
            </summary>
            
            <returns>
            The created <see cref="T:System.Linq.Expressions.IndexExpression"/>.
            </returns>
            <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param><param name="propertyName">The name of the indexer.</param><param name="args">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that are used to index the property.</param>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.IndexExpression"/> representing the access to an indexed property.
            </summary>
            
            <returns>
            The created <see cref="T:System.Linq.Expressions.IndexExpression"/>.
            </returns>
            <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param><param name="indexer">The <see cref="T:System.Reflection.PropertyInfo"/> that represents the property to index.</param><param name="args">An array of <see cref="T:System.Linq.Expressions.Expression"/> objects that are used to index the property.</param>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.IndexExpression"/> representing the access to an indexed property.
            </summary>
            
            <returns>
            The created <see cref="T:System.Linq.Expressions.IndexExpression"/>.
            </returns>
            <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param><param name="indexer">The <see cref="T:System.Reflection.PropertyInfo"/> that represents the property to index.</param><param name="args">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.Expressions.Expression"/> objects that are used to index the property.</param>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberExpression"/> that represents accessing a property by using a property accessor method.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.MemberExpression"/> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"/>, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/> property set to <paramref name="expression"/> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member"/> property set to the <see cref="T:System.Reflection.PropertyInfo"/> that represents the property accessed in <paramref name="propertyAccessor"/>.
            </returns>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/> property equal to. This can be null for static properties.</param><param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo"/> that represents a property accessor method.</param><exception cref="T:System.ArgumentNullException"><paramref name="propertyAccessor"/> is null.-or-The method that <paramref name="propertyAccessor"/> represents is not static (Shared in Visual Basic) and <paramref name="expression"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="expression"/>.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor"/>.-or-The method that <paramref name="propertyAccessor"/> represents is not a property accessor method.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberExpression"/> that represents accessing a property or field.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.MemberExpression"/> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"/>, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/> property set to <paramref name="expression"/>, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member"/> property set to the <see cref="T:System.Reflection.PropertyInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> that represents the property or field denoted by <paramref name="propertyOrFieldName"/>.
            </returns>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> whose <see cref="P:System.Linq.Expressions.Expression.Type"/> contains a property or field named <paramref name="propertyOrFieldName"/>. This can be null for static members.</param><param name="propertyOrFieldName">The name of a property or field to be accessed.</param><exception cref="T:System.ArgumentNullException"><paramref name="expression"/> or <paramref name="propertyOrFieldName"/> is null.</exception><exception cref="T:System.ArgumentException">No property or field named <paramref name="propertyOrFieldName"/> is defined in <paramref name="expression"/>.Type or its base types.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberExpression"/> that represents accessing a field.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.MemberExpression"/> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"/> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/> and <see cref="P:System.Linq.Expressions.MemberExpression.Member"/> properties set to the specified values.
            </returns>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/> property equal to. For static (Shared in Visual Basic), <paramref name="expression"/> must be null.</param><param name="field">The <see cref="T:System.Reflection.FieldInfo"/> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member"/> property equal to.</param><exception cref="T:System.ArgumentNullException"><paramref name="field"/> is null.-or-The field represented by <paramref name="field"/> is not static (Shared in Visual Basic) and <paramref name="expression"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="expression"/>.Type is not assignable to the declaring type of the field represented by <paramref name="field"/>.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberExpression"/> that represents accessing a field given the name of the field.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.MemberExpression"/> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess"/>, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression"/> property set to <paramref name="expression"/>, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member"/> property set to the <see cref="T:System.Reflection.FieldInfo"/> that represents the field denoted by <paramref name="fieldName"/>.
            </returns>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> whose <see cref="P:System.Linq.Expressions.Expression.Type"/> contains a field named <paramref name="fieldName"/>. This can be null for static fields.</param><param name="fieldName">The name of a field to be accessed.</param><exception cref="T:System.ArgumentNullException"><paramref name="expression"/> or <paramref name="fieldName"/> is null.</exception><exception cref="T:System.ArgumentException">No field named <paramref name="fieldName"/> is defined in <paramref name="expression"/>.Type or its base types.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.MemberExpression"/> that represents accessing a field.
            </summary>
            
            <returns>
            The created <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </returns>
            <param name="expression">The containing object of the field. This can be null for static fields.</param><param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type"/> that contains the field.</param><param name="fieldName">The field to be accessed.</param>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"/> that represents a type conversion operation.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.UnaryExpression"/> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert"/> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"/> and <see cref="P:System.Linq.Expressions.Expression.Type"/> properties set to the specified values.
            </returns>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"/> property equal to.</param><param name="type">A <see cref="T:System.Type"/> to set the <see cref="P:System.Linq.Expressions.Expression.Type"/> property equal to.</param><exception cref="T:System.ArgumentNullException"><paramref name="expression"/> or <paramref name="type"/> is null.</exception><exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression"/>.Type and <paramref name="type"/>.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"/> that represents a conversion operation for which the implementing method is specified.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.UnaryExpression"/> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert"/> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"/>, <see cref="P:System.Linq.Expressions.Expression.Type"/>, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method"/> properties set to the specified values.
            </returns>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand"/> property equal to.</param><param name="type">A <see cref="T:System.Type"/> to set the <see cref="P:System.Linq.Expressions.Expression.Type"/> property equal to.</param><param name="method">A <see cref="T:System.Reflection.MethodInfo"/> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method"/> property equal to.</param><exception cref="T:System.ArgumentNullException"><paramref name="expression"/> or <paramref name="type"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="method"/> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception><exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression"/>.Type and <paramref name="type"/>.-or-<paramref name="expression"/>.Type is not assignable to the argument type of the method represented by <paramref name="method"/>.-or-The return type of the method represented by <paramref name="method"/> is not assignable to <paramref name="type"/>.-or-<paramref name="expression"/>.Type or <paramref name="type"/> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method"/>.</exception><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method"/> description was found.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"/> that represents an arithmetic addition operation that does not have overflow checking.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.BinaryExpression"/> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add"/> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/> properties set to the specified values.
            </returns>
            <param name="left">A <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/> property equal to.</param><param name="right">A <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/> property equal to.</param><exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception><exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left"/>.Type and <paramref name="right"/>.Type.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <summary>
            Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"/> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.
            </summary>
            
            <returns>
            A <see cref="T:System.Linq.Expressions.BinaryExpression"/> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType"/> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add"/> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/>, <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method"/> properties set to the specified values.
            </returns>
            <param name="left">A <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left"/> property equal to.</param><param name="right">A <see cref="T:System.Linq.Expressions.Expression"/> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right"/> property equal to.</param><param name="method">A <see cref="T:System.Reflection.MethodInfo"/> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method"/> property equal to.</param><exception cref="T:System.ArgumentNullException"><paramref name="left"/> or <paramref name="right"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="method"/> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception><exception cref="T:System.InvalidOperationException"><paramref name="method"/> is null and the addition operator is not defined for <paramref name="left"/>.Type and <paramref name="right"/>.Type.</exception>
        </member>
        <member name="M:System.Linq.Expressions.Expression`1.Compile">
            <summary>
            Produces a delegate that represents the lambda expression.
            </summary>
            
            <returns>
            A <see cref="T:System.Delegate"/> that contains the compiled version of the lambda expression.
            </returns>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionType">
            <summary>
            Describes the node types for the nodes of an expression tree.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
            <summary>
            Produces a delegate that represents the lambda expression.
            </summary>
            
            <returns>
            A <see cref="T:System.Delegate"/> that contains the compiled version of the lambda expression.
            </returns>
        </member>
        <member name="T:System.Linq.IGrouping`2">
            <summary>
            Represents a collection of objects that have a common key.
            </summary>
            <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2"/>.This type
            parameter is covariant. That is, you can use either the type you specified or any type that is more 
            derived. For more information about covariance and contravariance, see Covariance and Contravariance 
            in Generics.</typeparam>
            <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
        </member>
        <member name="P:System.Linq.IGrouping`2.Key">
            <summary>
            Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            
            <returns>
            The key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </returns>
        </member>
        <member name="T:System.Linq.ILookup`2">
            <summary>
            Defines an indexer, size property, and Boolean search method for data structures that map keys to <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequences of values.
            </summary>
            <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.ILookup`2"/>.</typeparam><typeparam name="TElement">The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequences that make up the values in the <see cref="T:System.Linq.ILookup`2"/>.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Linq.ILookup`2.Count">
            <summary>
            Gets the number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2"/>.
            </summary>
            
            <returns>
            The number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2"/>.
            </returns>
        </member>
        <member name="P:System.Linq.ILookup`2.Item(`0)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of values indexed by a specified key.
            </summary>
            
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of values indexed by the specified key.
            </returns>
            <param name="key">The key of the desired sequence of values.</param>
        </member>
        <member name="M:System.Linq.ILookup`2.Contains(`0)">
            <summary>
            Determines whether a specified key exists in the <see cref="T:System.Linq.ILookup`2"/>.
            </summary>
            
            <returns>
            true if <paramref name="key"/> is in the <see cref="T:System.Linq.ILookup`2"/>; otherwise, false.
            </returns>
            <param name="key">The key to search for in the <see cref="T:System.Linq.ILookup`2"/>.</param>
        </member>
        <member name="T:System.Linq.IOrderedEnumerable`1">
            <summary>
            Represents a sorted sequence.
            </summary>
            <typeparam name="TElement">The type of the elements of the sequence.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an <see cref="T:System.Linq.IOrderedEnumerable`1"/> according to a key.
            </summary>
            
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <param name="keySelector">The <see cref="T:System.Func`2"/> used to extract the key for each element.</param><param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare keys for placement in the returned sequence.</param><param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.</param><typeparam name="TKey">The type of the key produced by <paramref name="keySelector"/>.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="F:System.Math.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
            </summary>
        </member>
        <member name="F:System.Math.E">
            <summary>
            Represents the natural logarithmic base, specified by the constant, e.
            </summary>
        </member>
        <member name="M:System.Math.Acos(System.Double)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            
            <returns>
            An angle, θ, measured in radians, such that 0≤θ≤π-or- <see cref="F:System.Double.NaN"/> if <paramref name="d"/> &lt; -1 or <paramref name="d"/> &gt; 1 or <paramref name="d"/> equals <see cref="F:System.Double.NaN"/>.
            </returns>
            <param name="d">A number representing a cosine, where <paramref name="d"/> must be greater than or equal to -1, but less than or equal to 1. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Asin(System.Double)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            
            <returns>
            An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 -or- <see cref="F:System.Double.NaN"/> if <paramref name="d"/> &lt; -1 or <paramref name="d"/> &gt; 1 or <paramref name="d"/> equals <see cref="F:System.Double.NaN"/>.
            </returns>
            <param name="d">A number representing a sine, where <paramref name="d"/> must be greater than or equal to -1, but less than or equal to 1. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Atan(System.Double)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            
            <returns>
            An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.-or- <see cref="F:System.Double.NaN"/> if <paramref name="d"/> equals <see cref="F:System.Double.NaN"/>, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d"/> equals <see cref="F:System.Double.NegativeInfinity"/>, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d"/> equals <see cref="F:System.Double.PositiveInfinity"/>.
            </returns>
            <param name="d">A number representing a tangent. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Atan2(System.Double,System.Double)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            
            <returns>
            An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y"/> / <paramref name="x"/>, where (<paramref name="x"/>, <paramref name="y"/>) is a point in the Cartesian plane. Observe the following: For (<paramref name="x"/>, <paramref name="y"/>) in quadrant 1, 0 &lt; θ &lt; π/2.For (<paramref name="x"/>, <paramref name="y"/>) in quadrant 2, π/2 &lt; θ≤π.For (<paramref name="x"/>, <paramref name="y"/>) in quadrant 3, -π &lt; θ &lt; -π/2.For (<paramref name="x"/>, <paramref name="y"/>) in quadrant 4, -π/2 &lt; θ &lt; 0.For points on the boundaries of the quadrants, the return value is the following:If y is 0 and x is not negative, θ = 0.If y is 0 and x is negative, θ = π.If y is positive and x is 0, θ = π/2.If y is negative and x is 0, θ = -π/2.If <paramref name="x"/> or <paramref name="y"/> is <see cref="F:System.Double.NaN"/>, or if <paramref name="x"/> and <paramref name="y"/> are either <see cref="F:System.Double.PositiveInfinity"/> or <see cref="F:System.Double.NegativeInfinity"/>, the method returns <see cref="F:System.Double.NaN"/>.
            </returns>
            <param name="y">The y coordinate of a point. </param><param name="x">The x coordinate of a point. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Ceiling(System.Decimal)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified decimal number.
            </summary>
            
            <returns>
            The smallest integral value that is greater than or equal to <paramref name="d"/>. Note that this method returns a <see cref="T:System.Decimal"/> instead of an integral type.
            </returns>
            <param name="d">A decimal number. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Ceiling(System.Double)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.
            </summary>
            
            <returns>
            The smallest integral value that is greater than or equal to <paramref name="a"/>. If <paramref name="a"/> is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned. Note that this method returns a <see cref="T:System.Double"/> instead of an integral type.
            </returns>
            <param name="a">A double-precision floating-point number. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            
            <returns>
            The cosine of <paramref name="d"/>. If <paramref name="d"/> is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.
            </returns>
            <param name="d">An angle, measured in radians. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Cosh(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            
            <returns>
            The hyperbolic cosine of <paramref name="value"/>. If <paramref name="value"/> is equal to <see cref="F:System.Double.NegativeInfinity"/> or <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.PositiveInfinity"/> is returned. If <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.
            </returns>
            <param name="value">An angle, measured in radians. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Floor(System.Decimal)">
            <summary>
            Returns the largest integer less than or equal to the specified decimal number.
            </summary>
            
            <returns>
            The largest integer less than or equal to <paramref name="d"/>.
            </returns>
            <param name="d">A decimal number. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Floor(System.Double)">
            <summary>
            Returns the largest integer less than or equal to the specified double-precision floating-point number.
            </summary>
            
            <returns>
            The largest integer less than or equal to <paramref name="d"/>. If <paramref name="d"/> is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, that value is returned.
            </returns>
            <param name="d">A double-precision floating-point number. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Sin(System.Double)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            
            <returns>
            The sine of <paramref name="a"/>. If <paramref name="a"/> is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.
            </returns>
            <param name="a">An angle, measured in radians. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Tan(System.Double)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            
            <returns>
            The tangent of <paramref name="a"/>. If <paramref name="a"/> is equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or <see cref="F:System.Double.PositiveInfinity"/>, this method returns <see cref="F:System.Double.NaN"/>.
            </returns>
            <param name="a">An angle, measured in radians. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Sinh(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            
            <returns>
            The hyperbolic sine of <paramref name="value"/>. If <paramref name="value"/> is equal to <see cref="F:System.Double.NegativeInfinity"/>, <see cref="F:System.Double.PositiveInfinity"/>, or <see cref="F:System.Double.NaN"/>, this method returns a <see cref="T:System.Double"/> equal to <paramref name="value"/>.
            </returns>
            <param name="value">An angle, measured in radians. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Tanh(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            
            <returns>
            The hyperbolic tangent of <paramref name="value"/>. If <paramref name="value"/> is equal to <see cref="F:System.Double.NegativeInfinity"/>, this method returns -1. If value is equal to <see cref="F:System.Double.PositiveInfinity"/>, this method returns 1. If <paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>, this method returns <see cref="F:System.Double.NaN"/>.
            </returns>
            <param name="value">An angle, measured in radians. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Round(System.Double)">
            <summary>
            Rounds a double-precision floating-point value to the nearest integral value.
            </summary>
            
            <returns>
            The integer nearest <paramref name="a"/>. If the fractional component of <paramref name="a"/> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <see cref="T:System.Double"/> instead of an integral type.
            </returns>
            <param name="a">A double-precision floating-point number to be rounded. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Sqrt(System.Double)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            
            <returns>
            One of the values in the following table.
            <paramref name="d" /> parameter Return value Zero, or positive The positive square root of <paramref name="d" />.
            Negative <see cref="F:System.Double.NaN" />Equals <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />Equals <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" />
            </returns>
            <param name="d">The number whose square root is to be found. </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Round(System.Double,System.Int32)">
            <summary>
            Rounds a double-precision floating-point value to a specified number of fractional digits.
            </summary>
            
            <returns>
            The number nearest to <paramref name="value"/> that contains a number of fractional digits equal to <paramref name="digits"/>.
            </returns>
            <param name="value">A double-precision floating-point number to be rounded. </param><param name="digits">The number of fractional digits in the return value. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits"/> is less than 0 or greater than 15. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Abs(System.Single)">
            <summary>
            Returns the absolute value of a single-precision floating-point number.
            </summary>
            
            <returns>
            A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue"/>.
            </returns>
            <param name="value">A number that is greater than or equal to <see cref="F:System.Single.MinValue"/>, but less than or equal to <see cref="F:System.Single.MaxValue"/>.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Abs(System.Double)">
            <summary>
            Returns the absolute value of a double-precision floating-point number.
            </summary>
            
            <returns>
            A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue"/>.
            </returns>
            <param name="value">A number that is greater than or equal to <see cref="F:System.Double.MinValue"/>, but less than or equal to <see cref="F:System.Double.MaxValue"/>.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Abs(System.Int64)">
            <summary>
            Returns the absolute value of an integer.
            </summary>
            
            <returns>
            An integer number, x, such that 0 ≤ x ≤<see cref="F:System.Integer.MaxValue"/>.
            </returns>
            <param name="value">A number that is greater than or equal to <see cref="F:System.Integer.MinValue"/>, but less than or equal to <see cref="F:System.Integer.MaxValue"/>.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Abs(System.Int32)">
            <summary>
            Returns the absolute value of an integer.
            </summary>
            
            <returns>
            An integer number, x, such that 0 ≤ x ≤<see cref="F:System.Integer.MaxValue"/>.
            </returns>
            <param name="value">A number that is greater than or equal to <see cref="F:System.Integer.MinValue"/>, but less than or equal to <see cref="F:System.Integer.MaxValue"/>.</param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Sign(System.Double)">
            <summary>Returns a value indicating the sign of a double-precision floating-point number.</summary>
            <returns>A number that indicates the sign of <paramref name="value" />, as shown in the following table.Return value Meaning -1 <paramref name="value" /> is less than zero. 0 <paramref name="value" /> is equal to zero. 1 <paramref name="value" /> is greater than zero. </returns>
            <param name="value">A signed number.</param>
            <exception cref="T:System.ArithmeticException"><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        </member>
        <member name="M:System.Math.Max(System.SByte,System.SByte)">
            <summary>
            Returns the larger of two 8-bit signed integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two 8-bit signed integers to compare. </param><param name="val2">The second of two 8-bit signed integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.Byte,System.Byte)">
            <summary>
            Returns the larger of two 8-bit unsigned integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two 8-bit unsigned integers to compare. </param><param name="val2">The second of two 8-bit unsigned integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.Int16,System.Int16)">
            <summary>
            Returns the larger of two 16-bit signed integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two 16-bit signed integers to compare. </param><param name="val2">The second of two 16-bit signed integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
            <summary>
            Returns the larger of two 16-bit unsigned integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two 16-bit unsigned integers to compare. </param><param name="val2">The second of two 16-bit unsigned integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.Int32,System.Int32)">
            <summary>
            Returns the larger of two 32-bit signed integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two 32-bit signed integers to compare. </param><param name="val2">The second of two 32-bit signed integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
            <summary>
            Returns the larger of two 32-bit unsigned integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two 32-bit unsigned integers to compare. </param><param name="val2">The second of two 32-bit unsigned integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.Int64,System.Int64)">
            <summary>
            Returns the larger of two 64-bit signed integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two 64-bit signed integers to compare. </param><param name="val2">The second of two 64-bit signed integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
            <summary>
            Returns the larger of two 64-bit unsigned integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two 64-bit unsigned integers to compare. </param><param name="val2">The second of two 64-bit unsigned integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
            <summary>
            Returns the larger of two decimal numbers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger.
            </returns>
            <param name="val1">The first of two decimal numbers to compare. </param><param name="val2">The second of two decimal numbers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.Single,System.Single)">
            <summary>
            Returns the larger of two single-precision floating-point numbers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger. If <paramref name="val1"/>, or <paramref name="val2"/>, or both <paramref name="val1"/> and <paramref name="val2"/> are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.
            </returns>
            <param name="val1">The first of two single-precision floating-point numbers to compare. </param><param name="val2">The second of two single-precision floating-point numbers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Max(System.Double,System.Double)">
            <summary>
            Returns the larger of two double-precision floating-point numbers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is larger. If <paramref name="val1"/>, <paramref name="val2"/>, or both <paramref name="val1"/> and <paramref name="val2"/> are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.
            </returns>
            <param name="val1">The first of two double-precision floating-point numbers to compare. </param><param name="val2">The second of two double-precision floating-point numbers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.SByte,System.SByte)">
            <summary>
            Returns the smaller of two 8-bit signed integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two 8-bit signed integers to compare. </param><param name="val2">The second of two 8-bit signed integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.Byte,System.Byte)">
            <summary>
            Returns the smaller of two 8-bit unsigned integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two 8-bit unsigned integers to compare. </param><param name="val2">The second of two 8-bit unsigned integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.Int16,System.Int16)">
            <summary>
            Returns the smaller of two 16-bit signed integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two 16-bit signed integers to compare. </param><param name="val2">The second of two 16-bit signed integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
            <summary>
            Returns the smaller of two 16-bit unsigned integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two 16-bit unsigned integers to compare. </param><param name="val2">The second of two 16-bit unsigned integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smaller of two 32-bit signed integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two 32-bit signed integers to compare. </param><param name="val2">The second of two 32-bit signed integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
            <summary>
            Returns the smaller of two 32-bit unsigned integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two 32-bit unsigned integers to compare. </param><param name="val2">The second of two 32-bit unsigned integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.Int64,System.Int64)">
            <summary>
            Returns the smaller of two 64-bit signed integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two 64-bit signed integers to compare. </param><param name="val2">The second of two 64-bit signed integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
            <summary>
            Returns the smaller of two 64-bit unsigned integers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two 64-bit unsigned integers to compare. </param><param name="val2">The second of two 64-bit unsigned integers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
            <summary>
            Returns the smaller of two decimal numbers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller.
            </returns>
            <param name="val1">The first of two decimal numbers to compare. </param><param name="val2">The second of two decimal numbers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two single-precision floating-point numbers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller. If <paramref name="val1"/>, <paramref name="val2"/>, or both <paramref name="val1"/> and <paramref name="val2"/> are equal to <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NaN"/> is returned.
            </returns>
            <param name="val1">The first of two single-precision floating-point numbers to compare. </param><param name="val2">The second of two single-precision floating-point numbers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Math.Min(System.Double,System.Double)">
            <summary>
            Returns the smaller of two double-precision floating-point numbers.
            </summary>
            
            <returns>
            Parameter <paramref name="val1"/> or <paramref name="val2"/>, whichever is smaller. If <paramref name="val1"/>, <paramref name="val2"/>, or both <paramref name="val1"/> and <paramref name="val2"/> are equal to <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NaN"/> is returned.
            </returns>
            <param name="val1">The first of two double-precision floating-point numbers to compare. </param><param name="val2">The second of two double-precision floating-point numbers to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="T:System.Activator">
            <summary>
            Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            
            <returns>
            A reference to the newly created object.
            </returns>
            <param name="type">The type of object to create. </param><param name="bindingAttr">A combination of zero or more bit flags that affect the search for the <paramref name="type"/> constructor.
            If <paramref name="bindingAttr"/> is zero, a case-sensitive search for public constructors is conducted. </param><param name="binder">An object that uses <paramref name="bindingAttr"/> and <paramref name="args"/> to seek and identify the <paramref name="type"/> constructor.
            If <paramref name="binder"/> is null, the default binder is used. </param>
            <param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args"/> is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. </param>
            <param name="culture">Culture-specific information that governs the coercion of <paramref name="args"/> to the formal types declared for the <paramref name="type"/> constructor. If <paramref name="culture"/> is null, the <see cref="T:System.Globalization.CultureInfo"/> for the current thread is used. </param>
        </member>
        <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            
            <returns>
            A reference to the newly created object.
            </returns>
            <param name="type">The type of object to create. </param><param name="args">An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If <paramref name="args"/> is an empty array or null, the constructor that takes no parameters (the default constructor) is invoked. </param>
        </member>
        <member name="M:System.Activator.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the specified type using that type's default constructor.
            </summary>
            
            <returns>
            A reference to the newly created object.
            </returns>
            <param name="type">The type of object to create.</param>
        </member>
        <member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
            <summary>
            Creates an instance of the specified type using that type's default constructor.
            </summary>
            
            <returns>
            A reference to the newly created object.
            </returns>
            <param name="type">The type of object to create. </param><param name="nonPublic">true if a public or nonpublic default constructor can match; false if only a public default constructor can match. </param>
        </member>
        <member name="M:System.Activator.CreateInstance``1">
            <summary>
            Creates an instance of the type designated by the specified generic type parameter, using the parameterless constructor.
            </summary>
            
            <returns>
            A reference to the newly created object.
            </returns>
            <typeparam name="T">The type to create.</typeparam><exception cref="T:System.MissingMethodException">The type that is specified for <typeparamref name="T"/> does not have a parameterless constructor.</exception>
        </member>
        <member name="T:System.Reflection.Assembly">
            <summary>
            Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.
            </summary>
        </member>
        <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
            <summary>Returns the names of all the resources in this assembly.</summary>
            <returns>An array that contains the names of all the resources.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
            <summary>Loads the specified manifest resource from this assembly.</summary>
            <returns>The manifest resource; or null if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
        </member>
        <member name="P:System.Reflection.Assembly.CodeBase">
            <summary>
            Gets the location of the assembly as specified originally, for example, in an <see cref="T:System.Reflection.AssemblyName"/> object.
            </summary>
            
            <returns>
            The location of the assembly as specified originally.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="P:System.Reflection.Assembly.FullName">
            <summary>
            Gets the display name of the assembly.
            </summary>
            
            <returns>
            The display name of the assembly.
            </returns>
        </member>
        <member name="P:System.Reflection.Assembly.EntryPoint">
            <summary>
            Gets the entry point of this assembly.
            </summary>
            
            <returns>
            An object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), null is returned.
            </returns>
        </member>
        <member name="P:System.Reflection.Assembly.Location">
            <summary>
            Gets the path or UNC location of the loaded file that contains the manifest.
            </summary>
            
            <returns>
            The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <see cref="M:System.Reflection.Assembly.Load(System.Byte[])"/> method overload, the value returned is an empty string ("").
            </returns>
            <exception cref="T:System.NotSupportedException">The current assembly is a dynamic assembly, represented by an <see cref="T:System.Reflection.Emit.AssemblyBuilder"/> object. </exception><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
            <summary>
            Creates the name of a type qualified by the display name of its assembly.
            </summary>
            
            <returns>
            The full name of the type qualified by the display name of the assembly.
            </returns>
            <param name="assemblyName">The display name of an assembly. </param><param name="typeName">The full name of a type. </param>
        </member>
        <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
            <summary>
            Gets the currently loaded assembly in which the specified class is defined.
            </summary>
            
            <returns>
            The assembly in which the specified class is defined.
            </returns>
            <param name="type">An object representing a class in the assembly that will be returned. </param><exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null. </exception>
        </member>
        <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
            <summary>
            Gets the assembly that contains the code that is currently executing.
            </summary>
            
            <returns>
            The assembly that contains the code that is currently executing.
            </returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCallingAssembly">
            <summary>
            Returns the <see cref="T:System.Reflection.Assembly"/> of the method that invoked the currently executing method.
            </summary>
            
            <returns>
            The Assembly object of the method that invoked the currently executing method.
            </returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetEntryAssembly">
            <summary>
            Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)"/>.
            </summary>
            
            <returns>
            The assembly that is the process executable in the default application domain, or the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)"/>. Can return null when called from unmanaged code.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence"/></PermissionSet>
        </member>
        <member name="M:System.Reflection.Assembly.Load(System.String)">
            <summary>
            <summary>Loads an assembly given its module name from AppDomain cache or by calling <c>require(name)</c>.</summary>
            </summary>
            <param name="name">The name or path of the assembly.</param>
            <returns>The loaded assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetName">
            <summary>
            Gets an <see cref="T:System.Reflection.AssemblyName"/> for this assembly.
            </summary>
            
            <returns>
            An object that contains the fully parsed display name for this assembly.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
            <summary>
            Gets an <see cref="T:System.Reflection.AssemblyName"/> for this assembly, setting the codebase as specified by <paramref name="copiedName"/>.
            </summary>
            
            <returns>
            An object that contains the fully parsed display name for this assembly.
            </returns>
            <param name="copiedName">true to set the <see cref="P:System.Reflection.Assembly.CodeBase"/> to the location of the assembly after it was shadow copied; false to set <see cref="P:System.Reflection.Assembly.CodeBase"/> to the original location. </param><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:System.Reflection.Assembly.GetType(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> object with the specified name in the assembly instance.
            </summary>
            
            <returns>
            An object that represents the specified class, or null if the class is not found.
            </returns>
            <param name="name">The full name of the type. </param><exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="name"/> requires a dependent assembly that could not be found. </exception><exception cref="T:System.IO.FileLoadException"><paramref name="name"/> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="name"/> requires a dependent assembly that was not preloaded. </exception><exception cref="T:System.BadImageFormatException"><paramref name="name"/> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="name"/> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
        </member>
        <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Type"/> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.
            </summary>
            
            <returns>
            An object that represents the specified class.
            </returns>
            <param name="name">The full name of the type. </param><param name="throwOnError">true to throw an exception if the type is not found; false to return null. </param><exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid.-or- The length of <paramref name="name"/> exceeds 1024 characters. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><exception cref="T:System.TypeLoadException"><paramref name="throwOnError"/> is true, and the type cannot be found.</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="name"/> requires a dependent assembly that could not be found. </exception><exception cref="T:System.IO.FileLoadException"><paramref name="name"/> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="name"/> requires a dependent assembly that was not preloaded. </exception><exception cref="T:System.BadImageFormatException"><paramref name="name"/> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="name"/> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
        </member>
        <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Type"/> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.
            </summary>
            
            <returns>
            An object that represents the specified class.
            </returns>
            <param name="name">The full name of the type. </param><param name="throwOnError">true to throw an exception if the type is not found; false to return null. </param><param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param><exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid.-or- The length of <paramref name="name"/> exceeds 1024 characters. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><exception cref="T:System.TypeLoadException"><paramref name="throwOnError"/> is true, and the type cannot be found.</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="name"/> requires a dependent assembly that could not be found. </exception><exception cref="T:System.IO.FileLoadException"><paramref name="name"/> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="name"/> requires a dependent assembly that was not preloaded. </exception><exception cref="T:System.BadImageFormatException"><paramref name="name"/> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="name"/> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception>
        </member>
        <member name="M:System.Reflection.Assembly.GetTypes">
            <summary>
            Gets the types defined in this assembly.
            </summary>
            
            <returns>
            An array that contains all the types that are defined in this assembly.
            </returns>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">The assembly contains one or more types that cannot be loaded. The array returned by the <see cref="P:System.Reflection.ReflectionTypeLoadException.Types"/> property of this exception contains a <see cref="T:System.Type"/> object for each type that was loaded and null for each type that could not be loaded, while the <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions"/> property contains an exception for each type that could not be loaded.</exception>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
            <summary>
            Gets all the custom attributes for this assembly.
            </summary>
            
            <returns>
            An array that contains the custom attributes for this assembly.
            </returns>
            <param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly"/>. </param>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes for this assembly as specified by type.
            </summary>
            
            <returns>
            An array that contains the custom attributes for this assembly as specified by <paramref name="attributeType"/>.
            </returns>
            <param name="attributeType">The type for which the custom attributes are to be returned. </param><param name="inherit">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly"/>. </param><exception cref="T:System.ArgumentNullException"><paramref name="attributeType"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="attributeType"/> is not a runtime type. </exception>
        </member>
        <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
            <summary>
            Indicates whether or not a specified attribute has been applied to the assembly.
            </summary>
            
            <returns>
            true if the attribute has been applied to the assembly; otherwise, false.
            </returns>
            <param name="attributeType">The type of the attribute to be checked for this assembly. </param><param name="inherit">This argument is ignored for objects of this type. </param><exception cref="T:System.ArgumentNullException"><paramref name="attributeType"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="attributeType"/> uses an invalid type.</exception>
        </member>
        <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
            <summary>
            Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.
            </summary>
            
            <returns>
            An instance of the specified type created with the default constructor; or null if <paramref name="typeName"/> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags"/> set to Public or Instance.
            </returns>
            <param name="typeName">The <see cref="P:System.Type.FullName"/> of the type to locate. </param><exception cref="T:System.ArgumentException"><paramref name="typeName"/> is an empty string ("") or a string beginning with a null character.-or-The current assembly was loaded into the reflection-only context.</exception><exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> is null. </exception><exception cref="T:System.MissingMethodException">No matching constructor was found. </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="typeName"/> requires a dependent assembly that could not be found. </exception><exception cref="T:System.IO.FileLoadException"><paramref name="typeName"/> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName"/> requires a dependent assembly that was not preloaded. </exception><exception cref="T:System.BadImageFormatException"><paramref name="typeName"/> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName"/> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception><PermissionSet><IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess"/></PermissionSet>
        </member>
        <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)">
            <summary>
            Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.
            </summary>
            
            <returns>
            An instance of the specified type created with the default constructor; or null if <paramref name="typeName"/> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags"/> set to Public or Instance.
            </returns>
            <param name="typeName">The <see cref="P:System.Type.FullName"/> of the type to locate. </param><param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param><exception cref="T:System.ArgumentException"><paramref name="typeName"/> is an empty string ("") or a string beginning with a null character. -or-The current assembly was loaded into the reflection-only context.</exception><exception cref="T:System.MissingMethodException">No matching constructor was found. </exception><exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> is null. </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="typeName"/> requires a dependent assembly that could not be found. </exception><exception cref="T:System.IO.FileLoadException"><paramref name="typeName"/> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName"/> requires a dependent assembly that was not preloaded. </exception><exception cref="T:System.BadImageFormatException"><paramref name="typeName"/> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName"/> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception><PermissionSet><IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess"/></PermissionSet>
        </member>
        <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.
            </summary>
            
            <returns>
            An instance of the specified type, or null if <paramref name="typeName"/> is not found. The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.
            </returns>
            <param name="typeName">The <see cref="P:System.Type.FullName"/> of the type to locate. </param><param name="ignoreCase">true to ignore the case of the type name; otherwise, false. </param><param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <see cref="T:System.Reflection.BindingFlags"/>. </param><param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder"/> is null, the default binder is used. </param><param name="args">An array that contains the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <paramref name="args"/> must be an empty array or null. </param><param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.) </param><param name="activationAttributes">An array of one or more attributes that can participate in activation. Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute"/> object. The <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute"/> specifies the URL that is required to activate a remote object.  </param><exception cref="T:System.ArgumentException"><paramref name="typeName"/> is an empty string ("") or a string beginning with a null character. -or-The current assembly was loaded into the reflection-only context.</exception><exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> is null. </exception><exception cref="T:System.MissingMethodException">No matching constructor was found. </exception><exception cref="T:System.NotSupportedException">A non-empty activation attributes array is passed to a type that does not inherit from <see cref="T:System.MarshalByRefObject"/>. </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="typeName"/> requires a dependent assembly that could not be found. </exception><exception cref="T:System.IO.FileLoadException"><paramref name="typeName"/> requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and <paramref name="typeName"/> requires a dependent assembly that was not preloaded. </exception><exception cref="T:System.BadImageFormatException"><paramref name="typeName"/> requires a dependent assembly, but the file is not a valid assembly. -or-<paramref name="typeName"/> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</exception><PermissionSet><IPermission class="System.Security.Permissions.ReflectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="MemberAccess"/></PermissionSet>
        </member>
        <member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
            <returns>
            An array that contains the fully parsed display names of all the assemblies referenced by this assembly.
            </returns>
        </member>
        <member name="M:System.Reflection.Assembly.ToString">
            <summary>
            Returns the full name of the assembly, also known as the display name.
            </summary>
            
            <returns>
            The full name of the assembly, or the class name if the full name of the assembly cannot be determined.
            </returns>
        </member>
        <member name="T:System.Reflection.AssemblyCompanyAttribute">
            <summary>
            Defines a company name custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
            <summary>
            Gets company name information.
            </summary>
            
            <returns>
            A string containing the company name.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCompanyAttribute"/> class.
            </summary>
            <param name="company">The company name information. </param>
        </member>
        <member name="T:System.Reflection.AssemblyConfigurationAttribute">
            <summary>
            Specifies the build configuration, such as retail or debug, for an assembly.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
            <summary>
            Gets assembly configuration information.
            </summary>
            
            <returns>
            A string containing the assembly configuration information.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyConfigurationAttribute"/> class.
            </summary>
            <param name="configuration">The assembly configuration. </param>
        </member>
        <member name="T:System.Reflection.AssemblyCopyrightAttribute">
            <summary>
            Defines a copyright custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
            <summary>
            Gets copyright information.
            </summary>
            
            <returns>
            A string containing the copyright information.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCopyrightAttribute"/> class.
            </summary>
            <param name="copyright">The copyright information. </param>
        </member>
        <member name="T:System.Reflection.AssemblyCultureAttribute">
            <summary>
            Specifies which culture the assembly supports.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
            <summary>
            Gets the supported culture of the attributed assembly.
            </summary>
            
            <returns>
            A string containing the name of the supported culture.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyCultureAttribute"/> class with the culture supported by the assembly being attributed.
            </summary>
            <param name="culture">The culture supported by the attributed assembly. </param>
        </member>
        <member name="T:System.Reflection.AssemblyDescriptionAttribute">
            <summary>
            Provides a text description for an assembly.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
            <summary>
            Gets assembly description information.
            </summary>
            
            <returns>
            A string containing the assembly description.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyDescriptionAttribute"/> class.
            </summary>
            <param name="description">The assembly description. </param>
        </member>
        <member name="T:System.Reflection.AssemblyFileVersionAttribute">
            <summary>
            Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
            <summary>
            Gets the Win32 file version resource name.
            </summary>
            
            <returns>
            A string containing the file version resource name.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/> class, specifying the file version.
            </summary>
            <param name="version">The file version. </param><exception cref="T:System.ArgumentNullException"><paramref name="version"/> is null. </exception>
        </member>
        <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
            <summary>Gets version information.</summary>
            <returns>A string containing the version information.</returns>
        </member>
        <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> class.</summary>
            <param name="informationalVersion">The assembly version information. </param>
        </member>
        <member name="T:System.Reflection.AssemblyName">
            <summary>
            Describes an assembly's unique identity in full.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyName.Name">
            <summary>
            Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.
            </summary>
            
            <returns>
            The simple name of the assembly.
            </returns>
        </member>
        <member name="P:System.Reflection.AssemblyName.CultureInfo">
            <summary>
            Gets or sets the culture supported by the assembly.
            </summary>
            
            <returns>
            An object that represents the culture supported by the assembly.
            </returns>
        </member>
        <member name="P:System.Reflection.AssemblyName.CultureName">
            <summary>
            Gets or sets the name of the culture associated with the assembly.
            </summary>
            
            <returns>
            The culture name.
            </returns>
        </member>
        <member name="P:System.Reflection.AssemblyName.CodeBase">
            <summary>
            Gets or sets the location of the assembly as a URL.
            </summary>
            
            <returns>
            A string that is the URL location of the assembly.
            </returns>
        </member>
        <member name="P:System.Reflection.AssemblyName.FullName">
            <summary>
            Gets the full name of the assembly, also known as the display name.
            </summary>
            
            <returns>
            A string that is the full name of the assembly, also known as the display name.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName"/> class.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName"/> class with the specified display name.
            </summary>
            <param name="assemblyName">The display name of the assembly, as returned by the <see cref="P:System.Reflection.AssemblyName.FullName"/> property.</param><exception cref="T:System.ArgumentNullException"><paramref name="assemblyName"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="assemblyName"/> is a zero length string.</exception><exception cref="T:System.IO.FileLoadException">The referenced assembly could not be found, or could not be loaded.</exception>
        </member>
        <member name="M:System.Reflection.AssemblyName.ToString">
            <summary>
            Returns the full name of the assembly, also known as the display name.
            </summary>
            
            <returns>
            The full name of the assembly, or the class name if the full name cannot be determined.
            </returns>
        </member>
        <member name="T:System.Reflection.AssemblyProductAttribute">
            <summary>
            Defines a product name custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyProductAttribute.Product">
            <summary>
            Gets product name information.
            </summary>
            
            <returns>
            A string containing the product name.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyProductAttribute"/> class.
            </summary>
            <param name="product">The product name information. </param>
        </member>
        <member name="T:System.Reflection.AssemblyTitleAttribute">
            <summary>
            Specifies a description for an assembly.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
            <summary>
            Gets assembly title information.
            </summary>
            
            <returns>
            The assembly title.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTitleAttribute"/> class.
            </summary>
            <param name="title">The assembly title. </param>
        </member>
        <member name="T:System.Reflection.AssemblyTrademarkAttribute">
            <summary>
            Defines a trademark custom attribute for an assembly manifest.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
            <summary>
            Gets trademark information.
            </summary>
            
            <returns>
            A String containing trademark information.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.AssemblyTrademarkAttribute"/> class.
            </summary>
            <param name="trademark">The trademark information. </param>
        </member>
        <member name="T:System.Reflection.AssemblyVersionAttribute">
            <summary>
            Specifies the version of the assembly being attributed.
            </summary>
        </member>
        <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
            <summary>
            Gets the version number of the attributed assembly.
            </summary>
            
            <returns>
            A string containing the assembly version number.
            </returns>
        </member>
        <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyVersionAttribute class with the version number of the assembly being attributed.
            </summary>
            <param name="version">The version number of the attributed assembly. </param>
        </member>
        <member name="T:System.Reflection.BindingFlags">
            <summary>
            Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.
            </summary>
        </member>
        <member name="T:System.Reflection.CallingConventions">
            <summary>
            Defines the valid calling conventions for a method.
            </summary>
        </member>
        <member name="T:System.Reflection.ConstructorInfo">
            <summary>
            Discovers the attributes of a class constructor and provides access to constructor metadata.
            </summary>
        </member>
        <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
            <summary>
            Represents the name of the class constructor method as it is stored in metadata. This name is always ".ctor". This field is read-only.
            </summary>
        </member>
        <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
            <summary>
            Represents the name of the type constructor method as it is stored in metadata. This name is always ".cctor". This property is read-only.
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.MemberType">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is a constructor.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is a constructor.
            </returns>
        </member>
        <member name="M:System.Reflection.ConstructorInfo.#ctor(System.String,DuoCode.Runtime.JsFunction,System.Reflection.MethodAttributes,DuoCode.Runtime.JsArray{System.Reflection.ParameterInfo},DuoCode.Runtime.JsArray{System.Attribute})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.ConstructorInfo"/> class.
            </summary>
        </member>
        <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            When implemented in a derived class, invokes the constructor reflected by this ConstructorInfo with the specified arguments, under the constraints of the specified Binder.
            </summary>
            
            <returns>
            An instance of the class associated with the constructor.
            </returns>
            <param name="invokeAttr">One of the BindingFlags values that specifies the type of binding. </param><param name="binder">A Binder that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder"/> is null, then Binder.DefaultBinding is used. </param><param name="parameters">An array of type Object used to match the number, order and type of the parameters for this constructor, under the constraints of <paramref name="binder"/>. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo"/> for the current thread is used. </param><exception cref="T:System.ArgumentException">The <paramref name="parameters"/> array does not contain values that match the types accepted by this constructor, under the constraints of the <paramref name="binder"/>. </exception><exception cref="T:System.Reflection.TargetInvocationException">The invoked constructor throws an exception. </exception><exception cref="T:System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed. </exception><exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference"/>, <see cref="T:System.ArgIterator"/>, and <see cref="T:System.RuntimeArgumentHandle"/> types is not supported.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the necessary code access permissions.</exception><exception cref="T:System.MemberAccessException">The class is abstract.-or- The constructor is a class initializer. </exception><exception cref="T:System.MethodAccessException">The constructor is private or protected, and the caller lacks <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess"/>. </exception>
        </member>
        <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
            <summary>
            Invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used.
            </summary>
            
            <returns>
            An instance of the class associated with the constructor.
            </returns>
            <param name="parameters">An array of values that matches the number, order and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, then use either an array with zero elements or null, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param><exception cref="T:System.MemberAccessException">The class is abstract.-or- The constructor is a class initializer. </exception><exception cref="T:System.MethodAccessException">The constructor is private or protected, and the caller lacks <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess"/>. </exception><exception cref="T:System.ArgumentException">The <paramref name="parameters"/> array does not contain values that match the types accepted by this constructor. </exception><exception cref="T:System.Reflection.TargetInvocationException">The invoked constructor throws an exception. </exception><exception cref="T:System.Reflection.TargetParameterCountException">An incorrect number of parameters was passed. </exception><exception cref="T:System.NotSupportedException">Creation of <see cref="T:System.TypedReference"/>, <see cref="T:System.ArgIterator"/>, and <see cref="T:System.RuntimeArgumentHandle"/> types is not supported.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the necessary code access permission.</exception>
        </member>
        <member name="T:System.Reflection.EventInfo">
            <summary>
            Discovers the attributes of an event and provides access to event metadata.
            </summary>
        </member>
        <member name="P:System.Reflection.EventInfo.MemberType">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is an event.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is an event.
            </returns>
        </member>
        <member name="P:System.Reflection.EventInfo.AddMethod">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)"/> method of the event, including non-public methods.
            </summary>
            
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)"/> method.
            </returns>
        </member>
        <member name="P:System.Reflection.EventInfo.RemoveMethod">
            <summary>
            Gets the MethodInfo object for removing a method of the event, including non-public methods.
            </summary>
            
            <returns>
            The MethodInfo object for removing a method of the event.
            </returns>
        </member>
        <member name="P:System.Reflection.EventInfo.EventHandlerType">
            <summary>
            Gets the Type object of the underlying event-handler delegate associated with this event.
            </summary>
            
            <returns>
            A read-only Type object representing the delegate event handler.
            </returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
            <summary>
            When overridden in a derived class, retrieves the MethodInfo object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)"/> method of the event, specifying whether to return non-public methods.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MethodInfo"/> object representing the method used to add an event handler delegate to the event source.
            </returns>
            <param name="nonPublic">true if non-public methods can be returned; otherwise, false. </param><exception cref="T:System.MethodAccessException"><paramref name="nonPublic"/> is true, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
        </member>
        <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
            <summary>
            When overridden in a derived class, retrieves the MethodInfo object for removing a method of the event, specifying whether to return non-public methods.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MethodInfo"/> object representing the method used to remove an event handler delegate from the event source.
            </returns>
            <param name="nonPublic">true if non-public methods can be returned; otherwise, false. </param><exception cref="T:System.MethodAccessException"><paramref name="nonPublic"/> is true, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
        </member>
        <member name="M:System.Reflection.EventInfo.GetAddMethod">
            <summary>
            Returns the method used to add an event handler delegate to the event source.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MethodInfo"/> object representing the method used to add an event handler delegate to the event source.
            </returns>
        </member>
        <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
            <summary>
            Returns the method used to remove an event handler delegate from the event source.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MethodInfo"/> object representing the method used to remove an event handler delegate from the event source.
            </returns>
        </member>
        <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
            <summary>
            Adds an event handler to an event source.
            </summary>
            <param name="target">The event source. </param><param name="handler">Encapsulates a method or methods to be invoked when the event is raised by the target. </param><exception cref="T:System.InvalidOperationException">The event does not have a public add accessor.</exception><exception cref="T:System.ArgumentException">The handler that was passed in cannot be used. </exception><exception cref="T:System.MethodAccessException">The caller does not have access permission to the member. </exception><exception cref="T:System.Reflection.TargetException">The <paramref name="target"/> parameter is null and the event is not static.-or- The <see cref="T:System.Reflection.EventInfo"/> is not declared on the target. </exception>
        </member>
        <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
            <summary>
            Removes an event handler from an event source.
            </summary>
            <param name="target">The event source. </param><param name="handler">The delegate to be disassociated from the events raised by target. </param><exception cref="T:System.InvalidOperationException">The event does not have a public remove accessor. </exception><exception cref="T:System.ArgumentException">The handler that was passed in cannot be used. </exception><exception cref="T:System.Reflection.TargetException">The <paramref name="target"/> parameter is null and the event is not static.-or- The <see cref="T:System.Reflection.EventInfo"/> is not declared on the target. </exception><exception cref="T:System.MethodAccessException">The caller does not have access permission to the member. </exception>
        </member>
        <member name="T:System.Reflection.FieldAttributes">
            <summary>
            Specifies flags that describe the attributes of a field.
            </summary>
        </member>
        <member name="T:System.Reflection.FieldInfo">
            <summary>
            Discovers the attributes of a field and provides access to field metadata.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldInfo.MemberType">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is a field.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is a field.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.FieldType">
            <summary>
            Gets the type of this field object.
            </summary>
            
            <returns>
            The type of this field object.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.Attributes">
            <summary>
            Gets the attributes associated with this field.
            </summary>
            
            <returns>
            The FieldAttributes for this field.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsPublic">
            <summary>
            Gets a value indicating whether the field is public.
            </summary>
            
            <returns>
            true if this field is public; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsPrivate">
            <summary>
            Gets a value indicating whether the field is private.
            </summary>
            
            <returns>
            true if the field is private; otherwise; false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsFamily">
            <summary>
            Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Family"/>; that is, the field is visible only within its class and derived classes.
            </summary>
            
            <returns>
            true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Family"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsAssembly">
            <summary>
            Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.Assembly"/>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.
            </summary>
            
            <returns>
            true if the visibility of this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.Assembly"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
            <summary>
            Gets a value indicating whether the visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem"/>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.
            </summary>
            
            <returns>
            true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamANDAssem"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
            <summary>
            Gets a value indicating whether the potential visibility of this field is described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem"/>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.
            </summary>
            
            <returns>
            true if access to this field is exactly described by <see cref="F:System.Reflection.FieldAttributes.FamORAssem"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsStatic">
            <summary>
            Gets a value indicating whether the field is static.
            </summary>
            
            <returns>
            true if this field is static; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsInitOnly">
            <summary>
            Gets a value indicating whether the field can only be set in the body of the constructor.
            </summary>
            
            <returns>
            true if the field has the InitOnly attribute set; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsLiteral">
            <summary>
            Gets a value indicating whether the value is written at compile time and cannot be changed.
            </summary>
            
            <returns>
            true if the field has the Literal attribute set; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
            <summary>
            Gets a value indicating whether this field has the NotSerialized attribute.
            </summary>
            
            <returns>
            true if the field has the NotSerialized attribute set; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsSpecialName">
            <summary>
            Gets a value indicating whether the corresponding SpecialName attribute is set in the <see cref="T:System.Reflection.FieldAttributes"/> enumerator.
            </summary>
            
            <returns>
            true if the SpecialName attribute is set in <see cref="T:System.Reflection.FieldAttributes"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
            <summary>
            Gets a value indicating whether the corresponding PinvokeImpl attribute is set in <see cref="T:System.Reflection.FieldAttributes"/>.
            </summary>
            
            <returns>
            true if the PinvokeImpl attribute is set in <see cref="T:System.Reflection.FieldAttributes"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
            <summary>
            Gets an array of types that identify the required custom modifiers of the property.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Type"/> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst"/> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
            <summary>
            Gets an array of types that identify the optional custom modifiers of the field.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Type"/> objects that identify the optional custom modifiers of the current field, such as <see cref="T:System.Runtime.CompilerServices.IsConst"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns the value of a field supported by a given object.
            </summary>
            
            <returns>
            An object containing the value of the field reflected by this instance.
            </returns>
            <param name="obj">The object whose field value will be returned. </param><exception cref="T:System.Reflection.TargetException">The field is non-static and <paramref name="obj"/> is null. </exception><exception cref="T:System.NotSupportedException">A field is marked literal, but the field does not have one of the accepted literal types. </exception><exception cref="T:System.FieldAccessException">The caller does not have permission to access this field. </exception><exception cref="T:System.ArgumentException">The method is neither declared nor inherited by the class of <paramref name="obj"/>. </exception>
        </member>
        <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, sets the value of the field supported by the given object.
            </summary>
            <param name="obj">The object whose field value will be set. </param><param name="value">The value to assign to the field. </param><param name="invokeAttr">A field of Binder that specifies the type of binding that is desired (for example, Binder.CreateInstance or Binder.ExactBinding). </param><param name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <paramref name="binder"/> is null, then Binder.DefaultBinding is used. </param><param name="culture">The software preferences of a particular culture. </param><exception cref="T:System.FieldAccessException">The caller does not have permission to access this field. </exception><exception cref="T:System.Reflection.TargetException">The <paramref name="obj"/> parameter is null and the field is an instance field. </exception><exception cref="T:System.ArgumentException">The field does not exist on the object.-or- The <paramref name="value"/> parameter cannot be converted and stored in the field. </exception>
        </member>
        <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
            <summary>
            Returns a literal value associated with the field by a compiler.
            </summary>
            
            <returns>
            An <see cref="T:System.Object"/> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is null.
            </returns>
            <exception cref="T:System.InvalidOperationException">The Constant table in unmanaged metadata does not contain a constant value for the current field.</exception><exception cref="T:System.FormatException">The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures. </exception><exception cref="T:System.NotSupportedException">The constant value for the field is not set. </exception>
        </member>
        <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <param name="obj">The object whose field value will be set. </param><param name="value">The value to assign to the field. </param><exception cref="T:System.FieldAccessException">The caller does not have permission to access this field. </exception><exception cref="T:System.Reflection.TargetException">The <paramref name="obj"/> parameter is null and the field is an instance field. </exception><exception cref="T:System.ArgumentException">The field does not exist on the object.-or- The <paramref name="value"/> parameter cannot be converted and stored in the field. </exception>
        </member>
        <member name="T:System.Reflection.ICustomAttributeProvider">
            <summary>
            Provides custom attributes for reflection objects that support them.
            </summary>
        </member>
        <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type.
            </summary>
            
            <returns>
            An array of Objects representing custom attributes, or an empty array.
            </returns>
            <param name="attributeType">The type of the custom attributes. </param><param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param><exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded. </exception><exception cref="T:System.Reflection.ArgumentNullException"><paramref name="attributeType"/> is null.</exception>
        </member>
        <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes.
            </summary>
            
            <returns>
            An array of Objects representing custom attributes, or an empty array.
            </returns>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. </param><exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded. </exception>
        </member>
        <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
            <summary>
            Indicates whether one or more instance of <paramref name="attributeType"/> is defined on this member.
            </summary>
            <returns>
            true if the <paramref name="attributeType"/> is defined on this member; false otherwise.
            </returns>
            <param name="attributeType">The type of the custom attributes. </param><param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
        </member>
        <member name="P:System.Reflection.MemberInfo.MemberType">
            <summary>
            When overridden in a derived class, gets a <see cref="T:System.Reflection.MemberTypes"/> value indicating the type of the member — method, constructor, event, and so on.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MemberTypes"/> value indicating the type of member.
            </returns>
        </member>
        <member name="P:System.Reflection.MemberInfo.Name">
            <summary>
            Gets the name of the current member.
            </summary>
            
            <returns>
            A <see cref="T:System.String"/> containing the name of this member.
            </returns>
        </member>
        <member name="P:System.Reflection.MemberInfo.DeclaringType">
            <summary>
            Gets the class that declares this member.
            </summary>
            
            <returns>
            The Type object for the class that declares this member.
            </returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of all custom attributes applied to this member.
            </summary>
            
            <returns>
            An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.
            </returns>
            <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</param><exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception><exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded. </exception>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            
            <returns>
            An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType"/> have been applied.
            </returns>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param><param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. </param><exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception><exception cref="T:System.ArgumentNullException">If <paramref name="attributeType"/> is null.</exception><exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
        </member>
        <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.
            </summary>
            
            <returns>
            true if one or more instances of <paramref name="attributeType"/> or any of its derived types is applied to this member; otherwise, false.
            </returns>
            <param name="attributeType">The type of custom attribute to search for. The search includes derived types. </param><param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks.</param>
        </member>
        <member name="T:System.Reflection.MethodAttributes">
            <summary>
            Specifies flags for method attributes. These flags are defined in the corhdr.h file.
            </summary>
        </member>
        <member name="T:System.Reflection.MethodBase">
            <summary>
            Provides information about methods and constructors.
            </summary>
        </member>
        <member name="M:System.Reflection.MethodBase.#ctor(System.String,System.Reflection.MethodAttributes,DuoCode.Runtime.JsArray{System.Reflection.ParameterInfo},DuoCode.Runtime.JsArray{System.Attribute})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.MethodBase"/> class.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodBase.Attributes">
            <summary>
            Gets the attributes associated with this method.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Reflection.MethodAttributes"/> values.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.CallingConvention">
            <summary>
            Gets a value indicating the calling conventions for this method.
            </summary>
            
            <returns>
            The <see cref="T:System.Reflection.CallingConventions"/> for this method.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
            <summary>
            Gets a value indicating whether the method is a generic method definition.
            </summary>
            
            <returns>
            true if the current <see cref="T:System.Reflection.MethodBase"/> object represents the definition of a generic method; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the generic method contains unassigned generic type parameters.
            </summary>
            
            <returns>
            true if the current <see cref="T:System.Reflection.MethodBase"/> object represents a generic method that contains unassigned generic type parameters; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsGenericMethod">
            <summary>
            Gets a value indicating whether the method is generic.
            </summary>
            
            <returns>
            true if the current <see cref="T:System.Reflection.MethodBase"/> represents a generic method; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsSecurityCritical">
            <summary>
            Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.
            </summary>
            
            <returns>
            true if the current method or constructor is security-critical or security-safe-critical at the current trust level; false if it is transparent.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsSecuritySafeCritical">
            <summary>
            Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.
            </summary>
            
            <returns>
            true if the method or constructor is security-safe-critical at the current trust level; false if it is security-critical or transparent.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsSecurityTransparent">
            <summary>
            Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.
            </summary>
            
            <returns>
            true if the method or constructor is security-transparent at the current trust level; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsPublic">
            <summary>
            Gets a value indicating whether this is a public method.
            </summary>
            
            <returns>
            true if this method is public; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsPrivate">
            <summary>
            Gets a value indicating whether this member is private.
            </summary>
            
            <returns>
            true if access to this method is restricted to other members of the class itself; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsFamily">
            <summary>
            Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Family"/>; that is, the method or constructor is visible only within its class and derived classes.
            </summary>
            
            <returns>
            true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Family"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsAssembly">
            <summary>
            Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.Assembly"/>; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.
            </summary>
            
            <returns>
            true if the visibility of this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.Assembly"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
            <summary>
            Gets a value indicating whether the visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem"/>; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.
            </summary>
            
            <returns>
            true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamANDAssem"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
            <summary>
            Gets a value indicating whether the potential visibility of this method or constructor is described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem"/>; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.
            </summary>
            
            <returns>
            true if access to this method or constructor is exactly described by <see cref="F:System.Reflection.MethodAttributes.FamORAssem"/>; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsStatic">
            <summary>
            Gets a value indicating whether the method is static.
            </summary>
            
            <returns>
            true if this method is static; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsFinal">
            <summary>
            Gets a value indicating whether this method is final.
            </summary>
            
            <returns>
            true if this method is final; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsVirtual">
            <summary>
            Gets a value indicating whether the method is virtual.
            </summary>
            
            <returns>
            true if this method is virtual; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsHideBySig">
            <summary>
            Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.
            </summary>
            
            <returns>
            true if the member is hidden by signature; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsAbstract">
            <summary>
            Gets a value indicating whether the method is abstract.
            </summary>
            
            <returns>
            true if the method is abstract; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsSpecialName">
            <summary>
            Gets a value indicating whether this method has a special name.
            </summary>
            
            <returns>
            true if this method has a special name; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodBase.IsConstructor">
            <summary>
            Gets a value indicating whether the method is a constructor.
            </summary>
            
            <returns>
            true if this method is a constructor represented by a <see cref="T:System.Reflection.ConstructorInfo"/> object (see note in Remarks about <see cref="T:System.Reflection.Emit.ConstructorBuilder"/> objects); otherwise, false.
            </returns>
        </member>
        <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
            <summary>
            Returns a MethodBase object representing the currently executing method.
            </summary>
            
            <returns>
            A MethodBase object representing the currently executing method.
            </returns>
            <exception cref="T:System.Reflection.TargetException">This member was invoked with a late-binding mechanism.</exception>
        </member>
        <member name="M:System.Reflection.MethodBase.GetParameters">
            <summary>
            When overridden in a derived class, gets the parameters of the specified method or constructor.
            </summary>
            
            <returns>
            An array of type ParameterInfo containing information that matches the signature of the method (or constructor) reflected by this MethodBase instance.
            </returns>
        </member>
        <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, invokes the reflected method or constructor with the given parameters.
            </summary>
            
            <returns>
            An Object containing the return value of the invoked method, or null in the case of a constructor, or null if the method's return type is void. Before calling the method or constructor, Invoke checks to see if the user has access permission and verifies that the parameters are valid.CautionElements of the <paramref name="parameters"/> array that represent parameters declared with the ref or out keyword may also be modified.
            </returns>
            <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor.</param><param name="invokeAttr">A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags"/>. If <paramref name="binder"/> is null, this parameter is assigned the value <see cref="F:System.Reflection.BindingFlags.Default"/>; thus, whatever you pass in is ignored. </param><param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If <paramref name="binder"/> is null, the default binder is used. </param><param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param><param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.) </param><exception cref="T:System.Reflection.TargetException">The <paramref name="obj"/> parameter is null and the method is not static.-or- The method is not declared or inherited by the class of <paramref name="obj"/>. -or-A static constructor is invoked, and <paramref name="obj"/> is neither null nor an instance of the class that declared the constructor.</exception><exception cref="T:System.ArgumentException">The type of the <paramref name="parameters"/> parameter does not match the signature of the method or constructor reflected by this instance. </exception><exception cref="T:System.Reflection.TargetParameterCountException">The <paramref name="parameters"/> array does not have the correct number of arguments. </exception><exception cref="T:System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception. </exception><exception cref="T:System.MethodAccessException">The caller does not have permission to execute the constructor. </exception><exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters"/> property returns true for the declaring type.</exception>
        </member>
        <member name="M:System.Reflection.MethodBase.GetGenericArguments">
            <summary>
            Returns an array of <see cref="T:System.Type"/> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Type"/> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.
            </returns>
            <exception cref="T:System.NotSupportedException">The current object is a <see cref="T:System.Reflection.ConstructorInfo"/>. Generic constructors are not supported in the .NET Framework version 2.0. This exception is the default behavior if this method is not overridden in a derived class.</exception>
        </member>
        <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the method or constructor represented by the current instance, using the specified parameters.
            </summary>
            
            <returns>
            An object containing the return value of the invoked method, or null in the case of a constructor.CautionElements of the <paramref name="parameters"/> array that represent parameters declared with the ref or out keyword may also be modified.
            </returns>
            <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor. </param><param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <paramref name="parameters"/> should be null.If the method or constructor represented by this instance takes a ref parameter (ByRef in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param><exception cref="T:System.Reflection.TargetException">The <paramref name="obj"/> parameter is null and the method is not static.-or- The method is not declared or inherited by the class of <paramref name="obj"/>. -or-A static constructor is invoked, and <paramref name="obj"/> is neither null nor an instance of the class that declared the constructor.</exception><exception cref="T:System.ArgumentException">The elements of the <paramref name="parameters"/> array do not match the signature of the method or constructor reflected by this instance. </exception><exception cref="T:System.Reflection.TargetInvocationException">The invoked method or constructor throws an exception. -or-The current instance is a <see cref="T:System.Reflection.Emit.DynamicMethod"/> that contains unverifiable code. See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod"/>.</exception><exception cref="T:System.Reflection.TargetParameterCountException">The <paramref name="parameters"/> array does not have the correct number of arguments. </exception><exception cref="T:System.MethodAccessException">The caller does not have permission to execute the constructor. </exception><exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type. That is, the <see cref="P:System.Type.ContainsGenericParameters"/> property returns true for the declaring type.</exception><exception cref="T:System.NotSupportedException">The current instance is a <see cref="T:System.Reflection.Emit.MethodBuilder"/>.</exception>
        </member>
        <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
            <internalonly/>
        </member>
        <member name="T:System.Reflection.MethodInfo">
            <summary>
            Discovers the attributes of a method and provides access to method metadata.
            </summary>
        </member>
        <member name="M:System.Reflection.MethodInfo.#ctor(System.String,DuoCode.Runtime.JsFunction,System.Reflection.MethodAttributes,System.Reflection.JsTypeFunction,DuoCode.Runtime.JsArray{System.Reflection.ParameterInfo},DuoCode.Runtime.JsArray{System.Attribute},DuoCode.Runtime.JsArray{System.Reflection.JsTypeFunction})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.MethodInfo"/> class.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.MemberType">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is a method.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is a method.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodInfo.IsGenericMethod">
            <summary>
            Gets a value indicating whether the method is generic.
            </summary>
            
            <returns>
            true if the current <see cref="T:System.Reflection.MethodBase"/> represents a generic method; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodInfo.IsGenericMethodDefinition">
            <summary>
            Gets a value indicating whether the method is a generic method definition.
            </summary>
            
            <returns>
            true if the current <see cref="T:System.Reflection.MethodBase"/> object represents the definition of a generic method; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodInfo.ReturnType">
            <summary>
            Gets the return type of this method.
            </summary>
            
            <returns>
            The return type of this method.
            </returns>
        </member>
        <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
            <summary>
            Gets the custom attributes for the return type.
            </summary>
            
            <returns>
            An ICustomAttributeProvider object representing the custom attributes for the return type.
            </returns>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
            <summary>
            When overridden in a derived class, returns the MethodInfo object for the method on the direct or indirect base class in which the method represented by this instance was first declared.
            </summary>
            
            <returns>
            A MethodInfo object for the first implementation of this method.
            </returns>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
            <summary>
            Returns an array of <see cref="T:System.Type"/> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Type"/> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
            <summary>
            Returns a <see cref="T:System.Reflection.MethodInfo"/> object that represents a generic method definition from which the current method can be constructed.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MethodInfo"/> object representing a generic method definition from which the current method can be constructed.
            </returns>
            <exception cref="T:System.InvalidOperationException">The current method is not a generic method. That is, <see cref="P:System.Reflection.MethodInfo.IsGenericMethod"/> returns false. </exception><exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <see cref="T:System.Reflection.MethodInfo"/> object representing the resulting constructed method.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MethodInfo"/> object that represents the constructed method formed by substituting the elements of <paramref name="typeArguments"/> for the type parameters of the current generic method definition.
            </returns>
            <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic method definition.</param><exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Reflection.MethodInfo"/> does not represent a generic method definition. That is, <see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition"/> returns false.</exception><exception cref="T:System.ArgumentNullException"><paramref name="typeArguments"/> is null.-or- Any element of <paramref name="typeArguments"/> is null. </exception><exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments"/> is not the same as the number of type parameters of the current generic method definition.-or- An element of <paramref name="typeArguments"/> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition. </exception><exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)">
            <summary>
            Creates a delegate of the specified type from this method.
            </summary>
            
            <returns>
            The delegate for this method.
            </returns>
            <param name="delegateType">The type of the delegate to create.</param>
        </member>
        <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
            <summary>
            Creates a delegate of the specified type with the specified target from this method.
            </summary>
            
            <returns>
            The delegate for this method.
            </returns>
            <param name="delegateType">The type of the delegate to create.</param><param name="target">The object targeted by the delegate.</param>
        </member>
        <member name="T:System.Reflection.ParameterAttributes">
            <summary>
            Defines the attributes that can be associated with a parameter. These are defined in CorHdr.h.
            </summary>
        </member>
        <member name="T:System.Reflection.ParameterInfo">
            <summary>
            Discovers the attributes of a parameter and provides access to parameter metadata.
            </summary>
        </member>
        <member name="P:System.Reflection.ParameterInfo.ParameterType">
            <summary>
            Gets the Type of this parameter.
            </summary>
            
            <returns>
            The Type object that represents the Type of this parameter.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
            
            <returns>
            The simple name of this parameter.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.HasDefaultValue">
            <summary>
            Gets a value that indicates whether this parameter has a default value.
            </summary>
            
            <returns>
            true if this parameter has a default value; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.DefaultValue">
            <summary>
            Gets a value indicating the default value if the parameter has a default value.
            </summary>
            
            <returns>
            The default value of the parameter, or <see cref="F:System.DBNull.Value"/> if the parameter has no default value.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.RawDefaultValue">
            <summary>
            Gets a value indicating the default value if the parameter has a default value.
            </summary>
            
            <returns>
            The default value of the parameter, or <see cref="F:System.DBNull.Value"/> if the parameter has no default value.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.Position">
            <summary>
            Gets the zero-based position of the parameter in the formal parameter list.
            </summary>
            
            <returns>
            An integer representing the position this parameter occupies in the parameter list.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.Attributes">
            <summary>
            Gets the attributes for this parameter.
            </summary>
            
            <returns>
            A ParameterAttributes object representing the attributes for this parameter.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.Member">
            <summary>
            Gets a value indicating the member in which the parameter is implemented.
            </summary>
            
            <returns>
            The member which implanted the parameter represented by this <see cref="T:System.Reflection.ParameterInfo"/>.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.IsIn">
            <summary>
            Gets a value indicating whether this is an input parameter.
            </summary>
            
            <returns>
            true if the parameter is an input parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.IsOut">
            <summary>
            Gets a value indicating whether this is an output parameter.
            </summary>
            
            <returns>
            true if the parameter is an output parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.IsLcid">
            <summary>
            Gets a value indicating whether this parameter is a locale identifier (lcid).
            </summary>
            
            <returns>
            true if the parameter is a locale identifier; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.IsRetval">
            <summary>
            Gets a value indicating whether this is a Retval parameter.
            </summary>
            
            <returns>
            true if the parameter is a Retval; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.ParameterInfo.IsOptional">
            <summary>
            Gets a value indicating whether this parameter is optional.
            </summary>
            
            <returns>
            true if the parameter is optional; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.ToString">
            <summary>
            Gets the parameter type and name represented as a string.
            </summary>
            
            <returns>
            A string containing the type and the name of the parameter.
            </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Gets all the custom attributes defined on this parameter.
            </summary>
            
            <returns>
            An array that contains all the custom attributes applied to this parameter.
            </returns>
            <param name="inherit">This argument is ignored for objects of this type. See Remarks.</param><exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded. </exception>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes of the specified type or its derived types that are applied to this parameter.
            </summary>
            
            <returns>
            An array that contains the custom attributes of the specified type or its derived types.
            </returns>
            <param name="attributeType">The custom attributes identified by type. </param><param name="inherit">This argument is ignored for objects of this type. See Remarks.</param><exception cref="T:System.ArgumentException">The type must be a type provided by the underlying runtime system.</exception><exception cref="T:System.ArgumentNullException"><paramref name="attributeType"/> is null.</exception><exception cref="T:System.TypeLoadException">A custom attribute type could not be loaded. </exception>
        </member>
        <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
            <summary>
            Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.
            </summary>
            
            <returns>
            true if one or more instances of <paramref name="attributeType"/> or its derived types are applied to this parameter; otherwise, false.
            </returns>
            <param name="attributeType">The Type object to search for. </param><param name="inherit">This argument is ignored for objects of this type. See Remarks.</param><exception cref="T:System.ArgumentNullException"><paramref name="attributeType"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="attributeType"/> is not a <see cref="T:System.Type"/> object supplied by the common language runtime.</exception>
        </member>
        <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
            <summary>
            Gets or sets a value that specifies whether the parameter at the specified index position is to be modified by the current <see cref="T:System.Reflection.ParameterModifier"/>.
            </summary>
            
            <returns>
            true if the parameter at this index position is to be modified by this <see cref="T:System.Reflection.ParameterModifier"/>; otherwise, false.
            </returns>
            <param name="index">The index position of the parameter whose modification status is being examined or set. </param>
        </member>
        <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reflection.ParameterModifier"/> structure representing the specified number of parameters.
            </summary>
            <param name="parameterCount">The number of parameters. </param><exception cref="T:System.ArgumentException"><paramref name="parameterCount"/> is negative. </exception>
        </member>
        <member name="T:System.Reflection.PropertyAttributes">
            <summary>
            Defines the attributes that can be associated with a property. These attribute values are defined in corhdr.h.
            </summary>
        </member>
        <member name="T:System.Reflection.PropertyInfo">
            <summary>
            Discovers the attributes of a property and provides access to property metadata.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyInfo.MemberType">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is a property.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.MemberTypes"/> value indicating that this member is a property.
            </returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.PropertyType">
            <summary>
            Gets the type of this property.
            </summary>
            
            <returns>
            The type of this property.
            </returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.Attributes">
            <summary>
            Gets the attributes for this property.
            </summary>
            
            <returns>
            Attributes of this property.
            </returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether the property can be read.
            </summary>
            
            <returns>
            true if this property can be read; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether the property can be written to.
            </summary>
            
            <returns>
            true if this property can be written to; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.GetMethod">
            <summary>
            Gets the get accessor for this property.
            </summary>
            
            <returns>
            The get accessor for this property.
            </returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.SetMethod">
            <summary>
            Gets the set accessor for this property.
            </summary>
            
            <returns>
            The set accessor for this property.
            </returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
            <summary>
            Gets a value indicating whether the property is the special name.
            </summary>
            
            <returns>
            true if this property is the special name; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.
            </summary>
            <param name="obj">The object whose property value will be set. </param><param name="value">The new property value. </param><param name="invokeAttr">A bitwise combination of the following enumeration members that specify the invocation attribute: InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, or SetProperty. You must specify a suitable invocation attribute. For example, to invoke a static member, set the Static flag. </param><param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo"/> objects through reflection. If <paramref name="binder"/> is null, the default binder is used. </param><param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param><param name="culture">The culture for which the resource is to be localized. If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent"/> property will be called successively in search of a match. If this value is null, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property. </param><exception cref="T:System.ArgumentException">The <paramref name="index"/> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception><exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj"/> is null. </exception><exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index"/> does not match the number of parameters the indexed property takes. </exception><exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception><exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
            <summary>
            Returns an array whose elements reflect the public and, if specified, non-public get, set, and other accessors of the property reflected by the current instance.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Reflection.MethodInfo"/> objects whose elements reflect the get, set, and other accessors of the property reflected by the current instance. If <paramref name="nonPublic"/> is true, this array contains public and non-public get, set, and other accessors. If <paramref name="nonPublic"/> is false, this array contains only public get, set, and other accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.
            </returns>
            <param name="nonPublic">Indicates whether non-public methods should be returned in the MethodInfo array. true if non-public methods are to be included; otherwise, false. </param>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
            <summary>
            When overridden in a derived class, returns the public or non-public get accessor for this property.
            </summary>
            
            <returns>
            A MethodInfo object representing the get accessor for this property, if <paramref name="nonPublic"/> is true. Returns null if <paramref name="nonPublic"/> is false and the get accessor is non-public, or if <paramref name="nonPublic"/> is true but no get accessors exist.
            </returns>
            <param name="nonPublic">Indicates whether a non-public get accessor should be returned. true if a non-public accessor is to be returned; otherwise, false. </param><exception cref="T:System.Security.SecurityException">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission"/> to reflect on this non-public method. </exception>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
            <summary>
            When overridden in a derived class, returns the set accessor for this property.
            </summary>
            
            <returns>
            Value Condition A <see cref="T:System.Reflection.MethodInfo"/> object representing the Set method for this property. The set accessor is public.-or- <paramref name="nonPublic"/> is true and the set accessor is non-public. null<paramref name="nonPublic"/> is true, but the property is read-only.-or- <paramref name="nonPublic"/> is false and the set accessor is non-public.-or- There is no set accessor.
            </returns>
            <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. true if a non-public accessor is to be returned; otherwise, false. </param><exception cref="T:System.Security.SecurityException">The requested method is non-public and the caller does not have <see cref="T:System.Security.Permissions.ReflectionPermission"/> to reflect on this non-public method. </exception>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
            <summary>
            When overridden in a derived class, returns an array of all the index parameters for the property.
            </summary>
            
            <returns>
            An array of type ParameterInfo containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
            <summary>
            Returns the property value of a specified object.
            </summary>
            
            <returns>
            The property value of the specified object.
            </returns>
            <param name="obj">The object whose property value will be returned.</param>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
            <summary>
            Returns the property value of a specified object with optional index values for indexed properties.
            </summary>
            
            <returns>
            The property value of the specified object.
            </returns>
            <param name="obj">The object whose property value will be returned. </param><param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param><exception cref="T:System.ArgumentException">The <paramref name="index"/> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception><exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj"/> is null. </exception><exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index"/> does not match the number of parameters the indexed property takes. </exception><exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception><exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.
            </summary>
            
            <returns>
            The property value of the specified object.
            </returns>
            <param name="obj">The object whose property value will be returned. </param><param name="invokeAttr">A bitwise combination of the following enumeration members that specify the invocation attribute: InvokeMethod, CreateInstance, Static, GetField, SetField, GetProperty, and SetProperty. You must specify a suitable invocation attribute. For example, to invoke a static member, set the Static flag. </param><param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo"/> objects through reflection. If <paramref name="binder"/> is null, the default binder is used. </param><param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param><param name="culture">The culture for which the resource is to be localized. If the resource is not localized for this culture, the <see cref="P:System.Globalization.CultureInfo.Parent"/> property will be called successively in search of a match. If this value is null, the culture-specific information is obtained from the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property. </param><exception cref="T:System.ArgumentException">The <paramref name="index"/> array does not contain the type of arguments needed.-or- The property's get accessor is not found. </exception><exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj"/> is null. </exception><exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index"/> does not match the number of parameters the indexed property takes. </exception><exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception><exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
        </member>
        <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the property value of a specified object.
            </summary>
            <param name="obj">The object whose property value will be set.</param><param name="value">The new property value.</param>
        </member>
        <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            Sets the property value of a specified object with optional index values for index properties.
            </summary>
            <param name="obj">The object whose property value will be set. </param><param name="value">The new property value. </param><param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties. </param><exception cref="T:System.ArgumentException">The <paramref name="index"/> array does not contain the type of arguments needed.-or- The property's set accessor is not found. </exception><exception cref="T:System.Reflection.TargetException">The object does not match the target type, or a property is an instance property but <paramref name="obj"/> is null. </exception><exception cref="T:System.Reflection.TargetParameterCountException">The number of parameters in <paramref name="index"/> does not match the number of parameters the indexed property takes. </exception><exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. </exception><exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
            <summary>
            Returns an array of types representing the required custom modifiers of the property.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Type"/> objects that identify the required custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst"/> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
            <summary>
            Returns an array of types representing the optional custom modifiers of the property.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Type"/> objects that identify the optional custom modifiers of the current property, such as <see cref="T:System.Runtime.CompilerServices.IsConst"/> or <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetAccessors">
            <summary>
            Returns an array whose elements reflect the public get, set, and other accessors of the property reflected by the current instance.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Reflection.MethodInfo"/> objects that reflect the public get, set, and other accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
            <summary>
            Returns the public get accessor for this property.
            </summary>
            
            <returns>
            A MethodInfo object representing the public get accessor for this property, or null if the get accessor is non-public or does not exist.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
            <summary>
            Returns the public set accessor for this property.
            </summary>
            
            <returns>
            The MethodInfo object representing the Set method for this property if the set accessor is public, or null if the set accessor is not public.
            </returns>
        </member>
        <member name="T:System.Reflection.TypeAttributes">
            <summary>
            Specifies type attributes.
            </summary>
        </member>
        <member name="T:System.RuntimeMethodHandle">
            <summary>
            <see cref="T:System.RuntimeMethodHandle"/> is a handle to the internal metadata representation of a method.
            </summary>
        </member>
        <member name="T:System.RuntimeTypeHandle">
            <summary>
            Do not use!  This class is only present to make VS consider this a valid minimal mscorlib.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
            <summary>
                Represents a builder for asynchronous methods that return a task.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
            <summary>
                Gets the task for this builder.
            </summary>
            <returns>
                The task for this builder.
            </returns>
            <exception cref="T:System.InvalidOperationException">The builder is not initialized.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
            <summary>
                Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" /> class.
            </summary>
            <returns>
                A new instance of the builder.
            </returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
            <summary>
                Begins running the builder with the associated state machine.
            </summary>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine" /> is null.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
                Associates the builder with the specified state machine.
            </summary>
            <param name="stateMachine">The state machine instance to associate with the builder.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The state machine was previously set.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0,``1)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
            <summary>
                Marks the task as successfully completed.
            </summary>
            <exception cref="T:System.InvalidOperationException">The task has already completed.-or-The builder is not initialized.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
            <summary>
                Marks the task as failed and binds the specified exception to the task.
            </summary>
            <param name="exception">The exception to bind to the task.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The task has already completed.-or-The builder is not initialized.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes. This method can be
                called from partially trusted code.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
            <summary>
                Represents a builder for asynchronous methods that return a task and provides a parameter for the result.
            </summary>
            <typeparam name="TResult">The result to use to complete the task.</typeparam>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
            <summary>
                Gets the task for this builder.
            </summary>
            <returns>
                The task for this builder.
            </returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
            <summary>
                Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" /> class.
            </summary>
            <returns>
                A new instance of the builder.
            </returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
            <summary>
                Begins running the builder with the associated state machine.
            </summary>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine" /> is null.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
                Associates the builder with the specified state machine.
            </summary>
            <param name="stateMachine">The state machine instance to associate with the builder.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The state machine was previously set.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0,``1)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
            <summary>
                Marks the task as successfully completed.
            </summary>
            <param name="result">The result to use to complete the task.</param>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
                Marks the task as failed and binds the specified exception to the task.
            </summary>
            <param name="exception">The exception to bind to the task.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The task has already completed.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes. This method can be
                called from partially trusted code.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
            <summary>
                Creates an instance of the <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" /> class.
            </summary>
            <returns>
                A new instance of the builder.
            </returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
            <summary>
                Begins running the builder with the associated state machine.
            </summary>
            <param name="stateMachine">The state machine instance, passed by reference.</param>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine" /> is null.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
                Associates the builder with the specified state machine.
            </summary>
            <param name="stateMachine">The state machine instance to associate with the builder.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stateMachine" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The state machine was previously set.</exception>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0,``1)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
                Schedules the state machine to proceed to the next action when the specified awaiter completes. This method can be
                called from partially trusted code.
            </summary>
            <param name="awaiter">The awaiter.</param>
            <param name="stateMachine">The state machine.</param>
            <typeparam name="TAwaiter">The type of the awaiter.</typeparam>
            <typeparam name="TStateMachine">The type of the state machine.</typeparam>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Allows you to obtain the full path of the source file that contains the caller. This is the file path at the time of compile.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>
            Allows you to obtain the line number in the source file at which the method is called.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>
            Allows you to obtain the method or property name of the caller to the method.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
            IMPORTANT: Keep this in [....] with corhdr.h
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
            <summary>Distinguishes a compiler-generated element from a user-generated element. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> class.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
            <summary>
            Indicates that the use of <see cref="T:System.Object"/> on a member is meant to be treated as a dynamically dispatched type.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute"/> class.
            </summary>
            <remarks>
            When used in an attribute specification, the default constructor is semantically
            equivalent to <c>DynamicAttribute({ true })</c>, and can be considered
            a shorthand for that expression. It should therefore only be used on an element
            of type <see cref="T:System.Object"/>.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute"/> class.
            </summary>
            <param name="transformFlags">Specifies, in a prefix traversal of a type's
            construction, which <see cref="T:System.Object"/> occurrences are meant to
            be treated as a dynamically dispatched type.</param>
            <remarks>
            This constructor is meant to be used on types that are built on an underlying
            occurrence of <see cref="T:System.Object"/> that is meant to be treated dynamically.
            For instance, if <c>C</c> is a generic type with two type parameters, then a
            use of the constructed type<c>C&lt;<see cref="T:System.Object"/>, <see cref="T:System.Object"/>&gt;</c>
            might be intended to treat the first type argument dynamically and the second
            normally, in which case the appropriate attribute specification should
            use a <c>transformFlags</c> value of <c>{ false, true, false }</c>.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
            <summary>
            Specifies, in a prefix traversal of a type's
            construction, which <see cref="T:System.Object"/> occurrences are meant to
            be treated as a dynamically dispatched type.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext">
            <summary>
                Moves the state machine to its next state.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
                Configures the state machine with a heap-allocated replica.
            </summary>
            <param name="stateMachine">The heap-allocated replica.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.ICriticalNotifyCompletion">
            <summary>
                Represents an awaiter that schedules continuations when an await operation completes.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(System.Action)">
            <summary>
                Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="continuation" /> argument is null (Nothing in
                Visual Basic).
            </exception>
        </member>
        <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
            <summary>
            Indicates the name by which an indexer is known in programming languages that do not support indexers directly.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute"/> class.
            </summary>
            <param name="indexerName">The name of the indexer, as shown to other languages. </param>
        </member>
        <member name="T:System.Runtime.CompilerServices.INotifyCompletion">
            <summary>
                Represents an operation that schedules continuations when it completes.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)">
            <summary>
                Schedules the continuation action that's invoked when the instance completes.
            </summary>
            <param name="continuation">The action to invoke when the operation completes.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="continuation" /> argument is null (Nothing in
                Visual Basic).
            </exception>
            [__DynamicallyInvokable]
        </member>
        <member name="T:System.Runtime.CompilerServices.IsVolatile">
            <summary>
            Marks a field as volatile. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
            <internalonly/>
        </member>
        <member name="T:System.Runtime.CompilerServices.TaskAwaiter">
            <summary>
                Provides an object that waits for the completion of an asynchronous task.
            </summary>
        </member>
        <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
            <summary>
                Represents an exception whose state is captured at a certain point in code.
            </summary>
        </member>
        <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
            <summary>
                Gets the exception that is represented by the current instance.
            </summary>
            <returns>
                The exception that is represented by the current instance.
            </returns>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
            <summary>
                Creates an <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> object that represents the
                specified exception at the current point in code.
            </summary>
            <returns>
                An object that represents the specified exception at the current point in code.
            </returns>
            <param name="source">The exception whose state is captured, and which is represented by the returned object. </param>
            <exception cref="T:System.ArgumentException"><paramref name="source" /> is null. </exception>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
            <summary>
                Throws the exception that is represented by the current
                <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> object, after restoring the state that was
                saved when the exception was captured.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
            <summary>
            Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
            <summary>
            Gets a value that indicates whether the COM type is visible.
            </summary>
            
            <returns>
            true if the type is visible; otherwise, false. The default value is true.
            </returns>
        </member>
        <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ComVisibleAttribute class.
            </summary>
            <param name="visibility">true to indicate that the type is visible to COM; otherwise, false. The default is true. </param>
        </member>
        <member name="T:System.Runtime.InteropServices.GuidAttribute">
            <summary>
            Supplies an explicit <see cref="T:System.Guid"/> when an automatic GUID is undesirable.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
            <summary>
            Gets the <see cref="T:System.Guid"/> of the class.
            </summary>
            
            <returns>
            The <see cref="T:System.Guid"/> of the class.
            </returns>
        </member>
        <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.GuidAttribute"/> class with the specified GUID.
            </summary>
            <param name="guid">The <see cref="T:System.Guid"/> to be assigned. </param>
        </member>
        <member name="T:System.Runtime.InteropServices.InAttribute">
            <summary>Indicates that data should be marshaled from the caller to the callee, but not back to the caller.</summary>
        </member>
        <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InAttribute" /> class.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.OutAttribute">
            <summary>Indicates that data should be marshaled from callee back to caller.</summary>
        </member>
        <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Runtime.Serialization.ISerializable">
            <summary>Allows an object to control its own serialization and deserialization.</summary>
        </member>
        <member name="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Object,System.Object)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:System.Number">
            <summary>
            Equivalent to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Number.ToExponential">
            <summary>
            Returns a string containing the number represented in exponential notation.
            </summary>
            <returns>The exponential representation</returns>
        </member>
        <member name="M:System.Number.ToExponential(System.Int32)">
            <summary>
            Returns a string containing the number represented in exponential notation.
            </summary>
            <param name="fractionDigits">The number of digits after the decimal point (0 - 20)</param>
            <returns>The exponential representation</returns>
        </member>
        <member name="M:System.Number.ToFixed">
            <summary>
            Returns a string representing the number in fixed-point notation.
            </summary>
            <returns>The fixed-point notation</returns>
        </member>
        <member name="M:System.Number.ToFixed(System.Int32)">
            <summary>
            Returns a string representing the number in fixed-point notation.
            </summary>
            <param name="fractionDigits">The number of digits after the decimal point from 0 - 20</param>
            <returns>The fixed-point notation</returns>
        </member>
        <member name="M:System.Number.ToPrecision">
            <summary>
            Returns a string containing the number represented either in exponential or
            fixed-point notation with a specified number of digits.
            </summary>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:System.Number.ToPrecision(System.Int32)">
            <summary>
            Returns a string containing the number represented either in exponential or
            fixed-point notation with a specified number of digits.
            </summary>
            <param name="precision">The number of significant digits (in the range 1 to 21)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:System.Object.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:System.Object.GetType">
            <summary>
            Retrieves the type associated with an object instance.
            </summary>
            <returns>The type of the object.</returns>
        </member>
        <member name="M:System.Object.ToString">
            <summary>
            Converts an object to its string representation.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:System.Object.toString">
            <summary>
            Exists so that C# .ToString() is faithfully consumed when JS .toString() is invoked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Object.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            
            <returns>
            true if the objects are considered equal; otherwise, false. If both <paramref name="objA"/> and <paramref name="objB"/> are null, the method returns true.
            </returns>
            <param name="objA">The first object to compare. </param><param name="objB">The second object to compare.</param>
        </member>
        <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> instances are the same instance, <c>objA === objB</c> in Javascript.</summary>
            <param name="objA">The first object to compare. </param>
            <param name="objB">The second object  to compare. </param>
            <returns>true if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are null; otherwise, false.</returns>
        </member>
        <member name="T:System.MidpointRounding">
            <summary>
            Specifies how mathematical rounding methods should process a number that is midway between two numbers.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:System.Single">
            <summary>
            Do not use!  This class is only present to make VS consider this a valid minimal mscorlib.
            </summary>
        </member>
        <member name="P:System.String.Length">
            <summary>
            Gets the number of characters in the current <see cref="T:System.String"/> object.
            </summary>
            
            <returns>
            The number of characters in the current string.
            </returns>
        </member>
        <member name="M:System.String.ToUpper">
            <summary>
            Returns a copy of this string converted to uppercase.
            </summary>
            
            <returns>
            The uppercase equivalent of the current string.
            </returns>
        </member>
        <member name="M:System.String.ToLower">
            <summary>
            Returns a copy of this string converted to lowercase.
            </summary>
            
            <returns>
            A string in lowercase.
            </returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance.
            </summary>
            
            <returns>
            The zero-based index position of <paramref name="value"/> if that string is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is 0.
            </returns>
            <param name="value">The string to seek. </param><param name="startIndex">The search starting position. </param><exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than 0 (zero) or greater than the length of this string.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.IndexOf(System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.
            </summary>
            
            <returns>
            The zero-based index position of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>  
            <param name="value">A Unicode character to seek. </param>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character in this string.
            </summary>
            
            <returns>
            The zero-based index position of <paramref name="value"/> if that character is found, or -1 if it is not.
            </returns>  
            <param name="value">A Unicode character to seek. </param><param name="startIndex">The search starting position. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is less than 0 (zero) or greater than the length of the string. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string within this instance.
            </summary>
            
            <returns>
            The zero-based index position of <paramref name="value"/> if that string is found, or -1 if it is not. If <paramref name="value"/> is <see cref="F:System.String.Empty"/>, the return value is the last index position in this instance.
            </returns>
            <param name="value">The string to seek. </param><param name="startIndex">The search starting position. The search proceeds from <paramref name="startIndex"/> toward the beginning of this instance.</param><exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty"/>, and <paramref name="startIndex"/> is less than zero or greater than the length of the current instance. -or-The current instance equals <see cref="F:System.String.Empty"/>, and <paramref name="startIndex"/> is greater than zero.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.
            </summary>
            
            <returns>
            The zero-based index position of <paramref name="value"/> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty"/>.
            </returns>
            <param name="value">The Unicode character to seek. </param>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.
            </summary>
            
            <returns>
            The zero-based index position of <paramref name="value"/> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty"/>.
            </returns>
            <param name="value">The Unicode character to seek. </param><param name="startIndex">The starting position of the search. The search proceeds from <paramref name="startIndex"/> toward the beginning of this instance.</param><exception cref="T:System.ArgumentOutOfRangeException">The current instance does not equal <see cref="F:System.String.Empty"/>, and <paramref name="startIndex"/> is less than zero or greater than or equal to the length of this instance.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.EndsWith(System.String)">
            <summary>
            Determines whether the end of this string instance matches the specified string.
            </summary>
            
            <returns>
            true if <paramref name="value"/> matches the end of this instance; otherwise, false.
            </returns>
            <param name="value">The string to compare to the substring at the end of this instance. </param><exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.StartsWith(System.String)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string.
            </summary>
            
            <returns>
            true if <paramref name="value"/> matches the beginning of this string; otherwise, false.
            </returns>
            <param name="value">The string to compare. </param><exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Compare(System.String,System.String)">
            <summary>
            Compares two specified <see cref="T:System.String"/> objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            
            <returns>
            A 32-bit signed integer that indicates the lexical relationship between the two comparands.Value Condition Less than zero <paramref name="strA"/> is less than <paramref name="strB"/>. Zero <paramref name="strA"/> equals <paramref name="strB"/>. Greater than zero <paramref name="strA"/> is greater than <paramref name="strB"/>.
            </returns>
            <param name="strA">The first string to compare. </param><param name="strB">The second string to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
            <summary>
            Compares two specified <see cref="T:System.String"/> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.
            </summary>
            
            <returns>
            A 32-bit signed integer that indicates the lexical relationship between the two comparands.Value Condition Less than zero <paramref name="strA"/> is less than <paramref name="strB"/>. Zero <paramref name="strA"/> equals <paramref name="strB"/>. Greater than zero <paramref name="strA"/> is greater than <paramref name="strB"/>.
            </returns>
            <param name="strA">The first string to compare.</param><param name="strB">The second string to compare. </param><param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison. </param><exception cref="T:System.ArgumentException"><paramref name="comparisonType"/> is not a <see cref="T:System.StringComparison"/> value. </exception><exception cref="T:System.NotSupportedException"><see cref="T:System.StringComparison"/> is not supported.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Substring(System.Int32)">
            <summary>Retrieves a substring from this instance. The substring starts at a specified character position.</summary>
            <returns>A string that is equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</returns>
            <param name="startIndex">The zero-based starting character position of a substring in this instance. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="startIndex" /> is less than zero or greater than the length of this instance. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.
            </summary>
            
            <returns>
            A string that is equivalent to the substring of length <paramref name="length"/> that begins at <paramref name="startIndex"/> in this instance, or <see cref="F:System.String.Empty"/> if <paramref name="startIndex"/> is equal to the length of this instance and <paramref name="length"/> is zero.
            </returns>
            <param name="startIndex">The zero-based starting character position of a substring in this instance. </param><param name="length">The number of characters in the substring. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> plus <paramref name="length"/> indicates a position not within this instance.-or- <paramref name="startIndex"/> or <paramref name="length"/> is less than zero. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Split(System.Char[])">
            <summary>
            Returns a string array that contains the substrings in this instance that are delimited by elements of a specified Unicode character array.
            </summary>
            
            <returns>
            An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array that contains no delimiters, or null. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Split(System.Char[],System.Int32)">
            <summary>
            Returns a string array that contains the substrings in this instance that are delimited by elements of a specified Unicode character array. A parameter specifies the maximum number of substrings to return.
            </summary>
            
            <returns>
            An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of Unicode characters that delimit the substrings in this instance, an empty array that contains no delimiters, or null. </param>
            <param name="count">The maximum number of substrings to return. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by elements of a specified Unicode character array. A parameter specifies whether to return empty array elements.
            </summary>
            
            <returns>
            An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or null. </param><param name="options"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned. </param><exception cref="T:System.ArgumentException"><paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by elements of a specified Unicode character array. Parameters specify the maximum number of substrings to return and whether to return empty array elements.
            </summary>
            
            <returns>
            An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of Unicode characters that delimit the substrings in this string, an empty array that contains no delimiters, or null. </param><param name="count">The maximum number of substrings to return. </param><param name="options"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative. </exception><exception cref="T:System.ArgumentException"><paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by elements of a specified string array. A parameter specifies whether to return empty array elements.
            </summary>
            
            <returns>
            An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of strings that delimit the substrings in this string, an empty array that contains no delimiters, or null. </param><param name="options"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned. </param><exception cref="T:System.ArgumentException"><paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
            <summary>
            Returns a string array that contains the substrings in this string that are delimited by elements of a specified string array. Parameters specify the maximum number of substrings to return and whether to return empty array elements.
            </summary>
            
            <returns>
            An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator"/>. For more information, see the Remarks section.
            </returns>
            <param name="separator">An array of strings that delimit the substrings in this string, an empty array that contains no delimiters, or null. </param><param name="count">The maximum number of substrings to return. </param><param name="options"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None"/> to include empty array elements in the array returned. </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative. </exception><exception cref="T:System.ArgumentException"><paramref name="options"/> is not one of the <see cref="T:System.StringSplitOptions"/> values.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Join(System.String,System.String[])">
            <summary>
            Concatenates all the elements of a string array, using the specified separator between each element.
            </summary>
            
            <returns>
            A string that consists of the elements in <paramref name="value"/> delimited by the <paramref name="separator"/> string. If <paramref name="value"/> is an empty array, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <param name="separator">The string to use as a separator. </param><param name="value">An array that contains the elements to concatenate. </param><exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/> string. If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <param name="separator">The string to use as a separator.</param><param name="values">A collection that contains the objects to concatenate.</param><typeparam name="T">The type of the members of <paramref name="values"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null. </exception>
        </member>
        <member name="M:System.String.Concat(System.Object)">
            <summary>
            Creates the string  representation of a specified object.
            </summary>
            
            <returns>
            The string representation of the value of <paramref name="arg0"/>, or <see cref="F:System.String.Empty"/> if <paramref name="arg0"/> is null.
            </returns>
            <param name="arg0">The object to represent, or null. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object)">
            <summary>
            Concatenates the string representations of two specified objects.
            </summary>
            
            <returns>
            The concatenated string representations of the values of <paramref name="arg0"/> and <paramref name="arg1"/>.
            </returns>
            <param name="arg0">The first object to concatenate. </param><param name="arg1">The second object to concatenate. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
            <summary>
            Concatenates the string representations of three specified objects.
            </summary>
            
            <returns>
            The concatenated string representations of the values of <paramref name="arg0"/>, <paramref name="arg1"/>, and <paramref name="arg2"/>.
            </returns>
            <param name="arg0">The first object to concatenate. </param><param name="arg1">The second object to concatenate. </param><param name="arg2">The third object to concatenate. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Concat(System.Object[])">
            <summary>
            Concatenates the string representations of the elements in a specified <see cref="T:System.Object"/> array.
            </summary>
            
            <returns>
            The concatenated string representations of the values of the elements in <paramref name="args"/>.
            </returns>
            <param name="args">An object array that contains the elements to concatenate. </param><exception cref="T:System.ArgumentNullException"><paramref name="args"/> is null. </exception><exception cref="T:System.OutOfMemoryException">Out of memory.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> implementation.
            </summary>
            
            <returns>
            The concatenated members in <paramref name="values"/>.
            </returns>
            <param name="values">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.</param><typeparam name="T">The type of the members of <paramref name="values"/>.</typeparam><exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null. </exception>
        </member>
        <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type <see cref="T:System.String"/>.
            </summary>
            
            <returns>
            The concatenated strings in <paramref name="values"/>.
            </returns>
            <param name="values">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and whose generic type argument is <see cref="T:System.String"/>.</param><exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null. </exception>
        </member>
        <member name="M:System.String.Concat(System.String,System.String)">
            <summary>
            Concatenates two specified instances of <see cref="T:System.String"/>.
            </summary>
            
            <returns>
            The concatenation of <paramref name="str0"/> and <paramref name="str1"/>.
            </returns>
            <param name="str0">The first string to concatenate. </param><param name="str1">The second string to concatenate. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String)">
            <summary>
            Concatenates three specified instances of <see cref="T:System.String"/>.
            </summary>
            
            <returns>
            The concatenation of <paramref name="str0"/>, <paramref name="str1"/>, and <paramref name="str2"/>.
            </returns>
            <param name="str0">The first string to concatenate. </param><param name="str1">The second string to concatenate. </param><param name="str2">The third string to concatenate. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
            <summary>
            Concatenates four specified instances of <see cref="T:System.String"/>.
            </summary>
            
            <returns>
            The concatenation of <paramref name="str0"/>, <paramref name="str1"/>, <paramref name="str2"/>, and <paramref name="str3"/>.
            </returns>
            <param name="str0">The first string to concatenate. </param><param name="str1">The second string to concatenate. </param><param name="str2">The third string to concatenate. </param><param name="str3">The fourth string to concatenate. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Concat(System.String[])">
            <summary>
            Concatenates the elements of a specified <see cref="T:System.String"/> array.
            </summary>
            
            <returns>
            The concatenated elements of <paramref name="values"/>.
            </returns>
            <param name="values">An array of string instances. </param><exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null. </exception><exception cref="T:System.OutOfMemoryException">Out of memory.</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Format(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.
            </summary>
            
            <returns>
            A copy of <paramref name="format"/> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args"/>.
            </returns>
            <param name="format">A composite format string (see Remarks).</param><param name="args">An object array that contains zero or more objects to format. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> or <paramref name="args"/> is null. </exception><exception cref="T:System.FormatException"><paramref name="format"/> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args"/> array. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array. A specified parameter supplies culture-specific formatting information.
            </summary>
            
            <returns>
            A copy of <paramref name="format"/> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args"/>.
            </returns>
            <param name="provider">An object that supplies culture-specific formatting information. </param><param name="format">A composite format string (see Remarks). </param><param name="args">An object array that contains zero or more objects to format. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> or <paramref name="args"/> is null. </exception><exception cref="T:System.FormatException"><paramref name="format"/> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args"/> array. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.String.Equals(System.String,System.StringComparison)">
            <summary>
            Determines whether this string and a specified <see cref="T:System.String"/> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            
            <returns>
            true if the value of the <paramref name="value"/> parameter is the same as this string; otherwise, false.
            </returns>
            <param name="value">The string to compare to this instance.</param><param name="comparisonType">One of the enumeration values that specifies how the strings will be compared. </param><exception cref="T:System.ArgumentException"><paramref name="comparisonType"/> is not a <see cref="T:System.StringComparison"/> value. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.String.Trim">
            <summary>
            Removes all leading and trailing white-space characters from the current <see cref="T:System.String"/> object.
            </summary>
            <returns>
            The string that remains after all white-space characters are removed from the start and end of the current string.
            </returns>
        </member>
        <member name="T:System.StringComparison">
            <summary>
            Specifies the culture, case, and sort rules to be used by certain overloads of the <see cref="M:System.String.Compare(System.String,System.String)"/> and <see cref="M:System.String.Equals(System.Object)"/> methods.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Threading.Tasks.Task.GetAwaiter">
            <summary>
                Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
            <returns>
                An awaiter instance.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.GetAwaiter">
            <summary>
                Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1" />.
            </summary>
            <returns>
                An awaiter instance.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
            <summary>
            Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1"/> completes.
            </summary>
            
            <returns>
            A new continuation <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
            <param name="continuationAction">An action to run when the <see cref="T:System.Threading.Tasks.Task`1"/> completes. When run, the delegate will be passed the completed task as an argument.</param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"/> has been disposed.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="continuationAction"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
            <summary>
            Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1"/> completes.
            </summary>
            
            <returns>
            A new continuation <see cref="T:System.Threading.Tasks.Task`1"/>.
            </returns>
            <param name="continuationFunction">A function to run when the <see cref="T:System.Threading.Tasks.Task`1"/> completes. When run, the delegate will be passed the completed task as an argument.</param><typeparam name="TNewResult">The type of the result produced by the continuation.</typeparam><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Tasks.Task`1"/> has been disposed.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="continuationFunction"/> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.Task`1" /> created by this
            <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.
            </summary>
            <returns>
            Returns the <see cref="T:System.Threading.Tasks.Task`1" /> created by this
            <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
            <summary>
            Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.
            </summary>
            <returns>
            True if the operation was successful; otherwise, false.
            </returns>
            <param name="exception">The exception to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</param>
            <exception cref="T:System.ObjectDisposedException">
            The
            <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> argument is null.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.
            </summary>
            <returns>
            True if the operation was successful; otherwise, false.
            </returns>
            <param name="exceptions">The collection of exceptions to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</param>
            <exception cref="T:System.ObjectDisposedException">
            The
            <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">
            There are one or more null elements in <paramref name="exceptions" />
            .-or-The <paramref name="exceptions" /> collection is empty.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
            <summary>
            Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.
            </summary>
            <param name="exception">The exception to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</param>
            <exception cref="T:System.ObjectDisposedException">
            The
            <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> argument is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="T:System.Threading.Tasks.Task`1" /> is
            already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.
            </summary>
            <param name="exceptions">The collection of exceptions to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</param>
            <exception cref="T:System.ObjectDisposedException">
            The
            <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions" />.</exception>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="T:System.Threading.Tasks.Task`1" /> is
            already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
            <summary>
            Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
            <returns>
            True if the operation was successful; otherwise, false.
            </returns>
            <param name="result">The result value to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
            <summary>
            Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the
            <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
            <param name="result">The result value to bind to this <see cref="T:System.Threading.Tasks.Task`1" />.</param>
            <exception cref="T:System.ObjectDisposedException">
            The
            <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> was disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="T:System.Threading.Tasks.Task`1" /> is
            already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.
            </exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
            <summary>
            Attempts to transition the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
            <returns>
            True if the operation was successful; false if the operation was unsuccessful or the object has already been
            disposed.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
            <summary>
            Transitions the underlying <see cref="T:System.Threading.Tasks.Task`1" /> into the
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The underlying <see cref="T:System.Threading.Tasks.Task`1" /> is
            already in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,
            <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or
            <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, or if the underlying
            <see cref="T:System.Threading.Tasks.Task`1" /> has already been disposed.
            </exception>
        </member>
        <member name="T:System.TimeSpan">
            <summary>
            Represents a time interval.
            </summary>
        </member>
        <member name="F:System.TimeSpan.Zero">
            <summary>
            Represents the zero <see cref="T:System.TimeSpan"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:System.TimeSpan.MaxValue">
            <summary>
            Represents the maximum <see cref="T:System.TimeSpan"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:System.TimeSpan.MinValue">
            <summary>
            Represents the minimum <see cref="T:System.TimeSpan"/> value. This field is read-only.
            </summary>
        </member>
        <member name="F:System.TimeSpan.TicksPerMillisecond">
            <summary>
            Represents the number of ticks in 1 millisecond. This field is constant.
            </summary>
        </member>
        <member name="F:System.TimeSpan.TicksPerSecond">
            <summary>
            Represents the number of ticks in 1 second.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:System.TimeSpan.TicksPerMinute">
            <summary>
            Represents the number of ticks in 1 minute. This field is constant.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:System.TimeSpan.TicksPerHour">
            <summary>
            Represents the number of ticks in 1 hour. This field is constant.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:System.TimeSpan.TicksPerDay">
            <summary>
            Represents the number of ticks in 1 day.  This field is constant.
            </summary>
        </member>
        <member name="M:System.TimeSpan.#ctor(System.Int64)">
            <summary>Initializes a new <see cref="T:System.TimeSpan" /> to the specified number of ticks.</summary>
            <param name="ticks">A time period expressed in 100-nanosecond units.</param>
        </member>
        <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:System.TimeSpan"/> to a specified number of hours, minutes, and seconds.
            </summary>
            <param name="hours">Number of hours. </param><param name="minutes">Number of minutes. </param><param name="seconds">Number of seconds. </param><exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan"/> value less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. </exception>
        </member>
        <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:System.TimeSpan"/> to a specified number of days, hours, minutes, and seconds.
            </summary>
            <param name="days">Number of days. </param><param name="hours">Number of hours. </param><param name="minutes">Number of minutes. </param><param name="seconds">Number of seconds. </param><exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan"/> value less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. </exception>
        </member>
        <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:System.TimeSpan"/> to a specified number of days, hours, minutes, seconds, and milliseconds.
            </summary>
            <param name="days">Number of days. </param><param name="hours">Number of hours. </param><param name="minutes">Number of minutes. </param><param name="seconds">Number of seconds. </param><param name="milliseconds">Number of milliseconds. </param><exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan"/> value less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. </exception>
        </member>
        <member name="M:System.TimeSpan.FromTicks(System.Int64)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified time, where the specification is in units of ticks.
            </summary>
            
            <returns>
            An object that represents <paramref name="value"/>.
            </returns>
            <param name="value">A number of ticks that represent a time. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.FromSeconds(System.Double)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.
            </summary>
            
            <returns>
            An object that represents <paramref name="value"/>.
            </returns>
            <param name="value">A number of seconds, accurate to the nearest millisecond. </param><exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.-or-<paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>.-or-<paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>. </exception><exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.FromHours(System.Double)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.
            </summary>
            
            <returns>
            An object that represents <paramref name="value"/>.
            </returns>
            <param name="value">A number of hours accurate to the nearest millisecond. </param><exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. -or-<paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>.-or-<paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>.</exception><exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.FromDays(System.Double)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of days, where the specification is accurate to the nearest millisecond.
            </summary>
            
            <returns>
            An object that represents <paramref name="value"/>.
            </returns>
            <param name="value">A number of days, accurate to the nearest millisecond. </param><exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. -or-<paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>.-or-<paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>.</exception><exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of milliseconds.
            </summary>
            
            <returns>
            An object that represents <paramref name="value"/>.
            </returns>
            <param name="value">A number of milliseconds. </param><exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.-or-<paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>.-or-<paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>. </exception><exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.FromMinutes(System.Double)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.
            </summary>
            
            <returns>
            An object that represents <paramref name="value"/>.
            </returns>
            <param name="value">A number of minutes, accurate to the nearest millisecond. </param><exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.-or-<paramref name="value"/> is <see cref="F:System.Double.PositiveInfinity"/>.-or-<paramref name="value"/> is <see cref="F:System.Double.NegativeInfinity"/>. </exception><exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:System.TimeSpan.Ticks">
            <summary>
            Gets the number of ticks that represent the value of the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            
            <returns>
            The number of ticks contained in this instance.
            </returns>
        </member>
        <member name="P:System.TimeSpan.Days">
            <summary>
            Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            
            <returns>
            The day component of this instance. The return value can be positive or negative.
            </returns>
        </member>
        <member name="P:System.TimeSpan.Hours">
            <summary>
            Gets the hours component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            
            <returns>
            The hour component of the current <see cref="T:System.TimeSpan"/> structure. The return value ranges from -23 through 23.
            </returns>
        </member>
        <member name="P:System.TimeSpan.Milliseconds">
            <summary>
            Gets the milliseconds component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            
            <returns>
            The millisecond component of the current <see cref="T:System.TimeSpan"/> structure. The return value ranges from -999 through 999.
            </returns>
        </member>
        <member name="P:System.TimeSpan.Minutes">
            <summary>
            Gets the minutes component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            
            <returns>
            The minute component of the current <see cref="T:System.TimeSpan"/> structure. The return value ranges from -59 through 59.
            </returns>
        </member>
        <member name="P:System.TimeSpan.Seconds">
            <summary>
            Gets the seconds component of the time interval represented by the current <see cref="T:System.TimeSpan"/> structure.
            </summary>
            
            <returns>
            The second component of the current <see cref="T:System.TimeSpan"/> structure. The return value ranges from -59 through 59.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:System.TimeSpan.TotalDays">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional days.
            </summary>
            
            <returns>
            The total number of days represented by this instance.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:System.TimeSpan.TotalHours">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional hours.
            </summary>
            
            <returns>
            The total number of hours represented by this instance.
            </returns>
        </member>
        <member name="P:System.TimeSpan.TotalMilliseconds">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional milliseconds.
            </summary>
            
            <returns>
            The total number of milliseconds represented by this instance.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:System.TimeSpan.TotalMinutes">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional minutes.
            </summary>
            
            <returns>
            The total number of minutes represented by this instance.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:System.TimeSpan.TotalSeconds">
            <summary>
            Gets the value of the current <see cref="T:System.TimeSpan"/> structure expressed in whole and fractional seconds.
            </summary>
            
            <returns>
            The total number of seconds represented by this instance.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.Add(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is the sum of the specified <see cref="T:System.TimeSpan"/> object and this instance.
            </summary>
            
            <returns>
            A new object that represents the value of this instance plus the value of <paramref name="ts"/>.
            </returns>
            <param name="ts">The time interval to add.</param><exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is the difference between the specified <see cref="T:System.TimeSpan"/> object and this instance.
            </summary>
            
            <returns>
            A new time interval whose value is the result of the value of this instance minus the value of <paramref name="ts"/>.
            </returns>
            <param name="ts">The time interval to be subtracted. </param><exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns a value that indicates whether two specified instances of <see cref="T:System.TimeSpan"/> are equal.
            </summary>
            
            <returns>
            true if the values of <paramref name="t1"/> and <paramref name="t2"/> are equal; otherwise, false.
            </returns>
            <param name="t1">The first time interval to compare. </param><param name="t2">The second time interval to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan"/> object.
            </summary>
            
            <returns>
            true if <paramref name="obj"/> represents the same time interval as this instance; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this instance. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            
            <returns>
            true if <paramref name="value"/> is a <see cref="T:System.TimeSpan"/> object that represents the same time interval as the current <see cref="T:System.TimeSpan"/> structure; otherwise, false.
            </returns>
            <param name="value">An object to compare with this instance. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.Duration">
            <summary>
            Returns a new <see cref="T:System.TimeSpan"/> object whose value is the absolute value of the current <see cref="T:System.TimeSpan"/> object.
            </summary>
            
            <returns>
            A new object whose value is the absolute value of the current <see cref="T:System.TimeSpan"/> object.
            </returns>
            <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
            <summary>
            Compares this instance to a specified <see cref="T:System.TimeSpan"/> object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the <see cref="T:System.TimeSpan"/> object.
            </summary>
            
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="value"/>.Value Description A negative integer This instance is shorter than <paramref name="value"/>. Zero This instance is equal to <paramref name="value"/>. A positive integer This instance is longer than <paramref name="value"/>.
            </returns>
            <param name="value">An object to compare to this instance.</param>
        </member>
        <member name="M:System.TimeSpan.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.
            </summary>
            
            <returns>
            One of the following values.Value Description -1 This instance is shorter than <paramref name="value"/>. 0 This instance is equal to <paramref name="value"/>. 1 This instance is longer than <paramref name="value"/>.-or- <paramref name="value"/> is null.
            </returns>
            <param name="value">An object to compare, or null. </param><exception cref="T:System.ArgumentException"><paramref name="value"/> is not a <see cref="T:System.TimeSpan"/>. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
            <summary>
            Compares two <see cref="T:System.TimeSpan"/> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.
            </summary>
            
            <returns>
            One of the following values.Value Description -1 <paramref name="t1"/> is shorter than <paramref name="t2"/>. 0 <paramref name="t1"/> is equal to <paramref name="t2"/>. 1 <paramref name="t1"/> is longer than <paramref name="t2"/>.
            </returns>
            <param name="t1">The first time interval to compare. </param><param name="t2">The second time interval to compare. </param><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> whose value is the negated value of the specified instance.
            </summary>
            
            <returns>
            An object that has the same numeric value as this instance, but the opposite sign.
            </returns>
            <param name="t">The time interval to be negated. </param><exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan"/>; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue"/>. </exception><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
            <summary>
            Subtracts a specified <see cref="T:System.TimeSpan"/> from another specified <see cref="T:System.TimeSpan"/>.
            </summary>
            
            <returns>
            An object whose value is the result of the value of <paramref name="t1"/> minus the value of <paramref name="t2"/>.
            </returns>
            <param name="t1">The minuend. </param><param name="t2">The subtrahend. </param><exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. </exception><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
            <summary>
            Returns the specified instance of <see cref="T:System.TimeSpan"/>.
            </summary>
            
            <returns>
            The time interval specified by <paramref name="t"/>.
            </returns>
            <param name="t">The time interval to return. </param><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
            <summary>
            Adds two specified <see cref="T:System.TimeSpan"/> instances.
            </summary>
            
            <returns>
            An object whose value is the sum of the values of <paramref name="t1"/> and <paramref name="t2"/>.
            </returns>
            <param name="t1">The first time interval to add. </param><param name="t2">The second time interval to add.</param><exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>. </exception><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether two <see cref="T:System.TimeSpan"/> instances are equal.
            </summary>
            
            <returns>
            true if the values of <paramref name="t1"/> and <paramref name="t2"/> are equal; otherwise, false.
            </returns>
            <param name="t1">The first time interval to compare. </param><param name="t2">The second time interval to compare. </param><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether two <see cref="T:System.TimeSpan"/> instances are not equal.
            </summary>
            
            <returns>
            true if the values of <paramref name="t1"/> and <paramref name="t2"/> are not equal; otherwise, false.
            </returns>
            <param name="t1">The first time interval to compare.</param><param name="t2">The second time interval to compare.</param><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:System.TimeSpan"/> is less than another specified <see cref="T:System.TimeSpan"/>.
            </summary>
            
            <returns>
            true if the value of <paramref name="t1"/> is less than the value of <paramref name="t2"/>; otherwise, false.
            </returns>
            <param name="t1">The first time interval to compare.</param><param name="t2">The second time interval to compare. </param><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:System.TimeSpan"/> is less than or equal to another specified <see cref="T:System.TimeSpan"/>.
            </summary>
            
            <returns>
            true if the value of <paramref name="t1"/> is less than or equal to the value of <paramref name="t2"/>; otherwise, false.
            </returns>
            <param name="t1">The first time interval to compare. </param><param name="t2">The second time interval to compare. </param><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:System.TimeSpan"/> is greater than another specified <see cref="T:System.TimeSpan"/>.
            </summary>
            
            <returns>
            true if the value of <paramref name="t1"/> is greater than the value of <paramref name="t2"/>; otherwise, false.
            </returns>
            <param name="t1">The first time interval to compare. </param><param name="t2">The second time interval to compare. </param><filterpriority>3</filterpriority>
        </member>
        <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
            <summary>
            Indicates whether a specified <see cref="T:System.TimeSpan"/> is greater than or equal to another specified <see cref="T:System.TimeSpan"/>.
            </summary>
            
            <returns>
            true if the value of <paramref name="t1"/> is greater than or equal to the value of <paramref name="t2"/>; otherwise, false.
            </returns>
            <param name="t1">The first time interval to compare.</param><param name="t2">The second time interval to compare.</param><filterpriority>3</filterpriority>
        </member>
        <member name="T:System.Tuple">
            <summary>
            Provides static methods for creating tuple objects.
            </summary>
        </member>
        <member name="M:System.Tuple.Create``1(``0)">
            <summary>
            Creates a new 1-tuple, or singleton.
            </summary>
            
            <returns>
            A tuple whose value is (<paramref name="item1"/>).
            </returns>
            <param name="item1">The value of the only component of the tuple.</param><typeparam name="T1">The type of the only component of the tuple.</typeparam>
        </member>
        <member name="M:System.Tuple.Create``2(``0,``1)">
            <summary>
            Creates a new 2-tuple, or pair.
            </summary>
            
            <returns>
            A 2-tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>).
            </returns>
            <param name="item1">The value of the first component of the tuple.</param><param name="item2">The value of the second component of the tuple.</param><typeparam name="T1">The type of the first component of the tuple.</typeparam><typeparam name="T2">The type of the second component of the tuple.</typeparam>
        </member>
        <member name="M:System.Tuple.Create``3(``0,``1,``2)">
            <summary>
            Creates a new 3-tuple, or triple.
            </summary>
            
            <returns>
            A 3-tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>).
            </returns>
            <param name="item1">The value of the first component of the tuple.</param><param name="item2">The value of the second component of the tuple.</param><param name="item3">The value of the third component of the tuple.</param><typeparam name="T1">The type of the first component of the tuple.</typeparam><typeparam name="T2">The type of the second component of the tuple.</typeparam><typeparam name="T3">The type of the third component of the tuple.</typeparam>
        </member>
        <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates a new 4-tuple, or quadruple.
            </summary>
            
            <returns>
            A 4-tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>).
            </returns>
            <param name="item1">The value of the first component of the tuple.</param><param name="item2">The value of the second component of the tuple.</param><param name="item3">The value of the third component of the tuple.</param><param name="item4">The value of the fourth component of the tuple.</param><typeparam name="T1">The type of the first component of the tuple.</typeparam><typeparam name="T2">The type of the second component of the tuple.</typeparam><typeparam name="T3">The type of the third component of the tuple.</typeparam><typeparam name="T4">The type of the fourth component of the tuple.  </typeparam>
        </member>
        <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates a new 5-tuple, or quintuple.
            </summary>
            
            <returns>
            A 5-tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>, <paramref name="item5"/>).
            </returns>
            <param name="item1">The value of the first component of the tuple.</param><param name="item2">The value of the second component of the tuple.</param><param name="item3">The value of the third component of the tuple.</param><param name="item4">The value of the fourth component of the tuple.</param><param name="item5">The value of the fifth component of the tuple.</param><typeparam name="T1">The type of the first component of the tuple.</typeparam><typeparam name="T2">The type of the second component of the tuple.</typeparam><typeparam name="T3">The type of the third component of the tuple.</typeparam><typeparam name="T4">The type of the fourth component of the tuple.</typeparam><typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
        </member>
        <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new 6-tuple, or sextuple.
            </summary>
            
            <returns>
            A 6-tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>).
            </returns>
            <param name="item1">The value of the first component of the tuple.</param><param name="item2">The value of the second component of the tuple.</param><param name="item3">The value of the third component of the tuple.</param><param name="item4">The value of the fourth component of the tuple.</param><param name="item5">The value of the fifth component of the tuple.</param><param name="item6">The value of the sixth component of the tuple.</param><typeparam name="T1">The type of the first component of the tuple.</typeparam><typeparam name="T2">The type of the second component of the tuple.</typeparam><typeparam name="T3">The type of the third component of the tuple.</typeparam><typeparam name="T4">The type of the fourth component of the tuple.</typeparam><typeparam name="T5">The type of the fifth component of the tuple.</typeparam><typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
        </member>
        <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new 7-tuple, or septuple.
            </summary>
            
            <returns>
            A 7-tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>, <paramref name="item7"/>).
            </returns>
            <param name="item1">The value of the first component of the tuple.</param><param name="item2">The value of the second component of the tuple.</param><param name="item3">The value of the third component of the tuple.</param><param name="item4">The value of the fourth component of the tuple.</param><param name="item5">The value of the fifth component of the tuple.</param><param name="item6">The value of the sixth component of the tuple.</param><param name="item7">The value of the seventh component of the tuple.</param><typeparam name="T1">The type of the first component of the tuple.</typeparam><typeparam name="T2">The type of the second component of the tuple.</typeparam><typeparam name="T3">The type of the third component of the tuple.</typeparam><typeparam name="T4">The type of the fourth component of the tuple.</typeparam><typeparam name="T5">The type of the fifth component of the tuple.</typeparam><typeparam name="T6">The type of the sixth component of the tuple.</typeparam><typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
        </member>
        <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new 8-tuple, or octuple.
            </summary>
            
            <returns>
            An 8-tuple (octuple) whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>, <paramref name="item7"/>, <paramref name="item8"/>).
            </returns>
            <param name="item1">The value of the first component of the tuple.</param><param name="item2">The value of the second component of the tuple.</param><param name="item3">The value of the third component of the tuple.</param><param name="item4">The value of the fourth component of the tuple.</param><param name="item5">The value of the fifth component of the tuple.</param><param name="item6">The value of the sixth component of the tuple.</param><param name="item7">The value of the seventh component of the tuple.</param><param name="item8">The value of the eighth component of the tuple.</param><typeparam name="T1">The type of the first component of the tuple.</typeparam><typeparam name="T2">The type of the second component of the tuple.</typeparam><typeparam name="T3">The type of the third component of the tuple.</typeparam><typeparam name="T4">The type of the fourth component of the tuple.</typeparam><typeparam name="T5">The type of the fifth component of the tuple.</typeparam><typeparam name="T6">The type of the sixth component of the tuple.</typeparam><typeparam name="T7">The type of the seventh component of the tuple.</typeparam><typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
        </member>
        <member name="T:System.Tuple`1">
            <summary>
            Represents a 1-tuple, or singleton.
            </summary>
            <typeparam name="T1">The type of the tuple's only component.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="P:System.Tuple`1.Item1">
            <summary>
            Gets the value of the <see cref="T:System.Tuple`1"/> object's single component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`1"/> object's single component.
            </returns>
        </member>
        <member name="M:System.Tuple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`1"/> class.
            </summary>
            <param name="item1">The value of the tuple's only component.</param>
        </member>
        <member name="M:System.Tuple`1.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`1"/> object is equal to a specified object.
            </summary>
            
            <returns>
            true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:System.Tuple`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.Tuple`1"/> object.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Tuple`1.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`1"/> instance.
            </summary>
            
            <returns>
            The string representation of this <see cref="T:System.Tuple`1"/> object.
            </returns>
        </member>
        <member name="T:System.Tuple`2">
            <summary>
            Represents a 2-tuple, or pair.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam><typeparam name="T2">The type of the tuple's second component.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Tuple`2.Item1">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`2"/> object's first component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`2"/> object's first component.
            </returns>
        </member>
        <member name="P:System.Tuple`2.Item2">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`2"/> object's second component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`2"/> object's second component.
            </returns>
        </member>
        <member name="M:System.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`2"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param><param name="item2">The value of the tuple's second component.</param>
        </member>
        <member name="M:System.Tuple`2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`2"/> object is equal to a specified object.
            </summary>
            
            <returns>
            true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:System.Tuple`2.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.Tuple`2"/> object.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Tuple`2.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`2"/> instance.
            </summary>
            
            <returns>
            The string representation of this <see cref="T:System.Tuple`2"/> object.
            </returns>
        </member>
        <member name="T:System.Tuple`3">
            <summary>
            Represents a 3-tuple, or triple.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam><typeparam name="T2">The type of the tuple's second component.</typeparam><typeparam name="T3">The type of the tuple's third component.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Tuple`3.Item1">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`3"/> object's first component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`3"/> object's first component.
            </returns>
        </member>
        <member name="P:System.Tuple`3.Item2">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`3"/> object's second component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`3"/> object's second component.
            </returns>
        </member>
        <member name="P:System.Tuple`3.Item3">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`3"/> object's third component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`3"/> object's third component.
            </returns>
        </member>
        <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`3"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param><param name="item2">The value of the tuple's second component.</param><param name="item3">The value of the tuple's third component.</param>
        </member>
        <member name="M:System.Tuple`3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`3"/> object is equal to a specified object.
            </summary>
            
            <returns>
            true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:System.Tuple`3.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.Tuple`3"/> object.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Tuple`3.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`3"/> instance.
            </summary>
            
            <returns>
            The string representation of this <see cref="T:System.Tuple`3"/> object.
            </returns>
        </member>
        <member name="T:System.Tuple`4">
            <summary>
            Represents a 4-tuple, or quadruple.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam><typeparam name="T2">The type of the tuple's second component.</typeparam><typeparam name="T3">The type of the tuple's third component.</typeparam><typeparam name="T4">The type of the tuple's fourth component.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Tuple`4.Item1">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`4"/> object's first component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`4"/> object's first component.
            </returns>
        </member>
        <member name="P:System.Tuple`4.Item2">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`4"/> object's second component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`4"/> object's second component.
            </returns>
        </member>
        <member name="P:System.Tuple`4.Item3">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`4"/> object's third component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`4"/> object's third component.
            </returns>
        </member>
        <member name="P:System.Tuple`4.Item4">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`4"/> object's fourth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`4"/> object's fourth component.
            </returns>
        </member>
        <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`4"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param><param name="item2">The value of the tuple's second component.</param><param name="item3">The value of the tuple's third component.</param><param name="item4">The value of the tuple's fourth component</param>
        </member>
        <member name="M:System.Tuple`4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`4"/> object is equal to a specified object.
            </summary>
            
            <returns>
            true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:System.Tuple`4.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.Tuple`4"/> object.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Tuple`4.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`4"/> instance.
            </summary>
            
            <returns>
            The string representation of this <see cref="T:System.Tuple`4"/> object.
            </returns>
        </member>
        <member name="T:System.Tuple`5">
            <summary>
            Represents a 5-tuple, or quintuple.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam><typeparam name="T2">The type of the tuple's second component.</typeparam><typeparam name="T3">The type of the tuple's third component.</typeparam><typeparam name="T4">The type of the tuple's fourth component.</typeparam><typeparam name="T5">The type of the tuple's fifth component.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Tuple`5.Item1">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`5"/> object's first component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`5"/> object's first component.
            </returns>
        </member>
        <member name="P:System.Tuple`5.Item2">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`5"/> object's second component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`5"/> object's second component.
            </returns>
        </member>
        <member name="P:System.Tuple`5.Item3">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`5"/> object's third component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`5"/> object's third component.
            </returns>
        </member>
        <member name="P:System.Tuple`5.Item4">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`5"/> object's fourth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`5"/> object's fourth component.
            </returns>
        </member>
        <member name="P:System.Tuple`5.Item5">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`5"/> object's fifth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`5"/> object's fifth component.
            </returns>
        </member>
        <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`5"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param><param name="item2">The value of the tuple's second component.</param><param name="item3">The value of the tuple's third component.</param><param name="item4">The value of the tuple's fourth component</param><param name="item5">The value of the tuple's fifth component.</param>
        </member>
        <member name="M:System.Tuple`5.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`5"/> object is equal to a specified object.
            </summary>
            
            <returns>
            true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:System.Tuple`5.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.Tuple`5"/> object.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Tuple`5.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`5"/> instance.
            </summary>
            
            <returns>
            The string representation of this <see cref="T:System.Tuple`5"/> object.
            </returns>
        </member>
        <member name="T:System.Tuple`6">
            <summary>
            Represents a 6-tuple, or sextuple.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam><typeparam name="T2">The type of the tuple's second component.</typeparam><typeparam name="T3">The type of the tuple's third component.</typeparam><typeparam name="T4">The type of the tuple's fourth component.</typeparam><typeparam name="T5">The type of the tuple's fifth component.</typeparam><typeparam name="T6">The type of the tuple's sixth component.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Tuple`6.Item1">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`6"/> object's first component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`6"/> object's first component.
            </returns>
        </member>
        <member name="P:System.Tuple`6.Item2">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`6"/> object's second component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`6"/> object's second component.
            </returns>
        </member>
        <member name="P:System.Tuple`6.Item3">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`6"/> object's third component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`6"/> object's third component.
            </returns>
        </member>
        <member name="P:System.Tuple`6.Item4">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`6"/> object's fourth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`6"/> object's fourth component.
            </returns>
        </member>
        <member name="P:System.Tuple`6.Item5">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`6"/> object's fifth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`6"/> object's fifth  component.
            </returns>
        </member>
        <member name="P:System.Tuple`6.Item6">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`6"/> object's sixth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`6"/> object's sixth component.
            </returns>
        </member>
        <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`6"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param><param name="item2">The value of the tuple's second component.</param><param name="item3">The value of the tuple's third component.</param><param name="item4">The value of the tuple's fourth component</param><param name="item5">The value of the tuple's fifth component.</param><param name="item6">The value of the tuple's sixth component.</param>
        </member>
        <member name="M:System.Tuple`6.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`6"/> object is equal to a specified object.
            </summary>
            
            <returns>
            true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:System.Tuple`6.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.Tuple`6"/> object.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Tuple`6.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`6"/> instance.
            </summary>
            
            <returns>
            The string representation of this <see cref="T:System.Tuple`6"/> object.
            </returns>
        </member>
        <member name="T:System.Tuple`7">
            <summary>
            Represents a 7-tuple, or septuple.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam><typeparam name="T2">The type of the tuple's second component.</typeparam><typeparam name="T3">The type of the tuple's third component.</typeparam><typeparam name="T4">The type of the tuple's fourth component.</typeparam><typeparam name="T5">The type of the tuple's fifth component.</typeparam><typeparam name="T6">The type of the tuple's sixth component.</typeparam><typeparam name="T7">The type of the tuple's seventh component.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Tuple`7.Item1">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`7"/> object's first component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`7"/> object's first component.
            </returns>
        </member>
        <member name="P:System.Tuple`7.Item2">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`7"/> object's second component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`7"/> object's second component.
            </returns>
        </member>
        <member name="P:System.Tuple`7.Item3">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`7"/> object's third component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`7"/> object's third component.
            </returns>
        </member>
        <member name="P:System.Tuple`7.Item4">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`7"/> object's fourth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`7"/> object's fourth component.
            </returns>
        </member>
        <member name="P:System.Tuple`7.Item5">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`7"/> object's fifth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`7"/> object's fifth component.
            </returns>
        </member>
        <member name="P:System.Tuple`7.Item6">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`7"/> object's sixth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`7"/> object's sixth component.
            </returns>
        </member>
        <member name="P:System.Tuple`7.Item7">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`7"/> object's seventh component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`7"/> object's seventh component.
            </returns>
        </member>
        <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`7"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param><param name="item2">The value of the tuple's second component.</param><param name="item3">The value of the tuple's third component.</param><param name="item4">The value of the tuple's fourth component</param><param name="item5">The value of the tuple's fifth component.</param><param name="item6">The value of the tuple's sixth component.</param><param name="item7">The value of the tuple's seventh component.</param>
        </member>
        <member name="M:System.Tuple`7.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`7"/> object is equal to a specified object.
            </summary>
            
            <returns>
            true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:System.Tuple`7.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.Tuple`7"/> object.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Tuple`7.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`7"/> instance.
            </summary>
            
            <returns>
            The string representation of this <see cref="T:System.Tuple`7"/> object.
            </returns>
        </member>
        <member name="T:System.Tuple`8">
            <summary>
            Represents an n-tuple, where n is 8 or greater.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam><typeparam name="T2">The type of the tuple's second component.</typeparam><typeparam name="T3">The type of the tuple's third component.</typeparam><typeparam name="T4">The type of the tuple's fourth component.</typeparam><typeparam name="T5">The type of the tuple's fifth component.</typeparam><typeparam name="T6">The type of the tuple's sixth component.</typeparam><typeparam name="T7">The type of the tuple's seventh component.</typeparam><typeparam name="TRest">Any generic Tuple object that defines the types of the tuple's remaining components.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Tuple`8.Item1">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`8"/> object's first component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`8"/> object's first component.
            </returns>
        </member>
        <member name="P:System.Tuple`8.Item2">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`8"/> object's second component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`8"/> object's second component.
            </returns>
        </member>
        <member name="P:System.Tuple`8.Item3">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`8"/> object's third component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`8"/> object's third component.
            </returns>
        </member>
        <member name="P:System.Tuple`8.Item4">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`8"/> object's fourth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`8"/> object's fourth component.
            </returns>
        </member>
        <member name="P:System.Tuple`8.Item5">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`8"/> object's fifth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`8"/> object's fifth component.
            </returns>
        </member>
        <member name="P:System.Tuple`8.Item6">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`8"/> object's sixth component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`8"/> object's sixth component.
            </returns>
        </member>
        <member name="P:System.Tuple`8.Item7">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`8"/> object's seventh component.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`8"/> object's seventh component.
            </returns>
        </member>
        <member name="P:System.Tuple`8.Rest">
            <summary>
            Gets the current <see cref="T:System.Tuple`8"/> object's remaining components.
            </summary>
            
            <returns>
            The value of the current <see cref="T:System.Tuple`8"/> object's remaining components.
            </returns>
        </member>
        <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`8"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param><param name="item2">The value of the tuple's second component.</param><param name="item3">The value of the tuple's third component.</param><param name="item4">The value of the tuple's fourth component</param><param name="item5">The value of the tuple's fifth component.</param><param name="item6">The value of the tuple's sixth component.</param><param name="item7">The value of the tuple's seventh component.</param><param name="rest">Any generic Tuple object that contains the values of the tuple's remaining components.</param><exception cref="T:System.ArgumentException"><paramref name="rest"/> is not a generic Tuple object.</exception>
        </member>
        <member name="M:System.Tuple`8.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`8"/> object is equal to a specified object.
            </summary>
            
            <returns>
            true if the current instance is equal to the specified object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with this instance.</param>
        </member>
        <member name="M:System.Tuple`8.GetHashCode">
            <summary>
            Calculates the hash code for the current <see cref="T:System.Tuple`8"/> object.
            </summary>
            
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Tuple`8.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`8"/> instance.
            </summary>
            
            <returns>
            The string representation of this <see cref="T:System.Tuple`8"/> object.
            </returns>
        </member>
        <member name="P:System.Type.AssemblyQualifiedName">
            <summary>Gets the assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</summary>
            <returns>The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or null if the current instance represents a generic type parameter.</returns>
        </member>
        <member name="P:System.Type.FullName">
            <summary>Gets the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</summary>
            <returns>The fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</returns>
        </member>
        <member name="M:System.Type.IsInstanceOfType(System.Object)">
            <summary>
            Determines whether the specified object is an instance of the current <see cref="T:System.Type"/>.
            </summary>
            
            <returns>
            true if the current Type is in the inheritance hierarchy of the object represented by <paramref name="o"/>, or if the current Type is an interface that <paramref name="o"/> supports. false if neither of these conditions is the case, or if <paramref name="o"/> is null, or if the current Type is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters"/> returns true).
            </returns>
            <param name="o">The object to compare with the current type.</param>
        </member>
        <member name="M:System.Type.GetInterfaces">
            <summary>
            When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type"/>.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Type"/> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type"/>.-or- An empty array of type <see cref="T:System.Type"/>, if no interfaces are implemented or inherited by the current <see cref="T:System.Type"/>.
            </returns>
            <exception cref="T:System.Reflection.TargetInvocationException">A static initializer is invoked and throws an exception. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetMethod(System.String,System.Type[])">
            <summary>
            Searches for the specified public method whose parameters match the specified argument types.
            </summary>
            
            <returns>
            An object representing the public method whose parameters match the specified argument types, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the public method to get. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the method to get.-or- An empty array of <see cref="T:System.Type"/> objects (as provided by the <see cref="F:System.Type.EmptyTypes"/> field) to get a method that takes no parameters. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and specified parameters. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.-or- <paramref name="types"/> is null.-or- One of the elements in <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified method, using the specified binding constraints.
            </summary>
            
            <returns>
            An object representing the method that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the method to get. </param><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name and matching the specified binding constraints. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetMethod(System.String)">
            <summary>
            Searches for the public method with the specified name.
            </summary>
            
            <returns>
            An object that represents the public method with the specified name, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the public method to get. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the specified name. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.
            </summary>
            
            <returns>
            An object representing the property that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the property to get. </param><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder"/>. </param><param name="returnType">The return type of the property. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type"/> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param><param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the <paramref name="types"/> array. The default binder does not process this parameter. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.-or- <paramref name="types"/> is null.</exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.-or- <paramref name="modifiers"/> is multidimensional.-or- <paramref name="types"/> and <paramref name="modifiers"/> do not have the same length. </exception><exception cref="T:System.NullReferenceException">An element of <paramref name="types"/> is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for the specified public property whose parameters match the specified argument types and modifiers.
            </summary>
            
            <returns>
            An object representing the public property that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the public property to get. </param><param name="returnType">The return type of the property. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type"/> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param><param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the <paramref name="types"/> array. The default binder does not process this parameter. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types and modifiers. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.-or- <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.-or- <paramref name="modifiers"/> is multidimensional.-or- <paramref name="types"/> and <paramref name="modifiers"/> do not have the same length. </exception><exception cref="T:System.NullReferenceException">An element of <paramref name="types"/> is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified property, using the specified binding constraints.
            </summary>
            
            <returns>
            An object representing the property that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the property to get. </param><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. See Remarks.</exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
            <summary>
            Searches for the specified public property whose parameters match the specified argument types.
            </summary>
            
            <returns>
            An object representing the public property whose parameters match the specified argument types, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the public property to get. </param><param name="returnType">The return type of the property. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type"/> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.-or- <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional. </exception><exception cref="T:System.NullReferenceException">An element of <paramref name="types"/> is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetProperty(System.String,System.Type[])">
            <summary>
            Searches for the specified public property whose parameters match the specified argument types.
            </summary>
            
            <returns>
            An object representing the public property whose parameters match the specified argument types, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the public property to get. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type"/> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified argument types. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.-or- <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional. </exception><exception cref="T:System.NullReferenceException">An element of <paramref name="types"/> is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetProperty(System.String,System.Type)">
            <summary>
            Searches for the public property with the specified name and return type.
            </summary>
            
            <returns>
            An object representing the public property with the specified name, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the public property to get. </param><param name="returnType">The return type of the property. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null, or <paramref name="returnType"/> is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetProperty(System.String)">
            <summary>
            Searches for the public property with the specified name.
            </summary>
            
            <returns>
            An object representing the public property with the specified name, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the public property to get. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name. See Remarks.</exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.
            </summary>
            
            <returns>
            An object representing the property that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the property to get. </param><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder"/>. </param><param name="returnType">The return type of the property. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the indexed property to get.-or- An empty array of the type <see cref="T:System.Type"/> (that is, Type[] types = new Type[0]) to get a property that is not indexed. </param><param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the <paramref name="types"/> array. The default binder does not process this parameter. </param><exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name and matching the specified binding constraints. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.-or- <paramref name="types"/> is null.-or- One of the elements in <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.-or- <paramref name="modifiers"/> is multidimensional.-or- <paramref name="types"/> and <paramref name="modifiers"/> do not have the same length. </exception><exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder"/>, <see cref="T:System.Reflection.Emit.EnumBuilder"/>, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/>.</exception>
        </member>
        <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified field, using the specified binding constraints.
            </summary>
            
            <returns>
            An object representing the field that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the data field to get. </param><param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetField(System.String)">
            <summary>
            Searches for the public field with the specified name.
            </summary>
            
            <returns>
            An object representing the public field with the specified name, if found; otherwise, null.
            </returns>
            <param name="name">The string containing the name of the data field to get. </param><exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null. </exception><exception cref="T:System.NotSupportedException">This <see cref="T:System.Type"/> object is a <see cref="T:System.Reflection.Emit.TypeBuilder"/> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType"/> method has not yet been called. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetFields">
            <summary>
            Returns all the public fields of the current <see cref="T:System.Type"/>.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Reflection.FieldInfo"/> objects representing all the public fields defined for the current <see cref="T:System.Type"/>.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo"/>, if no public fields are defined for the current <see cref="T:System.Type"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
            <summary>
            When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type"/>, using the specified binding constraints.
            </summary>
            
            <returns>
            An array of <see cref="T:System.Reflection.FieldInfo"/> objects representing all fields defined for the current <see cref="T:System.Type"/> that match the specified binding constraints.-or- An empty array of type <see cref="T:System.Reflection.FieldInfo"/>, if no fields are defined for the current <see cref="T:System.Type"/>, or if none of the defined fields match the binding constraints.
            </returns>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Type.IsValueType">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is a value type.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> is a value type; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Type.GetArrayRank">
            <summary>Gets the number of dimensions in an <see cref="T:System.Array" />.</summary>
            <returns>An <see cref="T:System.Int32" /> containing the number of dimensions in the current Type.</returns>
            <exception cref="T:System.NotSupportedException">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. </exception>
            <exception cref="T:System.ArgumentException">The current Type is not an array. </exception>
        </member>
        <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
            </summary>
            
            <returns>
            An object representing the constructor that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder"/>. </param><param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type"/> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters. </param><param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the <paramref name="types"/> array. The default binder does not process this parameter. </param><exception cref="T:System.ArgumentNullException"><paramref name="types"/> is null.-or- One of the elements in <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.-or- <paramref name="modifiers"/> is multidimensional.-or- <paramref name="types"/> and <paramref name="modifiers"/> do not have the same length. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder"/>. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type"/> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.-or- <see cref="F:System.Type.EmptyTypes"/>. </param><param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter. </param><exception cref="T:System.ArgumentNullException"><paramref name="types"/> is null.-or- One of the elements in <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.-or- <paramref name="modifiers"/> is multidimensional.-or- <paramref name="types"/> and <paramref name="modifiers"/> do not have the same length. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetConstructor(System.Type[])">
            <summary>
            Searches for a public instance constructor whose parameters match the types in the specified array.
            </summary>
            
            <returns>
            An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null.
            </returns>
            <param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the desired constructor.-or- An empty array of <see cref="T:System.Type"/> objects, to get a constructor that takes no parameters. Such an empty array is provided by the static field <see cref="F:System.Type.EmptyTypes"/>. </param><exception cref="T:System.ArgumentNullException"><paramref name="types"/> is null.-or- One of the elements in <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
            </summary>
            
            <returns>
            A <see cref="T:System.Reflection.ConstructorInfo"/> object representing the constructor that matches the specified requirements, if found; otherwise, null.
            </returns>
            <param name="bindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted.-or- Zero, to return null. </param><param name="binder">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.-or- A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder"/>. </param><param name="callConvention">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up. </param><param name="types">An array of <see cref="T:System.Type"/> objects representing the number, order, and type of the parameters for the constructor to get.-or- An empty array of the type <see cref="T:System.Type"/> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters. </param><param name="modifiers">An array of <see cref="T:System.Reflection.ParameterModifier"/> objects representing the attributes associated with the corresponding element in the <paramref name="types"/> array. The default binder does not process this parameter. </param><exception cref="T:System.ArgumentNullException"><paramref name="types"/> is null.-or- One of the elements in <paramref name="types"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="types"/> is multidimensional.-or- <paramref name="modifiers"/> is multidimensional.-or- <paramref name="types"/> and <paramref name="modifiers"/> do not have the same length. </exception><exception cref="T:System.NotSupportedException">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder"/> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder"/>.</exception>
        </member>
        <member name="M:System.Type.GetEnumUnderlyingType">
            <summary>Returns the underlying type of the current enumeration type. </summary>
            <returns>The underlying type of the current enumeration.</returns>
            <exception cref="T:System.ArgumentException">The current type is not an enumeration.-or-The enumeration type is not valid, because it contains more than one instance field.</exception>
        </member>
        <member name="P:System.Type.Attributes">
            <summary>Gets the attributes associated with the <see cref="T:System.Type" />.</summary>
            <returns>A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</returns>
        </member>
        <member name="P:System.Type.IsPrimitive">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is one of the primitive types.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> is one of the primitive types; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Type.IsAbstract">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is abstract and must be overridden.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> is abstract; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Type.IsEnum">
            <summary>Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</summary>
            <returns>true if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, false.</returns>
        </member>
        <member name="P:System.Type.IsInterface">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is an interface; that is, not a class or a value type.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> is an interface; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Type.IsSealed">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is declared sealed.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> is declared sealed; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Type.IsGenericType">
            <summary>
            Gets a value indicating whether the current type is a generic type.
            </summary>
            
            <returns>
            true if the current type is a generic type; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Type.GetGenericTypeDefinition">
            <summary>
            Returns a <see cref="T:System.Type"/> object that represents a generic type definition from which the current generic type can be constructed.
            </summary>
            
            <returns>
            A <see cref="T:System.Type"/> object representing a generic type from which the current type can be constructed.
            </returns>
            <exception cref="T:System.InvalidOperationException">The current type is not a generic type. That is, <see cref="P:System.Type.IsGenericType"/> returns false. </exception><exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Type.MakeGenericType(System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type"/> object representing the resulting constructed type.
            </summary>
            
            <returns>
            A <see cref="T:System.Type"/> representing the constructed type formed by substituting the elements of <paramref name="typeArguments"/> for the type parameters of the current generic type.
            </returns>
            <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic type.</param><exception cref="T:System.InvalidOperationException">The current type does not represent a generic type definition. That is, <see cref="P:System.Type.IsGenericTypeDefinition"/> returns false. </exception><exception cref="T:System.ArgumentNullException"><paramref name="typeArguments"/> is null.-or- Any element of <paramref name="typeArguments"/> is null. </exception><exception cref="T:System.ArgumentException">The number of elements in <paramref name="typeArguments"/> is not the same as the number of type parameters in the current generic type definition.-or- Any element of <paramref name="typeArguments"/> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. -or- <paramref name="typeArguments"/> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer"/> returns true), a by-ref type (<see cref="P:System.Type.IsByRef"/> returns true), or <see cref="T:System.Void"/>.</exception><exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception>
        </member>
        <member name="P:System.Type.GenericTypeArguments">
            <summary>
            Gets an array of the generic type arguments for this type.
            </summary>
            <returns>
            An array of the generic type arguments for this type.
            </returns>
        </member>
        <member name="M:System.Type.GetGenericArguments">
            <summary>
            Returns an array of <see cref="T:System.Type"/> objects that represent the type arguments of a generic type or the type parameters of a generic type definition.
            </summary>
            <returns>
            An array of <see cref="T:System.Type"/> objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.
            </returns>
            <exception cref="T:System.NotSupportedException">The invoked method is not supported in the base class. Derived classes must provide an implementation.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Type.IsArray">
            <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is an array.</summary>
            <returns>true if the <see cref="T:System.Type" /> is an array; otherwise, false.</returns>
        </member>
        <member name="P:System.Type.IsTypedArrayCompatible">
            <summary>Gets a value indicating whether the <see cref="T:System.Type" /> is a JavaScript typed array compatible.</summary>
            <returns>true if the <see cref="T:System.Type" /> is a JavaScript typed array compatible; otherwise, false.</returns>
        </member>
        <member name="P:System.Type.IsGenericTypeDefinition">
            <summary>
            Gets a value indicating whether the current <see cref="T:System.Type"/> represents a generic type definition, from which other generic types can be constructed.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> object represents a generic type definition; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Type.IsGenericParameter">
            <summary>
            Gets a value indicating whether the current <see cref="T:System.Type"/> represents a type parameter in the definition of a generic type or method.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> object represents a type parameter of a generic type definition or generic method definition; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Type.HasElementType">
            <summary>
            Gets a value indicating whether the current <see cref="T:System.Type"/> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type"/> is an array, a pointer, or is passed by reference.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> is an array, a pointer, or is passed by reference; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Type.IsNested">
            <summary>
            Gets a value indicating whether the current <see cref="T:System.Type"/> object represents a type whose definition is nested inside the definition of another type.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> is nested inside another type; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Type.IsNestedPublic">
            <summary>
            Gets a value indicating whether a class is nested and declared public.
            </summary>
            
            <returns>
            true if the class is nested and declared public; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Type.IsVisible">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> can be accessed by code outside the assembly.
            </summary>
            
            <returns>
            true if the current <see cref="T:System.Type"/> is a public type or a public nested type such that all the enclosing types are public; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:System.Type.IsPublic">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Type"/> is declared public.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Type"/> is declared public and is not a nested type; otherwise, false.
            </returns>
        </member>
        <member name="T:System.TypeCode">
            <summary>
            Specifies the type of an object.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
    </members>
</doc>
